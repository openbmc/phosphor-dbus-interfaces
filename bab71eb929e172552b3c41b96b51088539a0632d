{
  "comments": [
    {
      "key": {
        "uuid": "1afe83ef_7170f882",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T21:47:51Z",
      "side": 1,
      "message": "Does the MCTP protocol require these to be byte?  Are NetworkIDs similarly expected to be int32 by the spec?",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "786c73ad_c1a0f5a0",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-16T04:54:45Z",
      "side": 1,
      "message": "EID is a single byte in the specification, can\u0027t rule out the possibility of a change in the next version of MCTP spec.\n\n\u003e Are NetworkIDs similarly expected to be int32 by the spec?\nNetworkID is a MCTP kernel stack defined identifier(int smctp_network) and not coming from the specification.\n\nhttps://github.com/openbmc/docs/blob/master/designs/mctp/mctp-kernel.md",
      "parentUuid": "1afe83ef_7170f882",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13751e26_2bd9e96c",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-24T01:37:42Z",
      "side": 1,
      "message": "Can we just use \u0027size\u0027 for both of them then?",
      "parentUuid": "786c73ad_c1a0f5a0",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3cce3b6_38528e42",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 19,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-24T08:26:10Z",
      "side": 1,
      "message": "Sure",
      "parentUuid": "13751e26_2bd9e96c",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53dff3d8_3eb095ad",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T21:47:51Z",
      "side": 1,
      "message": "Can we make these enumeration values?",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "947fa107_aa548540",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-16T04:54:45Z",
      "side": 1,
      "message": "Array of enumerations?\n\nFrom my initial reading of the spec, my understanding was that a range of message types is vendor defined, in which case I was not sure how to express it in the property as an enumeration. \n\nOn a closer look at the spec, the vendor defined message types are well defined [Vendor Defined – PCI - 0x7E], [Vendor Defined – IANA - 0x7F], so the D-Bus property needs to only show this capability.",
      "parentUuid": "53dff3d8_3eb095ad",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b234478f_a9a976b8",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-24T01:37:42Z",
      "side": 1,
      "message": "When it is something like \"Vendor Defined - IANA\" is there additional information you need for support?  Or is that just one type where there is some kind of identifier sent in the message to correspond with IANA?\n\nIf you can create enumerations for these it seems less error prone to me than spreading the #defines around for these.",
      "parentUuid": "947fa107_aa548540",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f870617e_0334f7a9",
        "filename": "yaml/xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-24T08:26:10Z",
      "side": 1,
      "message": "\u003e When it is something like \"Vendor Defined - IANA\" is there additional information you need for support?  Or is that just one type where there is some kind of identifier sent in the message to correspond with IANA?\n\nFrom the reading of the spec, as part of endpoint discovery, GetMessageTypeSupport command is sent. If vendor defined message type is supported then GetVendorDefinedMessageSupport command is sent to get the PCI Vendor ID or/and IANA. Consumers of this message type would need to know  PCI Vendor ID/IANA to communicate with the vendor defined message type.\n\nWe might need more discussion on how kernel stack will handle vendor defined message types. I am right now interested in the standard types.",
      "parentUuid": "b234478f_a9a976b8",
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b3d4165_fc3ddd53",
        "filename": "yaml/xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-15T21:47:51Z",
      "side": 1,
      "message": "If these are part of the path, why are they also properties in the object?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 78
      },
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b270108c_e192e634",
        "filename": "yaml/xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-16T04:54:45Z",
      "side": 1,
      "message": "\u003cNetworkId\u003e was added to the network path to aid enumeration of endpoints under the NetworkId, not particular that the implementation have the \u003cEID\u003e in the object patch. A previous patchset had the objectPath naming as \u003cNetworkId\u003e/endpointN where N was implementation dependent. Any suggestions?",
      "parentUuid": "1b3d4165_fc3ddd53",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 78
      },
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6660aaa_7b1da4f3",
        "filename": "yaml/xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-06-24T01:37:42Z",
      "side": 1,
      "message": "It seems like NetworkId can come from the path then but not EID?  Those are just arbitrarily assigned?  It\u0027s up to you.  It seems partially redundant but we also don\u0027t really want code to have to parse the path if they\u0027re using the NetworkId to turn around and make a kernel call.",
      "parentUuid": "b270108c_e192e634",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 78
      },
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6921086_92b5cda7",
        "filename": "yaml/xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-06-24T08:26:10Z",
      "side": 1,
      "message": "The NetworkID and EID are assigned by the discovery portion of the MCTP protocol.\n\nAgree, there is redundancy of data in the object path and properties and seems awkward to parse the object path to setup the socket.",
      "parentUuid": "d6660aaa_7b1da4f3",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 78
      },
      "revId": "bab71eb929e172552b3c41b96b51088539a0632d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}