{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d70672cd_13fa5415",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-17T13:34:49Z",
      "side": 1,
      "message": "I\u0027m a bit concerned that this is effectively just a random sampling of items that you think are important to exchange today but might not be the full set as time goes on.  Is there any reason we can\u0027t use the existing interfaces that define these properties and place them in a specific object path for BMC redundancy?",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c006ca47_21c4e49d",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-09-17T14:50:45Z",
      "side": 1,
      "message": "If I look at https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/State/BMC.interface.yaml, that has 3 other properties that we don\u0027t care about, one of which is even writeable.\n\nWhat would we do in that case? I guess we could leave them at their default values which would be wrong, or write extra code to have them be correct only because they happen to be on the same interface as another property we want.  Also then if someone adds a property to one of those interfaces, which does happen, we\u0027d be stuck having to update more code.\n\nI suppose we could also get rid of all the properties and just rely on a polling with a D-Bus method that returns a dictionary of properties to get the data.",
      "parentUuid": "d70672cd_13fa5415",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52ce6b44_152e5f62",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-17T13:34:49Z",
      "side": 1,
      "message": "I don\u0027t know what to do with this information.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 27
      },
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bca679b_dcdf435d",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-09-17T14:50:45Z",
      "side": 1,
      "message": "We could use it to not enable redundancy if we can tell the passive BMC can\u0027t even talk to us, among other things.",
      "parentUuid": "52ce6b44_152e5f62",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 27
      },
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f56b7753_41f86057",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-17T13:34:49Z",
      "side": 1,
      "message": "Is there any reason to document a service name?  Shouldn\u0027t we be using mapper to find it?",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9e165c5_98fc13c8",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2024-09-17T13:48:24Z",
      "side": 1,
      "message": "We need to document this for use on the server hosting the interface, correct?\n\nI agree that the client could either use a mapper or this approach.\n\n(As far as I\u0027m aware, OpenBMC doesn\u0027t support hosting the same interface across multiple services, correct?)\n\nI believe documenting it here provides flexibility and avoids hardcoding on the server, as it\u0027s specified in the YAML.\n\nOr are you concerned that this might restrict the server\u0027s freedom to choose the service name?\n\nI plan to do the same for my upcoming interfaces (Data sync for BMC redundancy), so I\u0027m trying to understand the rationale behind documenting it in [YAML](https://github.com/openbmc/sdbusplus/blob/master/docs/yaml/interface.md#service-name).",
      "parentUuid": "f56b7753_41f86057",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b86adc6_99e98318",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-09-17T14:05:59Z",
      "side": 1,
      "message": "\u003e We need to document this for use on the server hosting the interface, correct?\n\nNo.  We only need to document it if we\u0027re expecting clients to go directly to it (such as ObjectMapper).  Otherwise the service names are entirely arbitrary and do not need to be documented.\n\n\u003e Or are you concerned that this might restrict the server\u0027s freedom to choose the service name?\n\nI\u0027m concerned that clients will hardcode to it and that will be broken in the future.",
      "parentUuid": "a9e165c5_98fc13c8",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652d6160_2be44519",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2024-09-17T14:30:55Z",
      "side": 1,
      "message": "\u003e No. We only need to document it if we\u0027re expecting clients to go directly to it (such as ObjectMapper). Otherwise the service names are entirely arbitrary and do not need to be documented.\n\nAh ok..I think its not clear to me \"A singleton host service name must have the YAML property default and may optionally have a description. xyz.openbmc_project.ObjectMapper is one such example.\" and confused me.",
      "parentUuid": "7b86adc6_99e98318",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79a66490_be219114",
        "filename": "yaml/xyz/openbmc_project/State/BMC/Redundancy/Sibling.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 87,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2024-09-17T14:50:45Z",
      "side": 1,
      "message": "I can remove it. I just kinda like being able to use the generated constant when requesting the bus name, since there are already constants for the path and interface.\n\nOr do I just use the interface constant like PSM apps do?",
      "parentUuid": "7b86adc6_99e98318",
      "revId": "fbf3eeceb901726e37cd7346ee86a4ed2db8da3d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}