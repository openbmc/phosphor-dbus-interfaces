{
  "comments": [
    {
      "key": {
        "uuid": "6d29c4bc_fcd42758",
        "filename": "xyz/openbmc_project/Control/Boot/Type.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-02-17T16:35:45Z",
      "side": 1,
      "message": "Should we make EFI the default value?\n\nDo we need another value for systems for which this concept doesnâ€™t even make sense?  This is mostly an x86-only setting. Should we make an x86-only interface?  I guess it is self-contained enough that it would only be instantiated on x86 machines?",
      "revId": "e2319975ba59195e7d99308650c57f1d82498bb0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2112e18_7c9d4526",
        "filename": "xyz/openbmc_project/Control/Boot/Type.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2021-02-17T20:06:26Z",
      "side": 1,
      "message": "I don\u0027t think we need to add another value. This boot type parameter is just a hint for the host firmware. Even x86 firmware might not follow it, if it doesn\u0027t want to or does not support it.\nFor example we can have legacy BIOS (coreboot+SeaBIOS) that can\u0027t even boot EFI images. In this case this setting wouldn\u0027t make any sense either, but even here I think one would expect that after `ipmitool ... efiboot` boot type would be indicated as EFI, and after setting boot to legacy, boot type would be later read as legacy.\nIt is up to the system user to decide if this setting sane or not.\n\nAs for the default value, I think it should be EFI. As OpenBMC positions itself as a modern project, it should use modern standard for the default boot type. Moreover I think by now EFI is a de facto standard for the x86.",
      "parentUuid": "6d29c4bc_fcd42758",
      "revId": "e2319975ba59195e7d99308650c57f1d82498bb0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}