{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "213398fc_98b93b5a",
        "filename": "yaml/xyz/openbmc_project/CrashDump/Configuration.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2023-08-28T07:36:45Z",
      "side": 1,
      "message": "This interface should be more generic.\nAPML is specific to AMD which can\u0027t be appled to other CPU vendors.",
      "range": {
        "startLine": 5,
        "startChar": 12,
        "endLine": 5,
        "endChar": 16
      },
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1108a5e1_8ea70f38",
        "filename": "yaml/xyz/openbmc_project/CrashDump/Configuration.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2023-08-28T14:07:09Z",
      "side": 1,
      "message": "Agreed. Would the generic property name \"Retries\" suffice?",
      "parentUuid": "213398fc_98b93b5a",
      "range": {
        "startLine": 5,
        "startChar": 12,
        "endLine": 5,
        "endChar": 16
      },
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41711187_474bd7ea",
        "filename": "yaml/xyz/openbmc_project/CrashDump/Configuration.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-01T14:21:24Z",
      "side": 1,
      "message": "Need to specify what is retrying.  Collection of the crashdump?  Even \"APML Retry\" doesn\u0027t tell me anything.",
      "parentUuid": "1108a5e1_8ea70f38",
      "range": {
        "startLine": 5,
        "startChar": 12,
        "endLine": 5,
        "endChar": 16
      },
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "426b0ee9_a6f53720",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000937
      },
      "writtenOn": "2023-08-28T07:36:45Z",
      "side": 1,
      "message": "CPER can be used in correctable error as well.\nI think it shouldn\u0027t be under `CrashDump` folder",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0db9069_57bc3451",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2023-08-28T14:07:09Z",
      "side": 1,
      "message": "Agreed. Suggest a folder it should be in?",
      "parentUuid": "426b0ee9_a6f53720",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee4a6013_7df7e431",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-08-29T10:41:46Z",
      "side": 1,
      "message": "Some interesting proposal related to\" Redfish modeling of Platform Errors and UEFI CPER\". https://members.dmtf.org/wg/Redfish/document/44051. This proposal talks about PlatformErrorRecord model, which includes CPER useful information to user. Are you planing to support similiar data here or just provide support to crashdump management? \n\nLooking high level this is close to CPER fault data type in fault log entry , Reference https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Dump/Entry/FaultLog.interface.yaml#L32.\n\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/53017 provides some insights on the existing d-bus implementation of fault log in phosphor-debug-collector.\n\nAdding @cweinan, implemented fault log interfaces, which looks close Host side debug data management.",
      "parentUuid": "b0db9069_57bc3451",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c52b1b_52748a7a",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2023-08-29T14:21:30Z",
      "side": 1,
      "message": "Thanks. Yes. We are supporting CPER for FATAL, Correctable (Runtime) errors. There are external tools out there that can easily parse the CPER files generated as CPER is defined by UEFI specification.\n\nFrom the bmcweb implementation, https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/log_services.hpp, there are references to \nconstexpr const char* crashdumpObject \u003d \"com.intel.crashdump\";\nconstexpr const char* crashdumpPath \u003d \"/com/intel/crashdump\";\nconstexpr const char* crashdumpInterface \u003d \"com.intel.crashdump\";\n\nHence, want to see if we can re-use the bmcweb code and arrive a common interface instead of com.intel.crashdump, if you guys think the \"Dump\" is the right place for it, thats ok. We just want to see that code in bmcweb is generic across processors.",
      "parentUuid": "ee4a6013_7df7e431",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf532f1_6f153cf1",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-29T05:19:01Z",
      "side": 1,
      "message": "This is basically dump entry right? is it possible to reuse this existing entry?\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Dump/Entry.interface.yaml\nbut this interface doesnt expose filepath but a getFd is used for getting the fd to offload the file.\n\nand a custom entry can be defined like this\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Dump/Entry/System.interface.yaml",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "047a9f67_e01249da",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2023-08-29T14:21:30Z",
      "side": 1,
      "message": "Thanks.\nFrom the bmcweb implementation, https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/log_services.hpp\nthere are references to\nconstexpr const char crashdumpObject \u003d \"com.intel.crashdump\";\nconstexpr const char crashdumpPath \u003d \"/com/intel/crashdump\";\nconstexpr const char* crashdumpInterface \u003d \"com.intel.crashdump\";\n\nWhere is the bmcweb implementation [Redfish schema] for getting data from Dump interface? is it part of \"logservices\" schema?\n\nif we go with dump interface route, we will have to remove crashdumpInterface, so need someone from Intel to comment on it.",
      "parentUuid": "4bf532f1_6f153cf1",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1ef913f_96b0e942",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000276
      },
      "writtenOn": "2023-08-30T21:26:43Z",
      "side": 1,
      "message": "The crashdump interface today provides a file name, file path, and timestamp.  When the `AdditionalDataURI` is requested, bmcweb returns the crashdump file as an attachment.\n\nIf the Dump interface can provide this same capability, then I think it could work, but it may need some changes to make it more generic.",
      "parentUuid": "047a9f67_e01249da",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e39839_1da6885c",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-08-29T05:19:01Z",
      "side": 1,
      "message": "This interface can be used if stored as epoch",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb4f24e6_0188c440",
        "filename": "yaml/xyz/openbmc_project/CrashDump/CperRecord.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000299
      },
      "writtenOn": "2023-08-29T14:21:30Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "14e39839_1da6885c",
      "revId": "65dc11dc78341737f0ca892caf86a46dd6e8c563",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}