{
  "comments": [
    {
      "key": {
        "uuid": "8b3c39f1_3a74f761",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "The description doesn\u0027t match the enum member name.",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 70,
        "endChar": 51
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34aad818_3ef75c4f",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "The aesthetics of the camel-case aren\u0027t great. Do we have to break up \"NC\" and \"SI\" in this way?",
      "range": {
        "startLine": 80,
        "startChar": 16,
        "endLine": 80,
        "endChar": 27
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a166386a_c9910eb8",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "Nope. NCSI must be used here\n\nSMBus, USB, PCI, PCIe  (Better to follow the acronym as such, except in the method name.",
      "parentUuid": "34aad818_3ef75c4f",
      "range": {
        "startLine": 80,
        "startChar": 16,
        "endLine": 80,
        "endChar": 27
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1e6a416_9e5145b9",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 94,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "This is inconsistent camel-casing.",
      "range": {
        "startLine": 94,
        "startChar": 16,
        "endLine": 94,
        "endChar": 22
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1472604_0512d53e",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 96,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Again here?",
      "range": {
        "startLine": 96,
        "startChar": 15,
        "endLine": 96,
        "endChar": 25
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d75916e_fef3fece",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "So these aren\u0027t orthogonal in nature - a Bridge is also a BusOwner and is also an EndPoint. Is it perhaps intended that Endpoint \u003c BusOwner \u003c Bridge (i.e. Bridge is a superset of BusOwner, which is a superset of Endpoint)? Some clarification on the mental model would be helpful here.",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d92568a_204e3c7a",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-05T08:10:13Z",
      "side": 1,
      "message": "With having multiple instances of MCTP Daemon (one daemon per physical medium) , we can have each instance started with a \"role\" (EP/BO/Bridge) defined. This property is used to advertise the role of the binding on D-Bus. \nThis can be a read only property. Perhaps this can use a modification to accommodate your point - a daemon instance can be:\n1. Simple Endpoint\n2. Simple BusOwner with a statically allocated EID pool\n3. Endpoint + bridging supported on the particular medium\n4. BusOwner with a statically allocated EID pool + bridging supported on the particular medium",
      "parentUuid": "9d75916e_fef3fece",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7acfdf10_a9de4b04",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-08T05:42:53Z",
      "side": 1,
      "message": "Okay, maybe we should back up a bit.\n\nWhat would a piece of software interacting with the daemon do with this information? How would the application change it\u0027s behaviour if it knew that the daemon was acting as a simple endpoint vs a bus owner vs a bridge?\n\nWhy would the application care about static vs dynamic EID pools?\n\nSeparately, my reading of the spec is that \"static pools\" aren\u0027t really a thing. For static assignment, all devices further up the tree must be aware of the static allocations (i.e particularly the top-most bus owner, which must know that these EIDs have been allocated and can\u0027t form part of the dynamic EID pool).",
      "parentUuid": "6d92568a_204e3c7a",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fd8f367_cc420b41",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-08T07:19:54Z",
      "side": 1,
      "message": "Upper layer protocols will not care about this property. But the thinking behind this one was it might come in handy if bridging between two mctp daemon instances is required. Suppose if we want an mctp daemon working under just endpoint mode to not to support any bridging, it can be indicated through this property.",
      "parentUuid": "7acfdf10_a9de4b04",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed576243_373d5422",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-11T01:05:57Z",
      "side": 1,
      "message": "\u003e Suppose if we want an mctp daemon working under just endpoint mode to not to support any bridging, it can be indicated through this property.\n\nThat sounds like the wrong approach - you\u0027re trying to drive configuration from the bottom up. How would the bridge process know it needs to use this port/endpoint in the first place? So I think we should flip it: Bridging should be architected from the top down where the bridge process knows which ports/endpoints it needs to aggregate. That way there would be no need for this property.\n\nGenerally, as these are APIs, we should be conservative in what we add as we cannot be liberal in what we remove. I don\u0027t yet feel like there\u0027s a good case for this property - it feels like we don\u0027t have anything concrete that requires it and it\u0027s just a \"nice-to-have\".",
      "parentUuid": "5fd8f367_cc420b41",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f073c688_e7f4fd47",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 99,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "Only 2 things needs to be defined here. One is endpoint \u0026 another is busowner/ Bridge.\n\nThese are not useful for the Upper application like PLDM / SPDM. But this is used in terms of entity-manager or other configuration files to make sure, how it must be configured. Here we are just exposing the property back (Read only)",
      "parentUuid": "ed576243_373d5422",
      "range": {
        "startLine": 99,
        "startChar": 10,
        "endLine": 99,
        "endChar": 26
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144a4e67_79f97178",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Why not \"Pldm\" and \"Ncsi\"? \"NCSI\" is inconsistent with \"NcSi\" above. This is an interface between applications, there needs to be some feeling of consistency.",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 128,
        "endChar": 16
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e827524_e0e84ba2",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 128,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "This is one of the question, which i have asked earlier in IRC but with no response. Basically, for protocol with Acronyms in many of D-Bus properties \u0026 enums it is used as is, except method names. \n\nAgree with you, we need to maintain consistency here and want to use acronym   forms (i.e. it would be PLDM, NVMe etc for usage in properties \u0026 enums, and only for method we will call this as Pldm).",
      "parentUuid": "144a4e67_79f97178",
      "range": {
        "startLine": 127,
        "startChar": 2,
        "endLine": 128,
        "endChar": 16
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9ea0d13_aee049e1",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 130,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "This should be \"Nvme\" right?",
      "range": {
        "startLine": 130,
        "startChar": 12,
        "endLine": 130,
        "endChar": 16
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fef7579_b2a434f9",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 133,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Inconsistent camel-casing with the rest of the document.",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 133,
        "endChar": 18
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4df821ef_366f165e",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "This is applicable to all endpoints. Section 12.14 (\"Endpoint Discovery\") describes a generic command and makes no mention of the PCIe binding.",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 10,
        "endChar": 70
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27a29f3f_9da9b982",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-05-04T20:17:33Z",
      "side": 1,
      "message": "Note that the earlier section 12.13 contains the following:\n\"The Endpoint Discovery and Prepare for Endpoint Discovery commands may only be supported on particular transport bindings (e.g. MCTP over PCIeVendor Defined Messaging). If the binding does not use this discovery approach (e.g. SMBus/I2C) the endpoint shall return an ERROR_UNSUPPORTED_CMD completion status for those commands.\"",
      "parentUuid": "4df821ef_366f165e",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 10,
        "endChar": 70
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6604df7c_151cbeb6",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-05T04:00:07Z",
      "side": 1,
      "message": "Okay, fair enough, however it\u0027s still the case that this concept can apply to future bindings. I think it\u0027s worth discussing the merits of maintaining this as a separate interface that some binding objects implement even though right now it\u0027s only PCIe that does so. What you\u0027re proposing here is an API so we need to explore the options to avoid application churn for future MCTP bindings.",
      "parentUuid": "27a29f3f_9da9b982",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 10,
        "endChar": 70
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "016e1f60_91a76cca",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 10,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "At this point of time, couldn\u0027t able to envision, any other physical layer, which may need this one. Let us know, and we are OK to change?",
      "parentUuid": "6604df7c_151cbeb6",
      "range": {
        "startLine": 3,
        "startChar": 0,
        "endLine": 10,
        "endChar": 70
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45495e86_e1174f43",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "This feels like leaky abstraction. Why not break them out into separate D-Bus properties?",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b9a986f_3c27eeba",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-05-04T20:17:33Z",
      "side": 1,
      "message": "This is a PCI concept and its representation usually looks like this (a single uint16):\n- Section 6.3 of DSP0238 (\"Physical address format for MCTP control messages\") or\n- Linux kernel: https://elixir.bootlin.com/linux/latest/source/include/linux/pci.h#L57",
      "parentUuid": "45495e86_e1174f43",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bd1a2b7_9f2733e1",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-05T04:00:07Z",
      "side": 1,
      "message": "Yeah, I\u0027m not necessarily sold on my idea either, just thought it was worth discussion. I think it\u0027s worth calling out the reference to DSP0238 in the description as you\u0027ve done in your reply.",
      "parentUuid": "0b9a986f_3c27eeba",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d97c21e_9fd84a3f",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 16,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "Sure, but any advantage in getting the same as single unit. We don\u0027t find any and for tracking purpose single unit representation of B/D/F is better.",
      "parentUuid": "4bd1a2b7_9f2733e1",
      "range": {
        "startLine": 15,
        "startChar": 1,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21178ee6_962684cf",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Same issue as DiscoveredFlag above.",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f38ffdc_93674896",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-05-04T20:17:33Z",
      "side": 1,
      "message": "It refers to the section 6.9.1 of DSP0238.",
      "parentUuid": "21178ee6_962684cf",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afd7e1b6_3a7918e1",
        "filename": "xyz/openbmc_project/MCTP/Binding/PCIe.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-05T04:00:07Z",
      "side": 1,
      "message": "Right, but that\u0027s still something that\u0027s applicable to multiple bindings in my mind - do you agree that 6.9.1 of DSP0238 is just a concrete description of the general concepts described in DSP0236?",
      "parentUuid": "9f38ffdc_93674896",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc04d9ef_a92e7c05",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "What about Bridge mode? This is where I\u0027d like some more clarity on the intent of the mode enumeration.",
      "range": {
        "startLine": 2,
        "startChar": 43,
        "endLine": 2,
        "endChar": 76
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0d3a77c_c6b19142",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-05T10:34:32Z",
      "side": 1,
      "message": "Bridge mode would need more discussions I believe - MCTP spec by itself does not provide any security, thus we might have to approach bridging with caution. We might consider blocking bridging between a public bus (i.e something like an add-in-card slot\u0027s SMBus) to private bus (to host/ME). Bridging mode will need interfaces of its own",
      "parentUuid": "cc04d9ef_a92e7c05",
      "range": {
        "startLine": 2,
        "startChar": 43,
        "endLine": 2,
        "endChar": 76
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8abc4ab6_2e505aa3",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-08T05:42:53Z",
      "side": 1,
      "message": "The DBus interfaces don\u0027t care for MCTP network security either, they just need to describe the topology of your network correctly. Security comes from architecting the networks correctly (if isolating certain components from each other is necessary). The system\u0027s composition of the daemons implements the network architecture and therefore provides the isolation.\n\nBut my point is that a Bridge is implicitly a Bus Owner by nature. Therefore the BusOwner interface should also apply to bridges.",
      "parentUuid": "b0d3a77c_c6b19142",
      "range": {
        "startLine": 2,
        "startChar": 43,
        "endLine": 2,
        "endChar": 76
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3268cc30_638e3fa0",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-08T07:36:11Z",
      "side": 1,
      "message": "Bridging comes with other responsibilities - tracking of routing tables/eid to physical address mapping, replacement of source physical addresses etc. That is why the proposal is to have separate interface for bridging. An endpoint object can be allowed to have both the interfaces (Bus owner and bridging).",
      "parentUuid": "8abc4ab6_2e505aa3",
      "range": {
        "startLine": 2,
        "startChar": 43,
        "endLine": 2,
        "endChar": 76
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25fa3553_9859eb5a",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-11T01:05:57Z",
      "side": 1,
      "message": "Okay. I think the text should make that point so the reader has a crisp idea of what this interface should capture.",
      "parentUuid": "3268cc30_638e3fa0",
      "range": {
        "startLine": 2,
        "startChar": 43,
        "endLine": 2,
        "endChar": 76
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33c45dd8_fcc06784",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Isn\u0027t this inferred from TopMostBusOwner? If it\u0027s not, what is its purpose?",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88025494_fe65c1e2",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-05T10:34:32Z",
      "side": 1,
      "message": "This is to support statically allocated EID pools (Although spec says other BusOwners in the network need to get their pools from TopMostBusOwner, we can consider supporting a design where BusOwners in the network are statically allocated EID pool).",
      "parentUuid": "33c45dd8_fcc06784",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f379925_6fa220f6",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-08T05:42:53Z",
      "side": 1,
      "message": "Has the static EID pool concept been discussed with PMCI?",
      "parentUuid": "88025494_fe65c1e2",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dfeff9a_3881e244",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-08T07:36:11Z",
      "side": 1,
      "message": "Well agree there, static pools are not part of the spec but might be something to consider in the interim. Reason behind this one was the difficulty in deciding the topmost busowner. We will have to consider the sleep states/boot order of the connected components - if the topmost bus owner is unable to boot for some reason, then no busonwers down the tree get their pools.",
      "parentUuid": "1f379925_6fa220f6",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b28d49a_d62e84b1",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-11T01:05:57Z",
      "side": 1,
      "message": "I don\u0027t think that MCTP networks are intended to operate correctly without a top level bus owner. Has this idea been discussed by DMTF?",
      "parentUuid": "6dfeff9a_3881e244",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8cb9a1d_e609ab61",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "OwnEidPool is not needed right? In case of TopMost bus owner, EIDPool represents the ownEidPool.\nEven in case of static EID, the EIDPool should be enough to hold or allocated with the help of bus owner.",
      "parentUuid": "7b28d49a_d62e84b1",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f250701_4623188c",
        "filename": "xyz/openbmc_project/MCTP/BusOwner.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-05-11T09:15:54Z",
      "side": 1,
      "message": "Had another cautious look at the spec:\n\nIn section 8.17.2, we have this:\n\"Bridges can have a mix of both static and dynamic EID pools. That is, the routing table can\nhave both static and dynamic entries and can allocate from static and dynamic EID pools. Only\nthe dynamic EID pool is given to the bridge by the bus owner using the Allocate Endpoint IDs\ncommand. There is no specification for how a static EID pool gets configured or how a bridge\ndecides whether to give an endpoint an EID from a static or dynamically obtained EID pool.\nThere is also no MCTP-defined mechanism to read the static EID pool setting from the bridge.\"\n\nMay be we need have two pools - one for topmost busowner allocated one and another for statically configured pool?",
      "parentUuid": "f8cb9a1d_e609ab61",
      "range": {
        "startLine": 13,
        "startChar": 4,
        "endLine": 15,
        "endChar": 56
      },
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14b1f886_c7a3bb80",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 4,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Why is the \u0027Eid\u0027 property in the \u0027Base\u0027 interface and not in the \u0027Endpoint\u0027 interface. It feels like this issue violates the principle of least surprise.\n\nI suggest we move the Eid property here and just have the MCTP daemon also implement the Endpoint interface.",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a59105_42e0eb4f",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 4,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-05-04T20:17:33Z",
      "side": 1,
      "message": "According to README, endpoints in MCTP network should be \"exposed under the path `/xyz/openbmc_project/mctp/device/\u003ceid\u003e\u0027\".\nIn the \"Base\" interface \u0027Eid\u0027 refers to the BMC EID in the given MCTP network.",
      "parentUuid": "14b1f886_c7a3bb80",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f9862d7_f5c0a3f6",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 4,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-05T04:00:07Z",
      "side": 1,
      "message": "\u003e In the \"Base\" interface \u0027Eid\u0027 refers to the BMC EID in the given MCTP network.\n\nRight, but the BMC is just another endpoint in the network. Can we not publish the daemon\u0027s object at multiple paths?",
      "parentUuid": "10a59105_42e0eb4f",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f91051b_e8c05ab1",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 4,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "We want to maintain Eid in Base to represent the self EID, and advertise when there is a change (say we got new SetEID and got changed).\nFor device EID, as it is part of path, we don\u0027t require a separate property, also, when a device changes it\u0027s EID, we want to recreate the object\n(i.e. After discovery, if we the device changes it\u0027s eid, due to another bus owner force it do so etc).",
      "parentUuid": "4f9862d7_f5c0a3f6",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8116ff12_bc916615",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "This will be the same for all EIDs under a given DBus connection, given part of the architecture you\u0027re proposing is to run one instance of a \u0027MCTP Daemon\u0027 per \"port\" (\"port\" as defined in \"9.1.2 EID options for MCTP bridges\" in DSP0236 v1.3.0).\n\nActually, that leads to a question: If you were to have a bridge in a network in that configuration (one MCTP daemon per port), how do applications interacting with MCTP deal with their segmented view of the network due to multiple daemon instances? Or are you proposing a third daemon be used to implement the bridge and applications connect to that for a complete view of the network? Or is there some discovery process that applications need to follow to find which MCTP daemons to query?",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d6128a_5ed8a7fe",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-05-04T20:17:33Z",
      "side": 1,
      "message": "I believe that the \u0027NetworkId\u0027 property should be moved to the \u0027Base\u0027 interface since it refers to the MCTP network on the current bus.",
      "parentUuid": "8116ff12_bc916615",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa3f3cde_e8fb488c",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-05T04:00:07Z",
      "side": 1,
      "message": "\u003e I believe that the \u0027NetworkId\u0027 property should be moved to the \u0027Base\u0027 interface since it refers to the MCTP network on the current bus.\n\nI agree with you in that I don\u0027t think NetworkId belongs in the Endpoint interface.\n\nI\u0027d still like to see some discussion of how applications should interact with these proposed interfaces in the face of the BMC implementing a bridge between two ports given the resulting segmented view of the network.",
      "parentUuid": "05d6128a_5ed8a7fe",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "461750ef_d651b63d",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-05-11T07:59:59Z",
      "side": 1,
      "message": "Probably we kept this, so that by querying the D-Bus object property itself we will be able to get the data.\nwhen we discussed this with wiktor, we envisioned this, i am unable to recollect this, give me a day will get back on this.",
      "parentUuid": "fa3f3cde_e8fb488c",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "093f09f5_762e45fb",
        "filename": "xyz/openbmc_project/MCTP/SupportedMessageTypes.interface.yaml",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-05-04T12:26:42Z",
      "side": 1,
      "message": "Similar issues here as noted in the Base interface wrt camel-casing and capitalisation of identifiers.",
      "revId": "fd20c61e4b1facf47d176d2b53a28966626a9718",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}