{
  "comments": [
    {
      "key": {
        "uuid": "301c6c04_7c6f8928",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000479
      },
      "writtenOn": "2020-03-24T13:19:30Z",
      "side": 1,
      "message": "design.",
      "range": {
        "startLine": 9,
        "startChar": 58,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001c2d1b_dc28984f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "This sentence is actually good as is. It is continued in the next line.",
      "parentUuid": "301c6c04_7c6f8928",
      "range": {
        "startLine": 9,
        "startChar": 58,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f45d2b49_b4295aee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-03-30T16:42:27Z",
      "side": 1,
      "message": "He is pointing to the typo there.",
      "parentUuid": "001c2d1b_dc28984f",
      "range": {
        "startLine": 9,
        "startChar": 58,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "164c7e3c_b6fa4c98",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T17:02:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f45d2b49_b4295aee",
      "range": {
        "startLine": 9,
        "startChar": 58,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4e5c7bf_55fc34a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T17:02:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "164c7e3c_b6fa4c98",
      "range": {
        "startLine": 9,
        "startChar": 58,
        "endLine": 9,
        "endChar": 64
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c84516a8_b2b64056",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000433
      },
      "writtenOn": "2020-03-25T10:26:55Z",
      "side": 1,
      "message": "Can we separate methods with additional empty line to make this file more readable ? And the same regarding parameters and enums.",
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2001aa9_0d7dc5d8",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c84516a8_b2b64056",
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43549018_eb8e1db3",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-10T17:03:02Z",
      "side": 1,
      "message": "We need to have all the MessageTypes, similar to supportedTypes right?",
      "range": {
        "startLine": 217,
        "startChar": 10,
        "endLine": 217,
        "endChar": 22
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d04112f_20470c25",
        "filename": "xyz/openbmc_project/MCTP/Base.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 217,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-03-11T10:40:03Z",
      "side": 1,
      "message": "Or, we can re-use the Message Types interface ?",
      "parentUuid": "43549018_eb8e1db3",
      "range": {
        "startLine": 217,
        "startChar": 10,
        "endLine": 217,
        "endChar": 22
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b8a2aee_c1d1c35a",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "Why tack on \u0027Base\u0027 and not just have \u0027xyz.openbmc_project.MCTP\u0027? Also do we want to version the interface? It\u0027s generally recommended by the DBus spec though this doesn\u0027t appear to have much adoption in the OpenBMC community\n\nhttps://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-interface",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 33
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9129d9e3_0e168f05",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "Maintaining as Base in interface name for following reasons\n1. want to group all MCTP interfaces under MCTP folder, hence we need interface name under MCTP, else MCTP.interface.yaml must be created under xyz.openbmc_project folder itself\n2. we never make versioning, but we may end up doing so, so it\u0027s better to have Base_v2 or something in future. Hence recommend to stick with Base (telling this conveys the basic information, irrespective of BusOwner, EndPoint)",
      "parentUuid": "4b8a2aee_c1d1c35a",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 33
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c5e2a4c_54b773ec",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T01:14:18Z",
      "side": 1,
      "message": "\u003e 1. want to group all MCTP interfaces under MCTP folder, hence we need interface name under MCTP, else MCTP.interface.yaml must be created under xyz.openbmc_project folder itself\n\nBut why? Just pushing on this reasoning a little :)\n\nAnyway, my issue is that it\u0027s not clear what something called \u0027Base\u0027 is modelling in terms of objects and interfaces. It\u0027s like having a package called \u0027Common\u0027 - IMO it\u0027s an anti-pattern.",
      "parentUuid": "9129d9e3_0e168f05",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 33
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb91d11f_5778cf52",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 17,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-30T06:47:23Z",
      "side": 1,
      "message": "trying to convey Basic information for any MCTP daemon (I am ok with using different name, but here it will list out common properties, which will be used by both EndPoint \u0026 BusOwner devices)",
      "parentUuid": "3c5e2a4c_54b773ec",
      "range": {
        "startLine": 17,
        "startChar": 28,
        "endLine": 17,
        "endChar": 33
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "718b84fa_004eb2ec",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "s/PCie/PCIe/, though do we want to be more specific (e.g. s/PCIe/DSP0238/)?",
      "range": {
        "startLine": 23,
        "startChar": 55,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31a7afcf_d21a69db",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "+1, it must be PCIe\n\nNot now, but future changes, we may need to look for version option. \nAs far as i know spec may need to support backward compatibility, and will extend. Hence majorly we don\u0027t anticipate any version.",
      "parentUuid": "718b84fa_004eb2ec",
      "range": {
        "startLine": 23,
        "startChar": 55,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09b8ef8b_33c61b89",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T01:14:18Z",
      "side": 1,
      "message": "\u003e As far as i know spec may need to support backward compatibility, and will extend. Hence majorly we don\u0027t anticipate any version.\n\nIs this in response to my comment above? If so, how we represent the spec on DBus is a separate problem from the versions applied to the spec. What you\u0027re suggesting is we\u0027re going to get it right the first time :)",
      "parentUuid": "31a7afcf_d21a69db",
      "range": {
        "startLine": 23,
        "startChar": 55,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6479d0ad_dd104892",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-30T06:47:23Z",
      "side": 1,
      "message": "We don\u0027t need to get it right as long as it is going to backward compatible. But let\u0027s say tomorrow a new version of spec, say MCTP Version 2.0, which defines totally new way instead of EID, then we need to use a new interface.\n\nWhat i meant here is, we can add property one by one. We don\u0027t need to define all the properties in a single shot (We can\u0027t change / remove, once people started using it), but we can add as per the need.",
      "parentUuid": "09b8ef8b_33c61b89",
      "range": {
        "startLine": 23,
        "startChar": 55,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "594a02d7_5f812071",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "This should either be `/xyz/openbmc_project/mctp/device/\u003cuuid\u003e` or `/xyz/openbmc_project/mctp/endpoint/\u003ceid\u003e`. `/xyz/openbmc_project/mctp/device/\u003ceid\u003e` is confusing two well defined concepts (one device may have multiple endpoints).",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ac4f808_4f84bc39",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "Yes Andrew. Agree. But when we have multiple endpoints each device will end up with it\u0027s own supportedTypes, hence we need to differentiate based on eid.\n\nAnother option we can consider is /xyz/openbmc_project/mctp/devices/uuid/eid (which will fit better). What do you think?\ni.e. if a specific device expose 2 EID, then it will have 2 objects under that uuid, else there will be only one. In this way relating the uuid with eid is also possible",
      "parentUuid": "594a02d7_5f812071",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b16ce4a_bb2b6eac",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-03-27T12:06:25Z",
      "side": 1,
      "message": "Not all devices have UUID - UUID is not mandatory for all endpoints. \n\n/xyz/openbmc_project/mctp/endpoint/\u003ceid\u003e with Device_UUID as a property under endpoint interface can be one solution.",
      "parentUuid": "1ac4f808_4f84bc39",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0a00230_9f5e2be9",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T13:48:22Z",
      "side": 1,
      "message": "yes, but we can generate UUID (whether it is exposed as property or in path). \n\nMain thing is we have not covered handling of Bridge devices here or devices which has multiple ports. \nSay a device which is connecting to 2 different networks, say I2c \u0026 to PCIe.\nwith UUID in path we will be able to understand that this belongs to single object, when we query the object using ObjectMapper itself.",
      "parentUuid": "8b16ce4a_bb2b6eac",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8b92618_2120c3a0",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T01:14:18Z",
      "side": 1,
      "message": "\u003e Yes Andrew. Agree. But when we have multiple endpoints each device will end up with it\u0027s own supportedTypes, hence we need to differentiate based on eid.\n\nI don\u0027t follow. You say that like I was suggesting we shouldn\u0027t differentiate based on EID. I offered two solutions for object naming, one EID-based and one UUID-based. Each unique EID will have a corresponding unique, EID-named object implementing the SupportedTypes interface. Isn\u0027t this what you want?",
      "parentUuid": "e0a00230_9f5e2be9",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "368aeda5_8622a4d0",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-30T06:47:23Z",
      "side": 1,
      "message": "yes, we are on the same page. What i meant to say was using both will have added advantage when we find a device which has more ports (across interface)\n\nsay a device which supports both SMBus \u0026 Serial, then UUID in the path can be used to define the relation (i.e. ObjectMapper query on all the paths across instance, will be able to provide this information)",
      "parentUuid": "a8b92618_2120c3a0",
      "range": {
        "startLine": 28,
        "startChar": 24,
        "endLine": 28,
        "endChar": 61
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7d28fad_59e9119c",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "I assume this is message types?",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "473fa52a_ab3935df",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "yes. this is message types.",
      "parentUuid": "c7d28fad_59e9119c",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baa0c7f4_e1be11fd",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "473fa52a_ab3935df",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 31,
        "endChar": 37
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "325dd39b_d4747efd",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "Needs to be multiple.",
      "range": {
        "startLine": 32,
        "startChar": 67,
        "endLine": 32,
        "endChar": 70
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b830c993_99111c3b",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "i think with uuid/eid object path consideration we don\u0027t need to have EID / UUID as a separate property?",
      "parentUuid": "325dd39b_d4747efd",
      "range": {
        "startLine": 32,
        "startChar": 67,
        "endLine": 32,
        "endChar": 70
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6421c7f_78eaab43",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T01:14:18Z",
      "side": 1,
      "message": "You would want EIDs as a property on the object under the UUID path and a UUID property on the object under the EID path.",
      "parentUuid": "b830c993_99111c3b",
      "range": {
        "startLine": 32,
        "startChar": 67,
        "endLine": 32,
        "endChar": 70
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "644f868a_102bfcf2",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-30T06:47:23Z",
      "side": 1,
      "message": "when we have it in the path name itself, why do we need a separate property? Anyway, when we have it in the path, any change / re-assignment of EID for discovered devices, will require the object to be removed \u0026 inserted, and hence we don\u0027t need separate property.\n\nNote: Always better to maintain a information in single place as much as possible (other than cache location). Basically, Eid in the object path \u0026 the property must always match, if not we won\u0027t know which is right and will cause confusion.",
      "parentUuid": "c6421c7f_78eaab43",
      "range": {
        "startLine": 32,
        "startChar": 67,
        "endLine": 32,
        "endChar": 70
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce6106fb_45fc462d",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "644f868a_102bfcf2",
      "range": {
        "startLine": 32,
        "startChar": 67,
        "endLine": 32,
        "endChar": 70
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa24aa9a_0b2c0c28",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-03-25T09:56:25Z",
      "side": 1,
      "message": "It seems that this interface shall be exposed for discovered MCTP endpoint. If yes, please change it to \u0027endpoint\u0027 instead of \u0027device\u0027.",
      "range": {
        "startLine": 33,
        "startChar": 9,
        "endLine": 33,
        "endChar": 36
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a1cb8b1_f8efde9f",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "Plan is to reuse this for both. Hence kept it as Device. but with new object path naming, we won\u0027t even need this",
      "parentUuid": "aa24aa9a_0b2c0c28",
      "range": {
        "startLine": 33,
        "startChar": 9,
        "endLine": 33,
        "endChar": 36
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e79028ef_5636cac5",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0a1cb8b1_f8efde9f",
      "range": {
        "startLine": 33,
        "startChar": 9,
        "endLine": 33,
        "endChar": 36
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ade64f35_dcc2c3ba",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-03-22T23:26:20Z",
      "side": 1,
      "message": "Shouldn\u0027t we expose devices found by MCTP Bus Owner even if BMC acts as MCTP endpoint? In endpoint mode there is Get Routing Table Entries command (section 12.12 of DSP0236) which can be used to request MCTP bus owner to return data from its present routing table.",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca01879_fe58b482",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-03-23T03:31:45Z",
      "side": 1,
      "message": "Can be done using the device object even if BMC is endpoint, right ?",
      "parentUuid": "ade64f35_dcc2c3ba",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9ff6a6a_14aa4633",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-03-23T19:30:55Z",
      "side": 1,
      "message": "It can be done using the device object.\nThe idea is to expose information about endpoints in MCTP network where BMC acts as MCTP endpoint.",
      "parentUuid": "eca01879_fe58b482",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94f08e15_0c371802",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "I think we need to spend time fleshing out the idea of how to describe MCTP networks in terms of D-Bus connections/objects/interfaces. I haven\u0027t seen any mention so far.",
      "parentUuid": "b9ff6a6a_14aa4633",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5116af93_944c2880",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000472
      },
      "writtenOn": "2020-03-25T09:56:25Z",
      "side": 1,
      "message": "Maybe list of discovered MCTP endpoints shall be exposed using separate interface, which will be implemented by either MCTP bus owner or MCTP endpoint? And, please be precise, use \u0027MCTP endpoint\u0027 when we mean it, the device may expose multiple endpoints.",
      "parentUuid": "94f08e15_0c371802",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1767c3c9_103a61c1",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "would recommend to wait for routing table entries, till we implement it. Any D-Bus interfaces designed now, will not fit for it, till we lay out a state flow.",
      "parentUuid": "5116af93_944c2880",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9547b10_0c861e2c",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-30T01:14:18Z",
      "side": 1,
      "message": "\u003e would recommend to wait for routing table entries, till we implement it.\n\nWhat do you mean by \"it\" here?\n\n\u003e Any D-Bus interfaces designed now, will not fit for it, till we lay out a state flow.\n\nI feel like we need to be thinking ahead to avoid designing ourselves into a corner?",
      "parentUuid": "1767c3c9_103a61c1",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2caa77cc_1f60fe0c",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-30T06:47:23Z",
      "side": 1,
      "message": "what i meant was the D-Bus interfaces doesn\u0027t cover the interfaces for bridge devices. Hence we need to carefully think and add it. Thought about the design and we know the way, but recommending to add the interfaces as a separate commit for Bridge devices",
      "parentUuid": "f9547b10_0c861e2c",
      "range": {
        "startLine": 36,
        "startChar": 45,
        "endLine": 37,
        "endChar": 26
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d574141a_53769071",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-03-25T06:57:08Z",
      "side": 1,
      "message": "s/PCie/PCIe/",
      "range": {
        "startLine": 48,
        "startChar": 55,
        "endLine": 48,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0ba9699_c8734da9",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-03-27T10:15:13Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "d574141a_53769071",
      "range": {
        "startLine": 48,
        "startChar": 55,
        "endLine": 48,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbeea05d_4d1d09de",
        "filename": "xyz/openbmc_project/MCTP/README.md",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1000658
      },
      "writtenOn": "2020-03-30T10:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0ba9699_c8734da9",
      "range": {
        "startLine": 48,
        "startChar": 55,
        "endLine": 48,
        "endChar": 59
      },
      "revId": "1c2f628c63f1893f0836596bc398476501012f13",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}