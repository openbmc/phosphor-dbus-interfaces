{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4818bff2_bb83c306",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2023-01-10T20:29:52Z",
      "side": 1,
      "message": "In priority order, my concerns with this:\n1. each metric should be timestamped, typically with the time the metric was sampled\n2. support for reading multiple timestamped values of a single metric, so sampling time isn\u0027t necessarily the same as when client tries to read.  I\u0027m expecting client to be something that wants to export metrics off the BMC.  instead of polling at the sampling frequency it can have a lower collection frequency.\n3. metrics are read one at a time? Maybe there\u0027s a bulk property read in the that might make this better.",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0b5be12_cde821ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2023-01-10T20:35:52Z",
      "side": 1,
      "message": "One more thought, though this is more work.\nA more generic interface that exports metrics of different types.  If you look at metric systems like OpenTelemetry, OpenCensus, Prometheus, they all define metric types like gauge, historgram, counts.  Each metric is named. Versus each metric being explicitly being written out in the yaml.\n\nSomething like this might make it easy for individual daemons to add their own custom metrics too, without having to add to this interface explicitly.  It\u0027s a use case we have but I\u0027m not sure about OpenBMC in general.\n\nI\u0027m question is dbus is the right level for this abstraction or if that\u0027s better left to an exporter.",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5155bab2_f30f7a8b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1000052
      },
      "writtenOn": "2023-01-11T00:43:21Z",
      "side": 1,
      "message": "erase #3.  dbus has a GetAll and that would work.",
      "parentUuid": "4818bff2_bb83c306",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fade077_a1bcaef2",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "size is potentially problematic here if you\u0027re planning to track bytes, right?",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "621e2cd4_3aa9c65b",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 15,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "Memory allocation is listed based on page sizes and a page is a whole number of bytes. Could you clarify more on what you mean by problematic?",
      "parentUuid": "0fade077_a1bcaef2",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e604a3a_eeee3b7f",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 15,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-07-05T22:56:51Z",
      "side": 1,
      "message": "Edward,\nMy understanding is you are trying to specify the memory utilization for the BMC which the redfish spec also specifies in just bytes https://github.com/openbmc/bmcweb/blob/master/static/redfish/v1/JsonSchemas/ManagerDiagnosticData/ManagerDiagnosticData.json#L400. Also, i see /proc/meminfo shows memory just in kB. So, i can see what Patrick is saying is that size_t might be small for that and its better to use integer instead.",
      "parentUuid": "621e2cd4_3aa9c65b",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eb69c20_05d532a0",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 15,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-06T20:31:40Z",
      "side": 1,
      "message": "`size` can only hold up to 4GB on 32-bit platforms.  This might or might not be sufficient here.  I\u0027d generally prefer `size` as long as we can rationalize that it\u0027ll be fine and we don\u0027t need an explicit `uint64`.",
      "parentUuid": "9e604a3a_eeee3b7f",
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0e28782_90264010",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 29,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "How do you plan to obtain these metrics?",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 29,
        "endChar": 50
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29a79f62_877b510b",
        "filename": "yaml/xyz/openbmc_project/Metric/BMC.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 29,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "My plan is to query the State Manager and store this information on persistent storage. A program will check the lastRebootTime and check whether it is different than what is stored on the persistent data. If so, then it increments the boot count and if the lastRebootReason is Unknown, it increments the crash counter.",
      "parentUuid": "a0e28782_90264010",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 29,
        "endChar": 50
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc8b7ed1_ace49b74",
        "filename": "yaml/xyz/openbmc_project/Metric/Daemon.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "Follow time conventions used elsewhere please.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 46
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428c820d_e55353e2",
        "filename": "yaml/xyz/openbmc_project/Metric/Daemon.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "Same as above conversation. If milliseconds or microseconds is what should be used. Then I will make the change.",
      "parentUuid": "bc8b7ed1_ace49b74",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 25,
        "endChar": 46
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b454e0b7_fa225890",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 6,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "We usually avoid putting units on property names.",
      "range": {
        "startLine": 6,
        "startChar": 24,
        "endLine": 6,
        "endChar": 28
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a0a36ea_61baf841",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 6,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "Will do. I just thought it was supposed to be the same as in the schema.",
      "parentUuid": "b454e0b7_fa225890",
      "range": {
        "startLine": 6,
        "startChar": 24,
        "endLine": 6,
        "endChar": 28
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef14e35c_df14acaf",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "Please follow conventions from yaml/xyz/openbmc_project/Network/EthernetInterface.interface.yaml",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 9,
        "endChar": 48
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c1e4fe8_e975cfbb",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef14e35c_df14acaf",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 9,
        "endChar": 48
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65e90153_6af7cd88",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-01-27T17:40:24Z",
      "side": 1,
      "message": "Please follow the conventions in EthernetInterface.  Don\u0027t encode two binaries as an enumeration.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 39,
        "endChar": 60
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b724c6c_da5b2149",
        "filename": "yaml/xyz/openbmc_project/Metric/Port.interface.yaml",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1001584
      },
      "writtenOn": "2023-02-03T18:37:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65e90153_6af7cd88",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 39,
        "endChar": 60
      },
      "revId": "f4ed8af6675b8de44be7b2752b2e81fed763d56b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}