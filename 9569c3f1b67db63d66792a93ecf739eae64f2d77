{
  "comments": [
    {
      "key": {
        "uuid": "b8368fa4_2f279dd7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-17T20:36:30Z",
      "side": 1,
      "message": "Maybe append the name of the new error to the commit msg, like \"Version: Add new WrongBootVersion error\" so it\u0027s easy to know in one line what changed.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 24
      },
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eacf961_149b228b",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-18T05:42:14Z",
      "side": 1,
      "message": "I prefer to make it a property in a separated interface, so that it becomes an optional property of a D-Bus object (e.g. /xyz/openbmc_project/software/\nThe use case would be:\n* In UBI case, it indicates if the running version is the expected one or not;\n* In golden image case, it indicates if the running version is the primary or the golden one.\n\nMaking it a property makes it easier for other services to query the status.\nIf it is just an error in the log, I am not sure how the other services could know the status.",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dca1ad5_00b85bbe",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-18T18:54:00Z",
      "side": 1,
      "message": "We still want an error to be logged to notify the user that something unexpected happened.\nTheoretically the bmc code update app would determine if the expected version or device is loaded, then log this error. At that point it can populate a new property, but is that needed, what other services would be looking at that information?",
      "parentUuid": "2eacf961_149b228b",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b50df676_29265155",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-24T06:41:47Z",
      "side": 1,
      "message": "I\u0027m OK with the error logging.\nBut I still want a property on the DBus to represent which flash it is running on, instead of checking the logs.\n\n\u003e what other services would be looking at that information?\n1. The software update service itself creates and looks for this property;\n2. The system admin could query the property to get the status.",
      "parentUuid": "3dca1ad5_00b85bbe",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dad0173_c33d30c7",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-09-24T15:35:08Z",
      "side": 1,
      "message": "\u003e But I still want a property on the DBus to represent which flash it is running on, instead of checking the logs.\n\nIsn\u0027t this a fallout from your proposed static flash layout design?  Shouldn\u0027t you be proposing a property for that?\n\nAs I mentioned in that review, my opinion is that RedundancyPriority already covers that question for UBI-based images (and likely can for Golden also).  If we do need a new property I suspect it would be best as a separate interface because I\u0027m not sure it is applicable to all Software implementations.",
      "parentUuid": "b50df676_29265155",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8e802bf_62c40d26",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-09-25T02:34:19Z",
      "side": 1,
      "message": "\u003e Isn\u0027t this a fallout from your proposed static flash layout design?  Shouldn\u0027t you be proposing a property for that?\n\nYup. Here we are discussing the usecase, and if we all agree I will submit a patch to propose a new property.\n\n\u003e As I mentioned in that review, my opinion is that RedundancyPriority already covers that question for UBI-based images (and likely can for Golden also).\n\nI did not think about this, but it looks promising to use RedundancyPriority to represent the golden image.\n\n\u003e If we do need a new property I suspect it would be best as a separate interface because I\u0027m not sure it is applicable to all Software implementations.\n\nYup, it will be a new interface. It could be an optional property enabled by PACKAGE CONFIG.\n\nBut as you suggested, RedundancyPriority is a good candidate for my usage:\n* It could be made read-only for static-layout case;\n* The phosphor-bmc-code-mgmt sets the priority to 0 when it\u0027s running on the primary flash, and 1 when it\u0027s on golden image.",
      "parentUuid": "6dad0173_c33d30c7",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6df6b2c3_dde9bcb0",
        "filename": "xyz/openbmc_project/Software/Version.errors.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-17T20:26:03Z",
      "side": 1,
      "message": "\"requested one\"",
      "range": {
        "startLine": 10,
        "startChar": 65,
        "endLine": 10,
        "endChar": 74
      },
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcdc23a2_f75cb875",
        "filename": "xyz/openbmc_project/Software/Version.metadata.yaml",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-09-17T20:36:30Z",
      "side": 1,
      "message": "Lei, you had commented that this metadata could be filled with:\nBOOTED_VERSION \u003d Golden/Secondary\nEXPECTED_VERSION \u003d Primary\n\nI think that works, even with dual chip systems like Witherspoon we can decide either to add the version string or the chip (primary vs backup) if we detect that the system switched. Or also we could add additional metadata like:\nBOOTED_DEVICE\u003d%s\nEXPECTED_DEVICE\u003d%s\n\nand fill in the VERSION and/or DEVICE metadata when an error occurs either it switched chips or same chip but different version.",
      "revId": "9569c3f1b67db63d66792a93ecf739eae64f2d77",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}