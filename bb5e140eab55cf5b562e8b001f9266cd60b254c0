{
  "comments": [
    {
      "key": {
        "uuid": "089cfedb_4cb3b79b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-02-27T22:42:18Z",
      "side": 1,
      "message": "parameters",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dc46a5b_dff57bd2",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-11T18:56:32Z",
      "side": 1,
      "message": "I must have missed the follow on discussion ~Feb 4th to change this to a dict.  Dicts are bad because they cannot be statically confirmed (ie. at compile time).  Do we really want to start passing parameters as dictionaries in interfaces?  Are there other examples of doing that and has it worked well?\n\nIt seems like we\u0027re trying to pass them as \u0027dict\u0027 because they are optional?  The typical way to create optional items is to create a new interface that is optionally added to the same object.  We could add a new interface with a property \"DesiredRedundancyPriority\" that must be set before the Activation property.  Implementations can then either not implement this interface or implement it with the desired default (0?).",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5d6f633_a282c8fd",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2020-02-12T09:54:04Z",
      "side": 1,
      "message": "This is new approach we are trying. Yes, dicts are chosen since the parameters are optional. With this method, the no.of parameters and its types can be varied as per each OEM\u0027s requirements. For e.g: now we want to send both priority value and clearconfig bool to the method, later in future we might need to pass any other parameters that\u0027s needed for activation.\nWe don\u0027t want to limit or confine the Activation process to one\u0027s design specific.",
      "parentUuid": "6dc46a5b_dff57bd2",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bee855c_f193bf1b",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-18T18:49:24Z",
      "side": 1,
      "message": "My concern with this approach is much broader than this specific feature.  If we start to allow dynamic fields like this, there is no way to document and statically confirm what are valid.  \n\nOne of the reasons we moved away from a dynamic language like Python was because we kept running into maintenance issues where one part of the code would change and you couldn\u0027t tell until you exercised that code path.  With dynamic properties like this we have no way to know if a particular client/server combination of this dbus interface will work together without runtime tests, and we don\u0027t have a good runtime testing framework that is supported by all machines.",
      "parentUuid": "d5d6f633_a282c8fd",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c0c753_355e3d67",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-19T01:41:23Z",
      "side": 1,
      "message": "@Patrick What do you suggest for such case?\nI had comments before to use separated properties, which resolves the above concern (and re-use the RequestedActivation). But at that time there were disagreements.",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "278cf471_8de2f883",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-19T16:29:15Z",
      "side": 1,
      "message": "The only options we have are:\n\n- Dynamic parameters via dict (current proposal).\n- New functions for different parameter requirements.\n   - https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/28880 is sort of doing this.\n- Additional properties either here or in new [optional] interfaces.\n\nWe could also request a feature to sdbusplus to allow defaulted parameters, but since we don\u0027t have a generated client binding this isn\u0027t all that helpful yet.\n\n----\n\nIn my reading of the history of this commit, these seem to be optional properties that will only be used by specific implementations.  My personal preference would be we make new optional interfaces that hold the property and can be implemented just by the implementations that require them.\n\nEx. xyz/openbmc_project/Software/Activation/ClearConfig.interface.yaml with a single property ClearConfig that can be implemented on BMC and Host update providers but not on PSU.",
      "parentUuid": "68c0c753_355e3d67",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4825549_6a59dc30",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-20T02:35:14Z",
      "side": 1,
      "message": "\u003e My personal preference would be we make new optional interfaces that hold the property and can be implemented just by the implementations that require them.\n\u003e Ex. xyz/openbmc_project/Software/Activation/ClearConfig.interface.yaml with a single property ClearConfig that can be implemented on BMC and Host update providers but not on PSU.\n\nI would definitely give +1 on that approach, and we already have\nhttps://gerrit.openbmc-project.xyz/c/openbmc/phosphor-dbus-interfaces/+/28262 about this.",
      "parentUuid": "278cf471_8de2f883",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2ca22c0_9eb4df56",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-25T15:59:23Z",
      "side": 1,
      "message": "Actually, the same has been started in that angle, and we changed the logic to this way, when tried to add invalid state value to the Priority property https://gerrit.openbmc-project.xyz/#/c/openbmc/phosphor-dbus-interfaces/+/28237/\n\ni.e. ClearConfig / Priority can be implemented as optional interfaces, but when the image is downloaded, before requesting for activation, it may need to expose the property with value being invalid / need to initialize. \n\nChanged to method for the following reason\n1. Invalid state / value was rejected sighting, method update is better.\n2. Method solves the problem of setting the properties in order etc.\n\nThe only reason we have dynamic parameters was it allows a way to provide lot more information for oem based on the need. Can be updated to fixed param here too, provided invalid / ignore value for those params are acceptable. \nHaving more in property results in too many D-Bus calls to do one single methodology.\n\nNote: I agree dictionaries doesn\u0027t control checking, and we have association in the similar manner. I am not against dictionary when it is used in places where it is really required. Let us know the acceptable scenario in this case.\n\nWe need to set both Priority \u0026 Clear config to the downloaded image, and if interface needs to be exposed, then we need to define invalid value / ignore value to the priority, to differentiate between the states.",
      "parentUuid": "d4825549_6a59dc30",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9601f66a_bf790a69",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-25T17:04:17Z",
      "side": 1,
      "message": "\u003e Having more in property results in too many D-Bus calls to do one single methodology.\n\nThis rationale sounds like an optimization.  Do you have data to back up it being necessary?",
      "parentUuid": "f2ca22c0_9eb4df56",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f2c540e_2043fd2d",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-25T17:22:50Z",
      "side": 1,
      "message": "what data you are looking for? I thought we don\u0027t need any data as in theory need to set 3 property in our case. Also before #3, 1 \u0026 2 must be set (ordering is also needed).\n1. Priority\n2. clear config\n3. RequestedStateTransition\n\nwith method, it is one D-Bus call.",
      "parentUuid": "9601f66a_bf790a69",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ab7c1d_9c9746cb",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-27T20:13:42Z",
      "side": 1,
      "message": "The \"too many\" in your original implies there is a problem.  What does 3 vs 1 matter unless it has a performance impact?\n\nI think what we\u0027re trying to do here is decide direction overall on how to handle these new \"parameters\" (see the 3 options I gave earlier).  Your response implies you have ruled out one option and you\u0027ve given the reason as being too many D-Bus calls.  My request for data is only that I don\u0027t see any data to back up \"too many D-Bus calls\" as being a reasonable rationale for rejecting that option.\n\nDonald Knuth once wrote \"premature optimization is the root of all evil.\"  My concern is that we are rejecting a better design from an API perspective because we\u0027re worried about a [potential] performance issue that we aren\u0027t sure exists.\n\nStated another way: clearly 3 calls has worse performance than 1, but does it really matter for the less than 20 times the average server has its firmware updated (Activated)?",
      "parentUuid": "6f2c540e_2043fd2d",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b03407_05cf8a5b",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-19T01:41:23Z",
      "side": 1,
      "message": "Trailing space.",
      "range": {
        "startLine": 12,
        "startChar": 66,
        "endLine": 12,
        "endChar": 67
      },
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e7e7ea5_e1d4630f",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1000559
      },
      "writtenOn": "2020-02-27T22:42:18Z",
      "side": 1,
      "message": "Is the implementation going to reflect this? Why not remove it?",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}