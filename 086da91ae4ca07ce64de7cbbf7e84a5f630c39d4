{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab8594f1_8e9b0d37",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-01-28T17:07:55Z",
      "side": 1,
      "message": "Patrick, any updates?",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "748229cc_215399d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-29T16:21:18Z",
      "side": 1,
      "message": "I\u0027m expecting the maintainers of the affected repositories to weigh in.\n\nDo we need changes in bmcweb also to leverage this or where does this API get called from?",
      "parentUuid": "ab8594f1_8e9b0d37",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f28c4aa4_f74318c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-29T16:21:18Z",
      "side": 1,
      "message": "I\u0027m expecting the maintainer",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7605ae07_213d3333",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2025-01-29T16:36:27Z",
      "side": 1,
      "message": "There is a change in bmcweb which is based on this one\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/75372\nAlso, CreateUser2 method was proposed in comment to aofrementioned review in bmcweb\nhttps://gerrit.openbmc.org/c/openbmc/bmcweb/+/75372/comment/0219df68_a30ffb63/",
      "parentUuid": "748229cc_215399d5",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "129356c6_316d5440",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-01-29T16:44:48Z",
      "side": 1,
      "message": "I think its better to handle PasswordExpiration as new user attribute similar to other account policy settings without making any changes to createUser interfaces.",
      "parentUuid": "7605ae07_213d3333",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df06ca0e_cea11324",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-01-29T16:49:31Z",
      "side": 1,
      "message": "If its needed to pass PasswordExpiration parameter to CreateUser method then extend the existing CreateUser method instead of creating one more new method CreateUser2",
      "parentUuid": "129356c6_316d5440",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95a936d8_519a5b1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-01-29T17:20:13Z",
      "side": 1,
      "message": "We have done this before where we add a Method2 or Property2 and then convert all the existing code to use it and then rename it back to Method or Property.  Using the number is suppose to be a temporary migration tactic (in our implementation of dbus).",
      "parentUuid": "df06ca0e_cea11324",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d18778e7_30d35713",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2025-01-30T07:36:54Z",
      "side": 1,
      "message": "My initial concern was not to break backward compatibility of existing CreateUser method. Especially because this change depends on implementation in User.Manager. So having CreateUser2 until everything is settled seems to be good tactic for me.",
      "parentUuid": "95a936d8_519a5b1b",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b486cb7_7986f4ba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-01-31T16:13:45Z",
      "side": 1,
      "message": "ok, got it.",
      "parentUuid": "d18778e7_30d35713",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cfdd4db_c551bb09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-02-07T12:39:19Z",
      "side": 1,
      "message": "@moiseev.ivan4w@yandex.com: Why Can\u0027t we create the user and set the property after wards? Avoiding multiple D-Bus calls? Any other reasoning?",
      "parentUuid": "7b486cb7_7986f4ba",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7be4e50b_c1193815",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2025-02-08T17:27:40Z",
      "side": 1,
      "message": "I think that was the reason why @ed@tanous.net proposed it in https://gerrit.openbmc.org/c/openbmc/bmcweb/+/75372/comment/d35c832d_e769bf9c/.\nWe want to create a user with set parameters and we do not want to have side effects. By side effects I mean that result of the call is either user is created successfully or is not created if there is some failure. This seems to be responsibility of phosphor-user-manager to provide such a call as name of the service suggests.\nAs I understand it, the idea is not only to make a single call but to avoid necessary cleanup in case of a failure. If we made it as a sequence of a few calls in bmcweb (that is, create user, set password, set password expiration), we would need to handle user delete if password expiration update fails. That would make bmcweb code more complex and make it responsible for user create operation. Why REST web server should do such a stuff instead of corresponding phosphor-user-manager service?",
      "parentUuid": "1cfdd4db_c551bb09",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61061dd9_bd31eb4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-08T22:44:43Z",
      "side": 1,
      "message": "\u003e Why Can\u0027t we create the user and set the property after wards?\n\nBecause it adds a significant amount of error handling code in something that should be atomic:\n\n1. Create user\n2. Set password over PAM\nif this fails, delete user?  (note, we have this complexity already because we\u0027ve separated the two APIs).\nfor property in a, b, c, d\n   Set property\n      if this fails, delete user?  Need to delete password separately?\n\nThe idea of atomically creating a user is something that\u0027s required by the Redfish spec/REST semantics, and having bmcweb maintain the atomic nature of a user creation action leads to a lot of complications and state handling that\u0027s MUCH easier handled within PUM, given it can run its pre-checks on the input before any permanent actions (ie, writing config files) are taken.\n\nNote that the existing property (Enabled) has this same requirement that is not \"required\" to be specified and could easily be set later, so if we want to go with the above flow, we\u0027re already in the realm of duplicating APIs, and could remove Enabled and Privilege from the call.",
      "parentUuid": "7be4e50b_c1193815",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4052bd76_3f6878b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-02-28T10:57:39Z",
      "side": 1,
      "message": "If the concern is that the client application needs to handle error management—since it first creates the user and then sets the properties—\nhow do we approach future changes?\n\nFor example, today, we might introduce a variation of the API that includes an additional parameter for password expiry. Tomorrow, there could be even more properties that need to be set after calling the createUser2 API. Would we continue creating new APIs for each variation?\n\nDoes this align with the D-Bus API guidelines?",
      "parentUuid": "61061dd9_bd31eb4e",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "200b5968_639d115d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-04-21T17:54:26Z",
      "side": 1,
      "message": "\u003e handle error management\n\nIt\u0027s not error management, it\u0027s state management because the backend isn\u0027t atomic, but protocols expect that user creation is atomic, so SOMETHING needs to provide that.  I would advocate that the webserver shouldn\u0027t be the thing keeping things atomic.\n\n\u003e Would we continue creating new APIs for each variation?\n\nYes, if we are adding new properties to a user, the \"create\" call needs to be updated.",
      "parentUuid": "4052bd76_3f6878b7",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "310e2294_db5a7fa3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-06-09T19:59:47Z",
      "side": 1,
      "message": "So, minimal set for CreateUser2 interface:\nUsername\n\nEvery optional param set to defaults and all other parts goes through PUM(Enable, Disable, Password Expiration, Account Expiration, Groups and etc).\n\n\u003e Tomorrow, there could be even more properties that need to be set after calling the createUser2 API.\n\nPlanning to add Account Expiration also, so createUser2 will be same with one param as \"Username\" and nothing more.",
      "parentUuid": "200b5968_639d115d",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fce90030_31f8751d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-06-10T22:52:13Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the proposal made here?  Can you post it in the form of the actual call?\n\nCreateUser2(username, enable, expiration, groups)\n\nSo long as there\u0027s a way to create a user atomically with all the appropriate properties, that\u0027s the important part.",
      "parentUuid": "310e2294_db5a7fa3",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0a67689_c660ae08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-06-11T05:16:00Z",
      "side": 1,
      "message": "Yes, I can, just\nCreateUser2(username)\nsome sort of \"adduser\" in linux, every other option - password/groups/etc goes through passwd/usermod/groupadd, in our case through PUM via Redfish/IPMI.\nAnd it will create it automatically but with defaults which set by something, like /etc/default/useradd or something on dbus via phosphor-settings or yaml/json config.\n\nBtw I don\u0027t mind also about adding new optional parameter like it now:\nCreateUser2(username, enable, expiration, groups, passwordexpiration)\n\nbut as Ratan says, if somebody wants a new param - it will generate another call with additional one parameter. So, as example, if I want AccountExpiration - would it be\nCreateUser3(username, enable, expiration, groups, passwordexpiration, accountexpiration)\nor just as suggested above\nCreateUser2(username)",
      "parentUuid": "fce90030_31f8751d",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfaa3f14_294598e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-06-18T02:27:01Z",
      "side": 1,
      "message": "actually if user created with useradd with given user name, even though user is created, but still user is not usable unless all other attributes like password is set \n\nas per existing design, bmcweb calls set password D-bus call after CreateUser D-bus call. with this CreateUser2(username) call, bmcweb still needs to call D-bus to set password right? similarly all optional properties needs to set correct?",
      "parentUuid": "e0a67689_c660ae08",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79ed76af_7bef1066",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-06-18T06:19:13Z",
      "side": 1,
      "message": "Ed, sorry, I was added wrong param in example, per current PUM implementation:\n```\nvoid UserMgr::createUser(std::string userName,\n                         std::vector\u003cstd::string\u003e groupNames, std::string priv,\n                         bool enabled)\n```\nand bmcweb:\n```\n    if (!json_util::readJsonPatch(        //\n            req, asyncResp-\u003eres,          //\n            \"AccountTypes\", accountTypes, //\n            \"Enabled\", enabledJson,       //\n            \"Password\", password,         //\n            \"RoleId\", roleIdJson,         //\n            \"UserName\", username          //\n            ))\n```\nso right now it is:\nCreateUser(username, groups, priv, enabled)\n\nand CreateUser2 will be:\nCreateUser2(username, groups, priv, enabled, passwordexpiration)\n\nit same as CreateUser but it will set explicitly passwordexpiration but with this approach any new param will generate another call as I see, which will be problematic, as example for accountexpiration.\n\nor\nCreateUser2(username) which sets everything to defaults:\n do not set password\n set default groups\n set default privilege\n set user disabled\n set default password expiration\n set default account expiration\n set anything else to defaults\n\nAny other changes goes as additional steps which may not happen at all.\n\nRavi,\n\u003e\u003e as per existing design, bmcweb calls set password D-bus call after CreateUser D-\u003e\u003e bus call. with this CreateUser2(username) call, bmcweb still needs to call D-bus \u003e\u003e to set password right? similarly all optional properties needs to set correct?\nAnd password set may not happen at all. Everything set by defaults.\n\nNeed to choose approach, I don\u0027t have any problems with both of it.",
      "parentUuid": "cfaa3f14_294598e4",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d150d38_16cf5ffe",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-01-31T16:23:39Z",
      "side": 1,
      "message": "PasswordExpiration parameter is not mandatory while creating user and there is  PasswordExpiration user attribute defined already\nbmcweb can create user first using CreateUser method and then update PasswordExpiration D-bus property of corresponding user with given password expiration input values. we don\u0027t need to create new CreateUser method.",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53913069_d8f99c5f",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2025-02-08T17:27:40Z",
      "side": 1,
      "message": "Yes, password expiration parameter is optional. That is why I introduced corresponding check in CreateUser2 implementation allowing not to set password expiration for a user in case if password expiration parameter value is equal to password expiration attribute default value (that is, maximum value of uint64_t).\nAnd yes, bmcweb can make a several call to create a user and set password expiration afterwards, though this would make bmcweb responsible for user creation process which seems to be a responsibility of phosphor-user-manager.\nThough to have single call to create a user with all necessary parameters seems to be more convenient alternative.",
      "parentUuid": "0d150d38_16cf5ffe",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e18b93d_322227f2",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2025-02-08T22:44:43Z",
      "side": 1,
      "message": "The \"enabled\" property is also optional, so should it be removed as well to be consistent here?  I\u0027m pretty sure the only parameter that\u0027s required is the username?  Everything else has reasonable defaults (as password expiration does) that can be applied.\n\nIf we wanted to go down the route of \"individual applications are responsible for setting user properties separately\" I\u0027m happy to have that conversation (I think it\u0027s wrong), but we should be internally consistent to one idea or the other.\n\n\u003e  this would make bmcweb responsible for user creation process which seems to be a responsibility of phosphor-user-manager.\n\nExactly.",
      "parentUuid": "53913069_d8f99c5f",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7df322ae_703d8e9b",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2025-02-28T10:57:39Z",
      "side": 1,
      "message": "I would suggest that the minimum properties required to craete a user, That should be enough,",
      "parentUuid": "5e18b93d_322227f2",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93dbd542_1f356bfe",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-03-27T17:31:07Z",
      "side": 1,
      "message": "Ravi, Ratan, Ed, so, what the decision about what should be as minimum properties and what not?",
      "parentUuid": "7df322ae_703d8e9b",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae8dd811_bfb55335",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000350
      },
      "writtenOn": "2025-04-06T14:44:46Z",
      "side": 1,
      "message": "I agree with above Ed\u0027s point as well that only parameter that\u0027s mandatorily required is the username and don\u0027t prefer to remove existing optional parameters which needs  additional in IPMI/BMCWEB which is not right as well.\n\ncurrently all account policy setting properties handled separately, so I was thinking if we can handled same way, since this PasswordExpiration also related to account policy setting and not widely used parameter as well, otherwise I am good with this new interface.",
      "parentUuid": "93dbd542_1f356bfe",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfbef4f2_7a8c4270",
        "filename": "yaml/xyz/openbmc_project/User/Manager.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 1000182
      },
      "writtenOn": "2025-09-08T23:30:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae8dd811_bfb55335",
      "revId": "086da91ae4ca07ce64de7cbbf7e84a5f630c39d4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}