{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e972ced3_031895a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "if these were just supplying application names for standard defined interfaces i\u0027d agree\n\nbut this seems to be a case of designing an interface from an exemplar device and presenting it as a starting point for other devices from the standard.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d507414b_7618f42f",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "is this just an arbitrary label?  does it correlate to some other interface?",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe93510b_a71d4267",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "is this a free form string?  or an enumeration? how is it inntended to be consumed?\nsubtype of what?",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "855bad18_b0171116",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "what address deserves a uint16 ?\n\nthe node address in RTU is 8 bits, range 1-147.  \nIn tcp based mbap its 1-247 + 0 and ff mentioned.   mbap-s is just over tls.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c2a378_6cc31c4a",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "the modbus spec specifies words that are big endian bytes (although rtu specifies lsb first for each byte on the wire).\n\nWhile the (lgpl3) library offers 32 bit floats with several byte order (cdab).\n\nThe reference sensor has little endian words.\n\nlets be more explict on byte order.\nWhy isn\u0027t this a property of each sensor?",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "543c7b48_a4bee0fd",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "for the device?  exposed by the device?",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ddf62efb_8cde1ca6",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "is this the register (1-based) or the address (0-based)?",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d769886f_c9d0aa2d",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 57,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "all modbus registers are defined to be in 16 bit words.\n\nlogical data might be sent over multiple register addresses.\n\nBut I would expect some (other unspecified future) modbus devices to expose digital sensors (eg leak detector, sensor health status information, or general purpose inputs) as digital inputs, and outputs as coils, even if the current exemplar exposes all data namespaces in common and doesn\u0027t differentiate between input only input registers and read/write holding register namespaces.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd9e6911_238d76b8",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "the exlemplar device only has scaled integers.  \nany format requirinig multiple registers should include byte order as part of the format, and the register sizes become redundant.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13cef3da_449bc5bc",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 66,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "where is this consumed?  \nwhere is it specified?\nthe exemplar device has integer register values before scaling.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa40f547_d824b817",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "is this the sensor scale factor or the register scale factor?\n\nI thought our units were well defined standards, and double precision.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "375f1d49_6b956ed9",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "while the exemplar exposes the firmware revision in a generic holding register or input register (and doesn\u0027t differentiate), \n\nthe modbus spec includes a device identification stream under the encapsulated interface transport function 43 (0x2b) as subytype 14 0x0E .  section 6.21 describes how to obtain type/length/value ascii string representations that describe \"inventory\" information (vendor, product code, url, product name, revision, model name, user application name, and a reserved for product specific use id range).\n\nexpecting standardized information to be exposed in a register in a generic way is concerning.   I feel it would be better to expose device specific registers in a device description rather than through entity manager; leave the application name and",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afe30ab6_b14369bc",
        "filename": "yaml/xyz/openbmc_project/Configuration/ModbusDevice.interface.yaml",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1000021
      },
      "writtenOn": "2025-02-12T06:01:47Z",
      "side": 1,
      "message": "again seems to be designing to the exemplar device, these could be represented in the digital inputs namespace.",
      "revId": "515960b76f57ef14864d10f8d7482abe3768cb09",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}