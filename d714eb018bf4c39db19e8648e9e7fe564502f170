{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e0226ae4_d7e514dd",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-02T15:02:29Z",
      "side": 1,
      "message": "These are just random things that we already have in other interfaces.  Why would we define a new top-level interface for this?",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71088e5f_31209b9f",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-02T15:20:11Z",
      "side": 1,
      "message": "I would say the idea here is to present an interface for HW ID data (VPD) as discovered in well-defined device-tree nodes.\n\nIt\u0027s my understanding that something along these lines is needed for the \u0027device-tree -\u003e dbus (for Entity-Manager probe consumption) daemon.\n\nAs discussed here: https://gerrit.openbmc.org/c/openbmc/phosphor-u-boot-env-mgr/+/71512/comment/e3a2680c_c642e88b/\n\nI am open to suggestions \n\n(sidenote: I\u0027ve noticed the top-level description on my YAML probably should be changed. I\u0027ll aim to fix that along with whatever fixes/changes are needed next)",
      "parentUuid": "e0226ae4_d7e514dd",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8b17918_c0afcd8f",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-02T15:29:12Z",
      "side": 1,
      "message": "Reuse the existing dbus interfaces and put them at a well-defined location?\n\nInventory.Decorator.Compatible \u003d Model\nInventory.Decorator.Asset \u003d SerialNumber\nInventory.Item.NetworkInterace \u003d MACAddress and LocalMACAddress (?)",
      "parentUuid": "71088e5f_31209b9f",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d11973ac_da17f42f",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-02T15:46:24Z",
      "side": 1,
      "message": "It\u0027s been awhile, and I bet I can find more detail if a deeper dive is needed, but I believe the suggestion to use existing Inventory.Decorator was rejected by the community.\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comment/b7fcf0b3_e571f130/\n(Ed Tanous comments)\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comments/62dc0e29_4dd4207c\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/66369/comments/efb4633f_267a3e16\n\nThe \u0027MachineContext\u0027 name we\u0027ve landed on for this is the only interface name so far we didn\u0027t get objections to (so far) across the design doc \u0026 phosphor-u-boot-env-mgr daemon implimentation comments on Gerrit",
      "parentUuid": "e8b17918_c0afcd8f",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3a75dc2_7cc0af6d",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-02T15:49:24Z",
      "side": 1,
      "message": "Oh- it just clicked -- are you suggesting I aim to gather existing properties and make them available through a new \u0027central\u0027 location on d-bus? That isn\u0027t something I had thought of as an option before.",
      "parentUuid": "d11973ac_da17f42f",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3866038e_3ae1896b",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-02T16:43:14Z",
      "side": 1,
      "message": "By \"central\" I would only mean a path, not a new interface. \n\nI am not following what Ed\u0027s concern is wrt Decorator.Asset.  TBH, I don\u0027t know why the path matters anyhow. EM can just as easily Probe against the Compatible interface as some random BOARD_PRODUCT_NAME property, so I don\u0027t know what is wrong.\n\nWe have all this stuff defined already. I\u0027m not going to accept a new \"bunch of random properties HPe thinks are important [today] globbed into a new interface\" interface. If that requires tweaking your design or getting things smoothed over with Ed, so be it.",
      "parentUuid": "a3a75dc2_7cc0af6d",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb36dc05_97af8b83",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-05T14:59:10Z",
      "side": 1,
      "message": "I believe I understand your position. \n\nI\u0027m currently going back over old community discussion on \"where to output device-tree data to dbus\" topic and putting together a \"where we\u0027ve been and where we\u0027re at now\" summary, and help drive further community discussions.\n\nAs far as I understand, there is no interface for device-tree data available to d-bus at this time. We (after much community discussion) landed on the \u0027MachineContext\u0027 name with the idea that it represents data about physical hardware discovered via device-tree to give context for the hardware we\u0027re running on.\n\nI believe Ed\u0027s main objections using to the Decorator assets Compatible fields were largely about that interface not being representative of physical hardware, and him really not liking the idea of tying data about physical hardware to arbitrary paths. I\u0027ll have more on this once I\u0027ve finished putting together a new summary.\n\nEssentially, this is intended as an interface for \u0027device-tree\u0027 (there was plenty of objection to just naming the interface something with \u0027device-tree\u0027 in the name, with the idea that \u0027Device-Tree\u0027 is a concept, not representative of physical hardware that needs an interface) \n\nHPE will be using it to allow Entity-Manager probes to find our HW, but it is not intended to be an HPE-specific interface or daemon.\n\t\nHPE essentially only cares about the \u0027model\u0027 field, the other fields serial-number and the mac address fields are \"low hanging fruit\" - device tree root nodes that were included due to community discussion -- largely because they\u0027re well-defined device-tree nodes (as described @ https://devicetree-specification.readthedocs.io/en/latest/ )",
      "parentUuid": "3866038e_3ae1896b",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d809e924_b493caf7",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-05T18:29:44Z",
      "side": 1,
      "message": "Also worth bringing up -- looking at existing Entity-Manager configs, it seems like Decorator properties like model are generally defined by devs in the entity-manager JSON config files for each platform.\n\nhttps://github.com/search?q\u003drepo%3Aopenbmc%2Fentity-manager%20model\u0026type\u003dcode\n\nI suspect that with having decorator assets typically being defined inside EM-config files after a successful EM-probe match, it could cause issues if there\u0027s a service trying to set that same field behind the scenes based on device-tree node data at boot.\n\nAs far as I know, there\u0027s no defined place for device-tree discovered data at the moment. I am continuing my research, and I am still open to any and all suggestions. Thanks for your time!",
      "parentUuid": "bb36dc05_97af8b83",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c0d480a_f5e30ff5",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-08-05T19:13:01Z",
      "side": 1,
      "message": "\u003e I suspect that with having decorator assets typically being defined inside EM-config files after a successful EM-probe match, it could cause issues if there\u0027s a service trying to set that same field behind the scenes based on device-tree node data at boot.\n\nThis shouldn\u0027t be an issue.  They wouldn\u0027t be updating the *same* field, because they\u0027d be different instances (both different services and object_paths).\n\nThe device tree stuff can fill in `/xyz/openbmc_project/inventory/device-tree/fru1` with Asset and Compatible.  EM will probe on some combination of those and create `/xyz/openbmc_project/inventory/Board/HPe_G15_Mainboard`.",
      "parentUuid": "d809e924_b493caf7",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b079d94_f70f622b",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-06T16:52:50Z",
      "side": 1,
      "message": "Thanks for the insight. I haven\u0027t had much experience with mixing and matching/playing with dbus paths in practice (esp with sdbusplus processes in the mix), so have been experimenting with your suggestions to some success. \n\nI will add this to my situation summary I\u0027m putting together for community discussion.\n\nQuestion: how would you implement multiple interfaces to one dbus object in the context of sdbusplus processes? \n\nMy current understanding is that one interface per object can be implemented by simply creating a class that inherits from a SDBusPlus-YAML generated class like aserver::xyz::openbmc::inventory::decorator::asset, instancing it, and then spawning a service with the sdbusplus::asyc::context.\n\nbut I\u0027m not sure about using more than one interface, for say Inventory.Item.NetworkInterface and Inventory.Decorator.Asset",
      "parentUuid": "3c0d480a_f5e30ff5",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8032afeb_91937440",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-06T17:29:50Z",
      "side": 1,
      "message": "Nevermind the last question - did some experimenting, realized the answer is \u0027multiple inheritance.\u0027\n\nNext question: Am I right to assume there\u0027s no way to \u0027hide\u0027 properties from an inherited interface in the listing that comes up with we introspect on an dbus object? \n\nie there\u0027s no way to tell sdbusplus \"I only want to make these inherited interface properties available, but not those properties\", right?",
      "parentUuid": "8b079d94_f70f622b",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c49d3b99_41c7bb94",
        "filename": "yaml/xyz/openbmc_project/MachineContext.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 5,
      "author": {
        "id": 1001354
      },
      "writtenOn": "2024-08-06T17:29:50Z",
      "side": 1,
      "message": "Ah - the answer to that appears to be multiple inheritance.\n\nNext question: Is there any way to only present specific properties from one of those interfaces?",
      "parentUuid": "8b079d94_f70f622b",
      "revId": "d714eb018bf4c39db19e8648e9e7fe564502f170",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}