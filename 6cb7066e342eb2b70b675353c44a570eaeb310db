{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b2e9b81_b9125926",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-07-26T23:47:47Z",
      "side": 1,
      "message": "Hi Patrick, could you help take a look at this updated version? Thanks!",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "507a07b1_f7c5a89d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-08-15T23:59:01Z",
      "side": 1,
      "message": "Hi Patric, could you help review this updated version? Thank you!",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85d92afd_cce6b7ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-08-30T14:47:52Z",
      "side": 1,
      "message": "Adding Nan Zhou, Nancy Yuen and William Kennington to help with the review, thanks!",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75a22f72_a315249e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-09-25T22:47:09Z",
      "side": 1,
      "message": "@patrick@stwcx.xyz, Hi Patrick, thanks a lot for your constructive feedback! I have fixed the comments accordingly. Now I also get it reviewed with Nan who has rich experience in openbmc and get a +1. Could you help review it again and +2 it if it looks good to you? Thanks!",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "146925a1_75ab1578",
        "filename": "yaml/xyz/openbmc_project/Attestation/ComponentIntegrity.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-09-03T13:57:20Z",
      "side": 1,
      "message": "Not typically how I see dates here. \nDoes uint64 work?\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/4f6fbeab36c23cce3816f0f6de4c92b9b87774b7/yaml/xyz/openbmc_project/State/BMC.interface.yaml#L19",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "273f8681_7aa68b03",
        "filename": "yaml/xyz/openbmc_project/Attestation/ComponentIntegrity.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-09-05T08:38:19Z",
      "side": 1,
      "message": "Prefer string here: this LastUpdated date here is for human readers. If we store it as string here, it will avoid transforming it again from uint64 to string.",
      "parentUuid": "146925a1_75ab1578",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb55abd5_a2dda102",
        "filename": "yaml/xyz/openbmc_project/Attestation/ComponentIntegrity.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-11-14T09:09:13Z",
      "side": 1,
      "message": "bmcweb could convert the timestamp to human readable strings, but on dbus, uint64 epoch timestamp looks more suitable here, which is also consistent with other interfaces (e.g. dump entry)",
      "parentUuid": "273f8681_7aa68b03",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090d4f98_6d82e1b0",
        "filename": "yaml/xyz/openbmc_project/Attestation/ComponentIntegrity.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-11-14T17:49:20Z",
      "side": 1,
      "message": "If uint64 epoch for timestamp is the d-bus convention, I\u0027m happy to follow it.",
      "parentUuid": "bb55abd5_a2dda102",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb2c3066_8e9d17c5",
        "filename": "yaml/xyz/openbmc_project/Attestation/ComponentIntegrity.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-11-14T17:49:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "090d4f98_6d82e1b0",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4201ab64_c97eebc5",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-11-14T09:09:13Z",
      "side": 1,
      "message": "Should this be `array[byte]`?",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "484e110c_249e4f96",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-11-14T17:49:20Z",
      "side": 1,
      "message": "`size` here represents the \"size\" of the measurementindices array. `byte` will put a limit on the number of possible measurement blocks(limit to 256). Even though the current SPDM spec does have a limit of 256 max blocks, I\u0027m not sure if we want to have a hard limit here given the spec may change to accept more blocks.",
      "parentUuid": "4201ab64_c97eebc5",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec696a65_642d8ba5",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-12-26T12:26:16Z",
      "side": 1,
      "message": "The `size` here is the data type in the array, not the size of the array.\nWith `size`, it effectively becomes std::vector\u003csize_t\u003e in C++, but I think it makes more sense for `std::vector\u003cuint8_t\u003e` for this property.",
      "parentUuid": "484e110c_249e4f96",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fb117d2_67d9c410",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2024-01-04T19:01:03Z",
      "side": 1,
      "message": "As explained in the previous comment, the idea of using `size` type (`size_t` effectively in C++, which is also compatible with redfish spec) is that we don\u0027t want to put a hard tight limit on the array size, thus making this interface more stable. For example, if we use byte here, it will be tightly binded to the current SPDM spec. If anything changed in the SPDM spec, there will be a chain reaction to the bmcweb, dbus interface.",
      "parentUuid": "ec696a65_642d8ba5",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "844ac422_39a1a8a2",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-05T07:54:41Z",
      "side": 1,
      "message": "\u003e  we don\u0027t want to put a hard tight limit on the array size, thus making this interface more stable.\n\nAs indicated in above comment, the size here is not for the array size, but the type of the object in the array.",
      "parentUuid": "7fb117d2_67d9c410",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f217d0ff_3361941e",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2024-01-05T17:52:05Z",
      "side": 1,
      "message": "I mean if the data type is uint8_t or byte, then the biggest array size is (2**8-1) which is 255. If it is size_t, we don\u0027t have such a limit.",
      "parentUuid": "844ac422_39a1a8a2",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e900f583_51aa0fe6",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-01-08T06:32:09Z",
      "side": 1,
      "message": "\u003e I mean if the data type is uint8_t or byte, then the biggest array size is (2**8-1) which is 255. If it is size_t, we don\u0027t have such a limit.\n\nI do not think it\u0027s correct. With `array[size]`, the data type is `size_t` and the array size is `size_t`, effectively becoming `std::vector\u003csize_t\u003e`.\nWith `array[byte]`, the data type is `uint8_t`, and the array size is still `size_t`, becoming `std::vector\u003cuint8_t\u003e`. I think the later is more appropriate for this property.",
      "parentUuid": "f217d0ff_3361941e",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "126fe2ff_f859a438",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2024-01-17T07:18:00Z",
      "side": 1,
      "message": "You are right and I misunderstood it! I misread the \"array[byte]\", it should be read as an \"array\" of data whose type is \"byte\". Initially, I thought \"byte\" here refers to the data type of the length of the array. It is a big misunderstanding on my side 😂",
      "parentUuid": "e900f583_51aa0fe6",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfb2ffa4_acf47c76",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2024-01-17T07:38:07Z",
      "side": 1,
      "message": "I have to take back what I said in my last comment. Here it needs to be array[size]. The reason is this is an array of MeasurementIndices, if each index is of data type uint8_t, that means the index can not be bigger than 255, which means we have a hard limit on how big the index can be. \n\nYou are still right about the array size, which can be bigger than 255, but by setting the index type as byte or uint8_t, we are actually putting a limit on how many measurement blocks can we have( which also tells about how big the measurement block index can be).",
      "parentUuid": "126fe2ff_f859a438",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31bca462_6020d0c0",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2024-02-28T03:48:18Z",
      "side": 1,
      "message": "OK. So what is the \"data struct\" of each indice? If it\u0027s something like integer it\u0027s OK to use `size`. But if we know the length of the data, it\u0027s better to specify the data type. `size` here depends on the BMC architecutre, on ARM32 it\u0027s uint32_t, but in future BMC chips with 64bit arch, it becomes uint64_t.\n\nPlease consider using a more specific type here.",
      "parentUuid": "cfb2ffa4_acf47c76",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c94d0a_083f7856",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-28T12:18:40Z",
      "side": 1,
      "message": "Since it is an \"array of indices\" it seems like size is appropriate?\n\nMy expectation is that these are similar to PCR indexes.  You ask for a measurement containing PCR0 + PCR8 \u003d [ 0, 8 ].",
      "parentUuid": "31bca462_6020d0c0",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b846bc_20ec5187",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-11-14T09:09:13Z",
      "side": 1,
      "message": "Possibly refer this as Certificate object path, so it is more clear",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fe6599c_5e8329f4",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-11-14T17:49:20Z",
      "side": 1,
      "message": "make sense, will change the description",
      "parentUuid": "d5b846bc_20ec5187",
      "range": {
        "startLine": 35,
        "startChar": 16,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f892df57_5bcd3485",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2023-11-14T09:09:13Z",
      "side": 1,
      "message": "Could throw other errors, e.g. internal failure, or some other errors?",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e8e13dd_bcadb9b0",
        "filename": "yaml/xyz/openbmc_project/Attestation/MeasurementSet.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-11-14T17:49:20Z",
      "side": 1,
      "message": "Good point, will add it.",
      "parentUuid": "f892df57_5bcd3485",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8f0819_2b382eed",
        "filename": "yaml/xyz/openbmc_project/Certs/Certificate.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2023-07-27T04:46:32Z",
      "side": 1,
      "message": "Currently certificates supports X.509 public certificate in PEM format. PEM wiki -\nhttps://en.wikipedia.org/wiki/Privacy-Enhanced_Mail . Is this certificate also comes under the same format?",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9913d5cd_a0d836a9",
        "filename": "yaml/xyz/openbmc_project/Certs/Certificate.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1001816
      },
      "writtenOn": "2023-07-27T16:34:08Z",
      "side": 1,
      "message": "Yes. If the original device certificate is not in PEM format, the d-bus daemon should convert it to PEM format and create a certificate dbus certificate object for it.",
      "parentUuid": "6d8f0819_2b382eed",
      "revId": "6cb7066e342eb2b70b675353c44a570eaeb310db",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}