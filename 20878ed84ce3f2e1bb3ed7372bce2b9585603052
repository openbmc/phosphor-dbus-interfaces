{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fc27b367_8eb409e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-04T15:50:25Z",
      "side": 1,
      "message": "Is there any further progress being made on this? Looks like we have no choice but to put it in the debug namespace, which is acceptable. For clarity it also looks like we will need two separate interfaces, with identical content, but different descriptions. This will help avoid confusion between a thermal PID loop and a fan PID loop.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef2c5de_641066d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-07T03:22:50Z",
      "side": 1,
      "message": "Sorry for late. I will update this weekend.\nAccording to the current code, pid-control only add zone and thermalPID dbus path, should we still need to add fan PID loop debug interface?\n```\n        |-/xyz/openbmc_project/settings/fanctrl/zone0\n        | |-/xyz/openbmc_project/settings/fanctrl/zone0/CPU0_PID\n        | |-/xyz/openbmc_project/settings/fanctrl/zone0/DIMM_CPU0_PID\n        | |-/xyz/openbmc_project/settings/fanctrl/zone0/cpu0_VR_PID\n        | |-/xyz/openbmc_project/settings/fanctrl/zone0/fleeting0_PID\n        | |-/xyz/openbmc_project/settings/fanctrl/zone0/pch_PID\n        | `-/xyz/openbmc_project/settings/fanctrl/zone0/tray_dt_PID\n```",
      "parentUuid": "fc27b367_8eb409e8",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1a0ada_6fdc49f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-07T19:34:42Z",
      "side": 1,
      "message": "There is no hurry on this, don\u0027t feel pressured. My intention was just to make sure this was not forgotten about.\n\nAs for debug interface, I am not sure. It was a requirement of somebody else, not me, that it be placed in a debug interface. I am unfamiliar with what that entails doing.",
      "parentUuid": "cef2c5de_641066d6",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6033f37_03c1b7a4",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-23T02:53:33Z",
      "side": 1,
      "message": "Is this interface intended to be used for a thermal zone, or a PID loop, or both? The name \"Zone\" implies thermal zone, but the items described in this interface imply that it is describing a PID loop instead. I believe it would be useful to both.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d8642cb_388d7833",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-23T12:04:13Z",
      "side": 1,
      "message": "How about we name this interface:\n\nxyz.openbmc_project.Debug.Control.Zone\n\nThis will make it clear this is for debug purposes and we shouldn\u0027t see the information picked up by any other code (ie. it is only for humans).",
      "parentUuid": "a6033f37_03c1b7a4",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7fb0b7_193850ea",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "There wouldn\u0027t be a reason for other code to not want to pick it up in the future, though. It is useful information that could be good for status displays or whatever. It\u0027s not intended for merely debugging purposes, although for now, that is its main purpose.",
      "parentUuid": "1d8642cb_388d7833",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf79165_3929f7ff",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-24T17:53:26Z",
      "side": 1,
      "message": "It seems like a lot of discussion in this review about the values being arbitrary any only useful to humans (unit-less properties, arbitrary string properties). If those are true, we absolutely donâ€™t want other code interpreting these values and hence my Debug suggestion.\n\nIf you want code to be able to interpret these, you need to be more formal with the specification. \n\nMy suggestion to move forward would be to treat it as Debug for now and refine it later (via refactoring) if you can identify a broader use.",
      "parentUuid": "0f7fb0b7_193850ea",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4775c422_520efd10",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T20:22:39Z",
      "side": 1,
      "message": "I still don\u0027t understand what the issue is about units. Nothing else in the PID control pipeline has units. Units are a matter of human interpretation, and associated with individual sensors. This is fine. However, to my knowledge, PID loops and thermal zones do not have units themselves. To add units would be beyond the scope of this proposal.",
      "parentUuid": "ecf79165_3929f7ff",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2076729_020b6063",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-26T01:18:21Z",
      "side": 1,
      "message": "\u003e Nothing else in the PID control pipeline has units. Units are a matter of human interpretation, and associated with individual sensors.\n\nI think this is the point of difference. Doesn\u0027t the PID loop operate over individual sensors? And don\u0027t those sensors expose their unit? Isn\u0027t any derived value in terms of that unit? Doesn\u0027t that give these values their associated unit?\n\nAs it stands I think this interface is attempting to be too abstract. It feels a bit like `std::pair` in C++ - yes, there are lots of pairs of things, but the useful bit isn\u0027t abstracting over the entire concept, it\u0027s naming the relationships between the things that are paired. Writing code accessing `.first` and `.second` doesn\u0027t do anything to clarify that relationship for the reader, especially when often the type information is elided in the source by iterators and `auto`. It feels the same way here. That fan and thermal PID loops happen to have the same shape and can be made to fit in the same interface doesn\u0027t mean it\u0027s easy to comprehend the intent, especially when other information like the object path can be obscured by the code. It feels easy for the result to be confusing, and for that confusion to become bugs.\n\nTaking a different tack: Can these sensor properties instead be associations back to underlying sensors rather than proxying the instance and value? What are the concerns generated by that approach?\n\nA third tack is having separate interfaces for thermal and fan zones. That way we can at least make some assertions about the values having a consistent unit even if the unit cannot be known from the interface itself: We can at least separate out fan from thermal zones in a mapper query.",
      "parentUuid": "4775c422_520efd10",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8b0aca6_4b3f3691",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-06-26T06:05:58Z",
      "side": 1,
      "message": "How about name the interface and properties like:\n\nzone \u003d\u003e\n```\nxyz.openbmc_project.Control.Pid.Zone\n\u003d\u003e Leader(readonly): the main PID config name that is output result to fan pid\n                     loop\n```\n\nIf pidClass \u003d temp or margin,\n```\nxyz.openbmc_project.Control.Pid.Thermal\n\u003d\u003e Leader(readonly): the sensor name that has the highest temp in input list\n   Type(readonly): the \"Input\" and \"Setpoint\" data type, \"DegreeC\" or \"Margin\"\n                   according to \"Class\" in EM json setting(refs).\n   Setpoint(readonly): the \"Leader\" setpoint setting\n   Input(readonly): the \"Leader\" input value\n   Output(readonly): this PID result(as \"Setpoint\" data to fan pid loop)\n```\n\nIf pidClass \u003d power or powersum,\n```\nxyz.openbmc_project.Control.Pid.Power\n\u003d\u003e Leader(readonly): the sensor name that has the highest temp in input list\n   Setpoint(readonly): the \"Leader\" setpoint setting\n   Input(readonly): the \"Leader\" input value\n   Output(readonly): this PID result(as \"Setpoint\" data to fan pid loop)\n```\n\nIf pidClass \u003d fan,\n```\nxyz.openbmc_project.Control.Pid.Fan\n\u003d\u003e Leader(readonly): the sensor name that has the highest RPM in input list\n   Input(readonly): the \"Leader\" input value(RPM)\n   Output(readonly): this fan PID result(as final pwm duty to fan)\n```\npidClass refs: https://github.com/openbmc/phosphor-pid-control/blob/master/dbus/dbusconfiguration.cpp#L722-L723\n\n(If implement like this, maybe we can also move the interface Control.Mode to Control.Pid.Mode)",
      "parentUuid": "c2076729_020b6063",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c86e1d5c_5c23de5e",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-26T17:32:52Z",
      "side": 1,
      "message": "As for units, I agree. If units are desired, the user can use the provided information here to cross-reference back, and eventually iterate back to the individual sensors, and get the units information from there. That would avoid complicating PID control with units annotations, or proxying repetitive information.\n\nWe should have enough information made available here to enable the user to cross-reference back as desired. I believe a read-only \"Name\" string field would help find the individual PID loop of interest. This would map back to the name of the PID loop, as the user configured it in the JSON file to entity-manager originally (or hardcoded in the old config.json file for phosphor-pid-control).\n\nAs for having the same interface for Power and Fan loops, they really are the same thing. Duplicating interfaces seems too complex and duplicative. Perhaps a read-only \"Type\" or \"Class\" field would help the user distinguish. This would be one of the constants \"Temp\", \"Margin\", \"Power\", \"PowerSum\", \"Fan\", or whatever else phosphor-pid-control (or any equivalent program) adds in the future.\n\nAs for associations, that isn\u0027t a valid D-Bus type. We need strings, doubles, etc. here, as this is a D-Bus interface. Adding any associations could be done at a layer of abstraction above this interface, perhaps, if somebody feels the need for this.",
      "parentUuid": "f8b0aca6_4b3f3691",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1239e0be_79283a45",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-27T00:44:11Z",
      "side": 1,
      "message": "\u003e As for having the same interface for Power and Fan loops, they really are the same thing. Duplicating interfaces seems too complex and duplicative.\n\nBut the different PID loop instantiations operate on different input data. That\u0027s my point of contention here. The PID algorithm might not care what the values are and generalises over them, but the _integrator_ (person) of the PID loop _definitely_ cares about the meaning of the inputs and outputs it generates in the context of the system(s) its driving. That is the problem I\u0027m trying to highlight. Programmatically consuming the information exposed by this interface requires context for the values. I\u0027m concerned that by skipping the context we\u0027re defining a DBus interface that is difficult to exploit.\n\n\u003e Perhaps a read-only \"Type\" or \"Class\" field would help the user distinguish. This would be one of the constants \"Temp\", \"Margin\", \"Power\", \"PowerSum\", \"Fan\", or whatever else phosphor-pid-control (or any equivalent program) adds in the future.\n\nYes, this go some way towards helping consume the values. It does require that people infer the unit from the type, but at least that\u0027s feasible.\n\n\u003e As for associations, that isn\u0027t a valid D-Bus type. We need strings, doubles, etc. here, as this is a D-Bus interface.\n\nThis is down in the weeds, but associations are specified in a separate DBus interface on the same object. They are necessarily a DBus type, albeit a container type rather than a basic type. The association interface definition lives here:\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Association/Definitions.interface.yaml\n\nThe behaviour of these associations is documented here:\n\nhttps://github.com/openbmc/docs/blob/master/architecture/object-mapper.md#associations",
      "parentUuid": "c86e1d5c_5c23de5e",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc5e1f21_fb46bce9",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-27T23:49:29Z",
      "side": 1,
      "message": "I still don\u0027t understand the issue over units. Many things in D-Bus require human interpretation in order to fully understand, and this is no different. We are trying simply to expose some more useful data from within phosphor-pid-control, to help with debugging and thermal tuning. Trying to add units is beyond the scope here. I like allowing enough information to allow interested people to cross-reference exactly what sensor inputs and outputs are involved in the PID loop, and these sensor objects do have defined units for their measurements.\n\nAnd, as for associations, that\u0027s good that it is a separate interface definition. If somebody is interested in adding an association interface to the object, they can do so, without conflicting with this interface.",
      "parentUuid": "1239e0be_79283a45",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c1785e7_7f054ffb",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-05T16:07:53Z",
      "side": 1,
      "message": "\u003e We are trying simply to expose some more useful data from within phosphor-pid-control, to help with debugging and thermal tuning.\n\nThen why are you opposed to moving this to a Debug namespace?\n\nIt seems pretty simple to me:\n  - You intend this interface to be used by other programs, in which case, the interface needs to be formal and follow the standards we general have for other interfaces.\n  - You intend this interface to be used by humans only, in which case, we can be more loose in the definition but we have to be clear that this should never be used by programs.",
      "parentUuid": "bc5e1f21_fb46bce9",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f20efbe1_c63da4ef",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-11T23:32:21Z",
      "side": 1,
      "message": "I am surprised at the level of opposition seen here. In particular, I am concerned over the bikeshedding and feature creep. I am getting discouraged, and will drop my effort to get this interface added. This YAML change can be maintained as a local patch, for now, if desired. The phosphor-pid-control code will still work fine without it.",
      "parentUuid": "6c1785e7_7f054ffb",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74be882c_3e4f4ee6",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-07-12T01:33:32Z",
      "side": 1,
      "message": "People disagreeing with you is not bike-shedding and I\u0027m not really sure what feature creep you are referring to.  I\u0027ve asked you 3 times why you are opposed to putting this in a Debug namespace, if you intend this to be used for debug, and you\u0027ve not really answered.  The only thing I\u0027ve gotten is \"maybe I want to do something else with it in the future\".  So... refactor the code when in the future when you have a more refined use-case.\n\n\u003e The phosphor-pid-control code will still work fine without it.\n\nThis is absolutely unacceptable.  We don\u0027t just make up dbus-interfaces.  Going around the process and making your own dbus interface because you don\u0027t like the direction the process is going is certainly not behavior we want to see.",
      "parentUuid": "f20efbe1_c63da4ef",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a30df46_18f9a79f",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-07-13T23:55:56Z",
      "side": 1,
      "message": "OK, I guess I have no choice. We can put it in the debug namespace.",
      "parentUuid": "74be882c_3e4f4ee6",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1775f198_3544b7f7",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "I think if we have different use-cases we should possibly have different interfaces, or a more obvious way to discriminate the uses in the actual interface (rather than being determined by path). I feel like as it stands the different use cases could easily lead to type confusion where consumers simply fail to inspect the path to understand the data types.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92c5565_9f0351ed",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "Agreed. There already seems to be some confusion between a PID loop interface and a thermal zone interface. Let\u0027s have two. One for each purpose. Then there will be no confusion. It is OK (and encouraged) to have similar fields in both interfaces, as needed.",
      "parentUuid": "1775f198_3544b7f7",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3d28899_3a885ecf",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-21T04:12:55Z",
      "side": 1,
      "message": "I add interface ```xyz.openbmc_project.Debug.Pid.ThermalPower``` and use ```type``` to diff temperature and power.\n\nResult:\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/60152/comments/e434d0f6_534e8f7a",
      "parentUuid": "b92c5565_9f0351ed",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f581420_2e3f9c0c",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "As above. We have completely different units depending on the use case, but the unit is not described anywhere. This seems like a recipe for confusion.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f54ab09b_a77ec40f",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "As for units, the interpretation will be up to the user. Adding units to the PID control process is beyond the scope of this change.\n\nHowever, one piece of information we could add, would be a list of the input sensors for each PID loop. Then, if properly cross-referenced, the user can use that information to easily walk back, and learn the original units from there.",
      "parentUuid": "1f581420_2e3f9c0c",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04f0e2bf_5423deaa",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-26T17:32:52Z",
      "side": 1,
      "message": "This could be added easily, as read-only `Inputs` array of strings, and perhaps also for the fan loops, a similar read-only `Outputs` array of strings. These strings would be sensor names.",
      "parentUuid": "f54ab09b_a77ec40f",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "670a158b_38575d2e",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-21T04:12:55Z",
      "side": 1,
      "message": "Done. I only add thermal/power pid loops. Because the current phosphor-pid-control doesn\u0027t add objects related to fan loop on dbus.\nrelated PR:\nhttps://gerrit.openbmc.org/c/openbmc/phosphor-pid-control/+/63214",
      "parentUuid": "04f0e2bf_5423deaa",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c159d0cd_2cd60c74",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-23T02:53:33Z",
      "side": 1,
      "message": "If we are exposing `Input` and `Output` values, we should also expose the `Setpoint` value as well, while we have the opportunity. This will be helpful.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0351aec_40a78d65",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-26T17:32:52Z",
      "side": 1,
      "message": "The `Setpoint` would also be a double. Although the PID loop treats this as an abstract number, the `Setpoint` represents the same units as the `Input`. Careful, this is not the same units as the `Output`!",
      "parentUuid": "c159d0cd_2cd60c74",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b7dd293c_1d33b7ff",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-21T04:12:55Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "a0351aec_40a78d65",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1073ca_cdd49a62",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "As above. We have completely different units depending on the use case, but the unit is not described anywhere. This seems like a recipe for confusion.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c816bc6_26d3e16f",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "Agreed, same as other comment.",
      "parentUuid": "cd1073ca_cdd49a62",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "047f833d_b21c1e40",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-21T04:12:55Z",
      "side": 1,
      "message": "Done. Only adding properties about thermal/power pid loop state currently. And also add ```type``` to describe the ```Input``` unit",
      "parentUuid": "8c816bc6_26d3e16f",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d346dedf_f1f48403",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-22T08:18:33Z",
      "side": 1,
      "message": "The `Type` field sounds good. Existing type names from `dbus-sensors` are being used here, in your example, I see.\n\nHowever, there is one difference: we currently don\u0027t have a way to distinguish between absolute degrees vs margin degrees for temperature, and highest wattage vs total wattage for power. These concepts are unique to `phosphor-pid-control` and don\u0027t really extend into `dbus-sensors`, so we would need to make up new type strings to describe these.",
      "parentUuid": "047f833d_b21c1e40",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dacf6a54_44d8cc81",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-22T10:08:35Z",
      "side": 1,
      "message": "The value of `Type` in my implement is from pid config `Class`(https://github.com/openbmc/phosphor-pid-control/blob/master/dbus/dbusconfiguration.cpp#L722).\nIf `Class` \u003d temp, `Type` \u003d `DegreeC`.\nIf \u003d `margin`, `Type` \u003d `Margin`.\nIf \u003d `power` or `powersum`, `Type` \u003d \u0027Watt\u0027.",
      "parentUuid": "d346dedf_f1f48403",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fc30667_5acc77f3",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-22T22:38:27Z",
      "side": 1,
      "message": "I think it is important to avoid confusion with Type and Units. They are related, but not exactly the same. They do seem to be used interchangeably, though.\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Sensor/Value.interface.yaml#L63\n\nhttps://github.com/openbmc/dbus-sensors/blob/master/src/SensorPaths.hpp#L15\n\nHow about \"Temperature\", \"Margin\", \"Power\", \"PowerSum\". The problem with using \"DegreeC\" is that both temperature and margin loops are already in units of degrees C, so this could be confusing to somebody.",
      "parentUuid": "dacf6a54_44d8cc81",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f7eba0_08ebf8a6",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-23T01:19:59Z",
      "side": 1,
      "message": "OK, I will change the type value when implementing.\n\nAbout `Type`, what about changing to use parameter name `Class` or `PidClass` in PPC?\nhttps://github.com/openbmc/phosphor-pid-control/blob/master/dbus/dbusconfiguration.cpp#L655",
      "parentUuid": "4fc30667_5acc77f3",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fa7b859_b12ca014",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-23T05:23:49Z",
      "side": 1,
      "message": "Changing it to `Class` would match the existing JSON configuration usage, so that would be preferable.",
      "parentUuid": "d0f7eba0_08ebf8a6",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db8d8cd2_b367c377",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-23T09:15:20Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "0fa7b859_b12ca014",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc1dff4a_3037eba9",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-08-24T13:13:44Z",
      "side": 1,
      "message": "When using `Class` to implement functions in phosphor-pid-control, an error occurs at compile time. So I changed to \"ClassType\".\n```\nST_ALL_NO_LIB -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_ERROR_CODE_HEADER_ONLY -DBOOST_COROUTINES_NO_DEPRECATION_WARNING -MD -MQ swampd.p/pid_zone.cpp.o -MF swampd.p/pid_zone.cpp.o.d -o swampd.p/pid_zone.cpp.o -c ../git/pid/zone.cpp\n| ../git/pid/zone.cpp: In member function \u0027void pid_control::DbusPidZone::addPidControlProcess(std::string, std::string, double, sdbusplus::bus_t\u0026, std::string, bool)\u0027:\n| ../git/pid/zone.cpp:543:36: error: expected unqualified-id before \u0027class\u0027\n|   543 |         _pidsControlProcess[name]-\u003eclass(\"Temperature\");\n|       |                                    ^~~~~\n| ../git/pid/zone.cpp:547:36: error: expected unqualified-id before \u0027class\u0027\n|   547 |         _pidsControlProcess[name]-\u003eclass(\"Margin\");\n|       |                                    ^~~~~\n| ../git/pid/zone.cpp:551:36: error: expected unqualified-id before \u0027class\u0027\n|   551 |         _pidsControlProcess[name]-\u003eclass(\"Power\");\n|       |                                    ^~~~~\n| ../git/pid/zone.cpp:555:36: error: expected unqualified-id before \u0027class\u0027\n|   555 |         _pidsControlProcess[name]-\u003eclass(\"PowerSum\");\n|       |                                    ^~~~~\n```",
      "parentUuid": "db8d8cd2_b367c377",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b1ccb80_5e072d92",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-29T20:18:21Z",
      "side": 1,
      "message": "Correct, that\u0027s an error, because `class` is a keyword in C++. Good catch. However, that\u0027s an implementation detail, which is not part of this change, which is merely an interface description.",
      "parentUuid": "dc1dff4a_3037eba9",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}