{
  "comments": [
    {
      "key": {
        "uuid": "7c556544_3b9123de",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-10-19T16:11:11Z",
      "side": 1,
      "message": "Maybe better in yaml/xyz/openbmc_project/Inventory/Decorator/PCIeSlot.interface.yaml?",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85e12210_a00b55ac",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-19T18:01:43Z",
      "side": 1,
      "message": "How does a single slot have bifurcation?",
      "parentUuid": "7c556544_3b9123de",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f88e4005_40d43377",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-10-19T18:51:21Z",
      "side": 1,
      "message": "um.. maybe it is not appropriate in here\u003e?\n\nI was thinking of PCIe devices that might have a MUX and split the slot into lanes? Is that unexpected?",
      "parentUuid": "85e12210_a00b55ac",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b5081e1_c0c74c11",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-10-19T19:49:18Z",
      "side": 1,
      "message": "I guess this should be a higher level then slot. \n\nMaybe add it to yaml/xyz/openbmc_project/Inventory/Decorator/PCIe.interface.yaml instead?",
      "parentUuid": "f88e4005_40d43377",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad392b58_f73e33f1",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-19T20:03:05Z",
      "side": 1,
      "message": "\u003e I was thinking of PCIe devices that might have a MUX and split the slot into lanes? Is that unexpected?\n\nGenerally bifurcation is controlled either the root complex itself or in a PCIe switch.  A slot is 16x, 4x, 1x, etc.  What you can have is two 16x slots that lead back to a root complex, which itself only has 16 usable lanes.  The root complex has a bifurcation options of [[16x], [8x, 8x]].  If you put two 16x cards in the two slots they only end up running at 8x.\n\nEven if this were in another object, I don\u0027t think that a simple array expresses the bifurcation options, but it does express the bifurcation in effect.  At one point I thought we discussed having a different property here for \"physical lanes\" and \"lanes used\", but I only see the one property here.",
      "parentUuid": "0b5081e1_c0c74c11",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe22853_4634c9e8",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-10-19T20:23:24Z",
      "side": 1,
      "message": "ah, ok. Thanks for the explanation. Yeah, I think I am more interested in the bifurcation options as you mentioned. I just want a way to get the highest level of bifurcation possible for a given slot.\n\nWill `array[array[size]]` be enough to represent the options? I wonder how this will be exposed by the service.\n\nMy use case will be to use Entity Manager and have the config hardcoded for a given device, but I am not sure how suitable it is for other use cases.",
      "parentUuid": "ad392b58_f73e33f1",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95d15057_bf49a447",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-10-22T21:52:09Z",
      "side": 1,
      "message": "\u003e I just want a way to get the highest level of bifurcation possible for a given slot.  Will `array[array[size]]` be enough to represent the options?\n\nStill not positive what this means w.r.t. a slot.  Do we have a root-complex and/or switch entity that this belongs in?",
      "parentUuid": "cbe22853_4634c9e8",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13a9c374_9ff1ef5c",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-10-22T22:24:11Z",
      "side": 1,
      "message": "let me ask Benjamin Fair on more context for this.",
      "parentUuid": "95d15057_bf49a447",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "338f659b_af5234d8",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-11-11T01:46:08Z",
      "side": 1,
      "message": "I think we have a root-complex that is managing the PCIe. So from you previous comment, we want two different interfaces. One with the possible bifurcation modeling the root complex and one at the device level (that bifurcation used). Maybe something like that?\n\nI was looking at how Root Complex is modeled in redfish, it is created as an Entpoint with  EntityType of RootComplex. Not sure how we useful that is for dbus-interface.\n\nhttps://www.dmtf.org/sites/default/files/standards/documents/DSP2046_2021.2.pdf",
      "parentUuid": "13a9c374_9ff1ef5c",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccdc45dc_4c46d291",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-11T16:16:49Z",
      "side": 1,
      "message": "\u003e One with the possible bifurcation modeling the root complex and one at the device level (that bifurcation used).\n\nI don\u0027t really know how bifurcation is related to the device (or slot) at all.  When a slot isn\u0027t populated I guess you have a \"maximum remaining lanes\" concept which tells you how many of the Lanes could be assigned to a device if you were to insert one, but otherwise when a device (or slot) is active you really only have \"number of physical lanes\" and \"number of active lanes\".  I don\u0027t know if the \"maximum remaining lanes\" information could be obtained from however you represent bifurcation at the RC/Switch level.\n\nIt does seem like you should have a separate interface to represent a RC.  We need to also consider is how would you model a PCIe Switch.  \n\nThe root complex has a fixed number of lanes and it can bifurcate in a number of different lane combinations.  Those lane combinations are from a combination of chip-level support AND board wiring to slots.  Should a RC only tell you the chip-level and then you also need to piece together board wiring to figure out the subset of possibilities?  That doesn\u0027t really seem like a great abstraction.  So, I think it is best if two identical processors gave different bifurcation information depending on which board they were plugged into.\n\nA PCIe Switch is a PCIe device with N lanes input, M channels out each having {M_1, M_2, ... M_N} lanes.  \u0027sum(M_i) \u003e\u003d N\u0027 in most cases.  Sometimes there is also bifurcation options in a switch as well, but I think that is rarer.\n\nFor a PCIe Switch you also should consider multi-host configurations.  Many PCIe switches can be configured to have 2 (or more) uplink channels.  See https://docs.broadcom.com/doc/12351853 as an example.  Also https://docs.broadcom.com/doc/12351860 mentions having \"dual upstream\" support where you can combine two 8x ports from the RC to aggregate 16x worth of bandwidth to a large swath of downstream 8x devices.\n\nUnfortunately, there is still a lot of complexity to work through on how best to model the PCIe bifurcation information.",
      "parentUuid": "338f659b_af5234d8",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0e8c520_64e95874",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeSlot.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2021-11-12T00:38:48Z",
      "side": 1,
      "message": "Our goal is to handle cases where there could be different bifurcation depending on the specific system configuration, e.g. presence or absence of bifurcation risers[0], PCIe devices that might bifurcate internally, etc. Switches could also be important in the future, but we don\u0027t need to model them immediately for our use case.\n\nWe want to have Inventory objects that express the desired bifurcation of each of these pieces of hardware so that we can inform the BIOS what bifurcation configuration it should apply to the root complex.\n\n[0] Example: https://www.density.sk/product/pcie-bifurcated-riser-cable/",
      "parentUuid": "ccdc45dc_4c46d291",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 33,
        "endChar": 0
      },
      "revId": "71a15f1f9cef746dd0bc234eab21f0df4ce8c4ae",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}