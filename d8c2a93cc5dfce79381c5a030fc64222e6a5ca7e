{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0a2a95d5_ee1506c8",
        "filename": "yaml/xyz/openbmc_project/PLDM/Event.errors.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-22T16:37:33Z",
      "side": 1,
      "message": "Please use the new event design.\n\nI don\u0027t see why we would add PLDM-specific events for sensor errors.  We need to be able to map these to Redfish events, which there is already support for.\n\nPlease see `yaml/xyz/openbmc_project/Sensor/Threshold.events.yaml`.",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8c2a93cc5dfce79381c5a030fc64222e6a5ca7e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f203ee8a_f5b3f52e",
        "filename": "yaml/xyz/openbmc_project/PLDM/Event.errors.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2024-11-25T12:02:48Z",
      "side": 1,
      "message": "I want to use a Sensor Event to represent the PMBus status word (16-bit). I chose to implement it with a Numeric Sensor rather than a State Sensor because a Numeric Sensor\u0027s PRESENT_READING can support data types larger than 16 bits, allowing me to represent the PMBus status word with a single sensor. On the other hand, a State Sensor is limited to 8 bits (sensorOffset). Additionally, this mechanism does not involve thresholds, which is why it is not included in sensor/threshold.\n\nCould you suggest whether it\u0027s better to implement this using a State Sensor or use  OEM Commands to approach?",
      "parentUuid": "0a2a95d5_ee1506c8",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8c2a93cc5dfce79381c5a030fc64222e6a5ca7e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5003615_b7f22188",
        "filename": "yaml/xyz/openbmc_project/PLDM/Event.errors.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-25T15:06:40Z",
      "side": 1,
      "message": "\u003eCould you suggest whether it\u0027s better to implement this using a State Sensor or use OEM Commands to approach?\n\nI don\u0027t know what a \"state sensor\" is.\n\n\"OEM Commands\"?  Do you mean OEM PLDM commands or do you mean OEM dbus interfaces?  If you make OEM dbus interfaces you\u0027ll never be able to upstream any of the related code.",
      "parentUuid": "f203ee8a_f5b3f52e",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8c2a93cc5dfce79381c5a030fc64222e6a5ca7e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8e9eac9_020e9d2c",
        "filename": "yaml/xyz/openbmc_project/PLDM/Event.errors.yaml",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2024-11-26T01:10:07Z",
      "side": 1,
      "message": "The scope I want to discuss is about the BMC receiving PLDM PlatformEventMessage from other devices (PLDM Terminus) to enable the BMC to log the device\u0027s VR power fail (PMBus status word). Here, the state sensors refer to PLDM State Sensors:\n\nA PLDM state sensor that returns values from only a single state set is referred to as a simple state sensor.\nA state sensor that returns values from more than one state set is referred to as a composite state sensor.\n\nAlthough this is a standard feature defined in DSP0248, it seems that upstream OpenBMC has not implemented it yet.\n\nThe OEM Commands mentioned here refer to the approach taken by project yv4. Although I haven’t studied it in depth, I’ve heard that it uses an OEM-specific method, and the related yv4 code has indeed not been merged into the upstream.",
      "parentUuid": "f5003615_b7f22188",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "d8c2a93cc5dfce79381c5a030fc64222e6a5ca7e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ],
  "submitRequirementResults": []
}