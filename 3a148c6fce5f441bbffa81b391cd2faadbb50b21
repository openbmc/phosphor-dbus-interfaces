{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "02fd5618_b6e6c5f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Addressed and replied to your comments. Thanks",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c63c2557_3a2dbbac",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "I\u0027m pretty confused why this isn\u0027t just a bool, and this description in the documentation doesn\u0027t help me understand at all.\n\nI think the intent is better met with something like\n\nUpperCriticalThreshold: double\nUpperCriticalAsserted: bool\nUpperWarningThreshold: Double\nUpperWarningAsserted: bool\n\nif we\u0027re now putting all the thresholds in one interface.  As written, I suspect you\u0027ve mostly just recreated the Properties interface (which already can return a dict of propertyname, value.)",
      "range": {
        "startLine": 12,
        "startChar": 10,
        "endLine": 12,
        "endChar": 66
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4772c4ff_b94b00f2",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-20T18:44:36Z",
      "side": 1,
      "message": "We then have to create 10 (now) properties and probably more as someone adds new threshold names.  I suspect most metrics/sensors only use ~4 threshold levels.\n\nWe also have to define a way to indicate \"this threshold doesn\u0027t exist\".  The current way we do that was using NaN, which we were told that wasn\u0027t desirable...  So, Jagpal went with this explicit dictionary.",
      "parentUuid": "c63c2557_3a2dbbac",
      "range": {
        "startLine": 12,
        "startChar": 10,
        "endLine": 12,
        "endChar": 66
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed108f9_fce04240",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-20T19:21:59Z",
      "side": 1,
      "message": "\u003e We then have to create 10 (now) properties and probably more as someone adds new threshold names.  I suspect most metrics/sensors only use ~4 threshold levels.\n\nI agree, and would really expect most sensors only use 2 levels (warning and critical) because that was all that existed for a long time.\n\nSure, you\u0027d have to add a property for every new level, but in the current method to add an additional level, you still have to add the enum, so it\u0027s not like it saves us a code review/update all the daemons round, or lets us support arbitrary level names as written.  I guess I just don\u0027t see the advantage of making it more complex.\n\n\u003e \n\u003e We also have to define a way to indicate \"this threshold doesn\u0027t exist\".  The current way we do that was using NaN, which we were told that wasn\u0027t desirable...  So, Jagpal went with this explicit dictionary.\n\nThe problem wasn\u0027t directly with NAN it was that it was one of two ways to represent that a property wasn\u0027t filled;  You could represent a non-existent threshold by simply omiting the interface itself, or omitting one of two properties, or setting one of two properties to NAN, or setting both properties to NAN.  Handling all those cases was a pain.  This interface smashes all thresholds into one interface, which solves that problem, regardless of whether a map is used, because NAN can just be used directly, and there\u0027s no other way to represent properties non-existence.\n\nA map in a property is a pain to use because this interface now doesn\u0027t\u0027 look like anything else, so in most code, you end up now having to pull the individual parameters out in custom to thresholds code.  There\u0027s already a lot of code that can pull out an interface of named properties, so making it look like a bunch of properties on one interface means we\u0027re not doing something special for thresholds.\n\nThe other advantage of using properties is that you can have implementations that change thresholds at runtime.  Property.Set can be used to update a single threshold.  As written you\u0027d have a do a read-\u003emodify-\u003ewrite, which isn\u0027t easy to handle in code, and has data races if the data is updated in between a read and a write.",
      "parentUuid": "4772c4ff_b94b00f2",
      "range": {
        "startLine": 12,
        "startChar": 10,
        "endLine": 12,
        "endChar": 66
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b4978cc_d6de249f",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "nit: I\u0027m not positive if we want \u0027const\u0027 or \u0027readonly\u0027 for this.  \u0027const\u0027 means you can\u0027t change the value, even internally, and no signals will be emitted.  I can conceive of implementations that might want to adjust metric thresholds based on other activity.\n\nThis is probably fine to leave as-is for now or change to readonly now.  We can easily change this flag in the future.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf9225a9_4649a87b",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b4978cc_d6de249f",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93eeca6_77827704",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "Why is this an array?  We can\u0027t be over the Upper and under the Lower at the same time, right?\n\nSuppose we already had Critical-Upper asserted and we, in one polling interval, switch to Warning-Lower.  I would expect 2 signals: one to deassert the Critical-Upper and one to assert the Warning-Lower.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fde93d18_8bf79467",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "This indicates the upper bound and lower bound (range) for the threshold level. Also, there is no Critical-Upper, there is just Critical, Upper bound and lower bound just defines the range for each threshold level.\n\nOther way to get this info would be to query the threshold interface using the ThresholdType from signal parameters. Let me know if you think thats better rather than sending it as part of signal?",
      "parentUuid": "b93eeca6_77827704",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b08246_f971323c",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T22:29:33Z",
      "side": 1,
      "message": "I don’t really understand the utility of that. It means I have to pick apart this array and do math based on Value from the signal in order to know what’s going on. I suspect typical usage is going to be:\n\n“I see that Critical Upper is now asserted” and do some reaction to that. Having the value in the signal is extra gravy.  \n\nAsking the consumer to do math from the signal values to know what is going on is going to end up with some boilerplate code copied around in order to reverse this information back out of the signal.",
      "parentUuid": "fde93d18_8bf79467",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7da4b683_9d4aae81",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T22:31:20Z",
      "side": 1,
      "message": "I would suggest changing this to just a Bound property.  If someone needs the ranges they can read that property.  We don’t need to send it along in each signal.",
      "parentUuid": "e6b08246_f971323c",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8d46f9e_48533b3a",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T22:59:33Z",
      "side": 1,
      "message": "Also, while we are making a change, let\u0027s change the order in the signal.\n\n1. Type\n2. Bounds\n3. Status\n4. Value",
      "parentUuid": "7da4b683_9d4aae81",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0680e1e6_46ef1d8c",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T23:00:34Z",
      "side": 1,
      "message": "Having this signal param provides the user the upper and lower bound for the threshold assertion. My understanding is it has no special value but just extra info, it was there in original Threshold specification, but yes, user can query the threshold interface to get these bounds.\n\nThe bounds already exist in threshold interface as part of Value property. So, would just drop this.",
      "parentUuid": "7da4b683_9d4aae81",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c650871b_8e465084",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "\u003e Having this signal param provides the user the upper and lower bound for the threshold assertion. \n\nIs there anything that requires both the upper and lower bounds on an assertion of a single?  In the past, what\u0027s been required is:\n\nThe name and direction of the threshold we crossed (ideally they\u0027d be combined).\nWhether or not the threshold got asserted or deasserted\nThe value that the sensor read that crossed the value.\n\nAnything else is just kind of inventing complexity IMO.\n\n\nOverall, I suspect this interface would be a lot simpler with defining 10 signals:\nWarningAsserted\nWarningDeasserted\nCriticalAsserted\nCriticalDeasserted\n.....\n\nwith each signal only containing the value that caused the crossing.  Making dictionaries of these things seems like a good idea, but really messes with the ability to define DBus match expressions properly.  For example, on the interface you published, try to write a match that only fires when and upper critical threshold is posted.  Even if you could do it, it\u0027s going to be complicated.  Versus if the threshold is a named Property, it\u0027s significantly easier, you can just match on the interface name and member.",
      "parentUuid": "0680e1e6_46ef1d8c",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b51ace8d_f14783bd",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "?????  What does a \"none\" level represent?  \"None\" is already effectively handled by just omitting the interface.",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 52,
        "endChar": 37
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2104d48a_3ba50cf3",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-20T18:44:36Z",
      "side": 1,
      "message": "I suspect this was needed so that the Asserted property could indicate None?",
      "parentUuid": "b51ace8d_f14783bd",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 52,
        "endChar": 37
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b711308b_504701c6",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-20T19:21:59Z",
      "side": 1,
      "message": "Why would a threshold level be \"none\"?  At a minimum, the description doesn\u0027t call out what it represents, given it\u0027s non-obvious based on the name. At most, I suspect there\u0027s no reason for this to exist and could be removed.",
      "parentUuid": "2104d48a_3ba50cf3",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 52,
        "endChar": 37
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d39c995_4b45d6a6",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "nit, typo.",
      "range": {
        "startLine": 64,
        "startChar": 35,
        "endLine": 64,
        "endChar": 43
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a49a1e2_957bbcf0",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "the range would generally be a numerical value, I suspect this needs to be changed to \"direction\"\n\nAlso, the way you\u0027ve phrased this makes it really sound like you\u0027re handling hysteresis, when upper/lower is generally used to represent whether it\u0027s a high critical or a low critical.",
      "range": {
        "startLine": 70,
        "startChar": 39,
        "endLine": 70,
        "endChar": 44
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ac49338_6580ba42",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 78,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:15:45Z",
      "side": 1,
      "message": "Do we need to publish the hysteresis on any of these?  I forget if it\u0027s on the old one.  If it\u0027s not in the old one, it\u0027s fine to omit here.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d82769_791e6475",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "nit: I\u0027m not sure if this is interesting information.  It could change in the future.",
      "range": {
        "startLine": 2,
        "startChar": 63,
        "endLine": 3,
        "endChar": 56
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa6b5ae3_612484c6",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Done, removed specific examples.",
      "parentUuid": "b3d82769_791e6475",
      "range": {
        "startLine": 2,
        "startChar": 63,
        "endLine": 3,
        "endChar": 56
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2ccbc6c_3ef16a21",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-19T23:17:48Z",
      "side": 1,
      "message": "Generally in telemetry it\u0027s better if all counters don\u0027t support an explicit reset, and clients rely on the count incrementing as being an event.  This avoids problems in architecture where one client might reset a reboot count before another client has read it.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f06d4f6_c9c80b9c",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-20T18:44:36Z",
      "side": 1,
      "message": "FWIW, I think the purpose of this interface definition is so that we could implement the ManagerDiagnosticData.ResetMetrics action.",
      "parentUuid": "e2ccbc6c_3ef16a21",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21d47fc8_cf274778",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 6,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-09-20T19:21:59Z",
      "side": 1,
      "message": "Do we really want to support that though?  I don\u0027t have context on why DMTF added that action, if I was in the meeting I would\u0027ve argued against it, but from a generalized \"reset all telemetry\" that seems like a bad idea to have?\n\nMy opinion here isn\u0027t that strong if we want to keep it, I just feel like it allows one client to monopolize a set of telemetry, effectively making other callers data useless, which somewhat defeats the open nature of what we\u0027re trying to do.  It might be a difference in requirements between an open bmc stack, and a corporate stack, where there\u0027s likely only one caller into this telemetry.",
      "parentUuid": "8f06d4f6_c9c80b9c",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7804ff4_639915f0",
        "filename": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "Are you going to follow up with the new constants support in a separate commit?",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9569a0e4_fb507562",
        "filename": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Yes, we will make that addition to interface separately. Will float a PR for that.",
      "parentUuid": "b7804ff4_639915f0",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}