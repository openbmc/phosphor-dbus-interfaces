{
  "comments": [
    {
      "key": {
        "uuid": "38088b41_ec218cfc",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-28T15:25:10Z",
      "side": 1,
      "message": "BandwidthPercent BlocksReadLifetime BlocksWrittenLifetime BlocksReadCurrent BlocksWrittenCurrent RemainingSpareBlockPercentage, PredictedMediaLifeLeftPercent\n\nAll seem like they would be updated a lot, and likely should be sensors, not individual properties on the memory schema",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "113e5b55_c7ffd323",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000656
      },
      "writtenOn": "2020-10-01T16:12:21Z",
      "side": 1,
      "message": "Good suggestion. Let me try this one.",
      "parentUuid": "38088b41_ec218cfc",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "222b1e5b_d50a9b55",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-10-01T16:23:12Z",
      "side": 1,
      "message": "They are part of the memory schema if we\u0027re talking Redfish. If they were part of sensors we\u0027d need some weird lookup to pull these out of sensors schema and into memory. Also, I don\u0027t think we have a unit of Blocks for sensors, and I\u0027m not sure that makes sense either?",
      "parentUuid": "113e5b55_c7ffd323",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a265b24_783a9fc8",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000164
      },
      "writtenOn": "2020-10-01T16:24:33Z",
      "side": 1,
      "message": "https://github.com/openbmc/bmcweb/blob/0f8472a78ec387efea09c4494e3a664cb9ffd0e8/static/redfish/v1/schema/MemoryMetrics_v1.xml#L131",
      "parentUuid": "222b1e5b_d50a9b55",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38b9c39_f70f7cd6",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-01T16:33:54Z",
      "side": 1,
      "message": "The Redfish APIs would be tough to write, but it means that we get all the telemetry/aggregation stuff for \"free\".  Also, we already know how to write the redfish APIs for this stuff, and if we defined a consistent path naming, it seems like it would be pretty simple.",
      "parentUuid": "9a265b24_783a9fc8",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4113462e_b54a3975",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-01T16:43:05Z",
      "side": 1,
      "message": "Another, half-baked idea: What if this interface just produced object paths that were pointers to the sensors that did this work.  That way, we\u0027d avoid a little bit of the complexity, but would still have an interface that we could access to get the complete \"memory metrics\" picture.",
      "parentUuid": "b38b9c39_f70f7cd6",
      "range": {
        "startLine": 28,
        "startChar": 12,
        "endLine": 28,
        "endChar": 41
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63b508b3_958ff0ea",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-09-28T15:25:10Z",
      "side": 1,
      "message": "Most of these seem like they would be better as log events rather than directly accessible struct members.  Is there a use case for directly accessing the CorrectableEccError bool aside from logging?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c09636e_afad84a2",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000656
      },
      "writtenOn": "2020-10-01T16:12:21Z",
      "side": 1,
      "message": "Yes all of these properties are being used for logging purpose. Can you please explain why it is better to log as events rather than bool properties?",
      "parentUuid": "63b508b3_958ff0ea",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77afe15e_f3b5b9c0",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-01T16:49:18Z",
      "side": 1,
      "message": "Because it\u0027s much easier to track multiples of them, and it\u0027s designed to keep information around in a persistent circular buffer.  It also tracks the time the event occurred, and produces a user facing log.  With that said, it looks like some of these are coming from the redfish schema?  It might make sense to have both in that case?",
      "parentUuid": "6c09636e_afad84a2",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb40dc60_b0957c6c",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000656
      },
      "writtenOn": "2020-10-01T17:25:23Z",
      "side": 1,
      "message": "All of these properties are coming from refish. And these properties are not coming from sensors in lower layer. Also thermal and media errors are being sent as events(which is separate implementation). so if there is any media/thermal error present on device, they will be logged.\nAlso all the errors are sent with priorities and severity.",
      "parentUuid": "77afe15e_f3b5b9c0",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2359af8_314c4807",
        "filename": "xyz/openbmc_project/Inventory/Item/PersistentMemory/MemoryMetrics.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2020-10-01T17:54:36Z",
      "side": 1,
      "message": "\u003e All of these properties are coming from refish. And these properties are not coming from sensors in lower layer.\n\nThere\u0027s no such thing as a \"sensor\" in a lower layer.  A \"sensor\" is just a way to abstract things that produce a finite value in the number realm, which is what these values are.\n\n\n\u003e Also thermal and media errors are being sent as events(which is separate implementation). so if there is any media/thermal error present on device, they will be logged.\n\nThat\u0027s part of the thing.  If these were sensors, the \"thermal\" events would just get rolled in as threshold events on said sensor, which would be much more usable to the rest of the system.  as is, we\u0027re separating the value, threshold, and logging into their own completely separate implementations, which feels more complex.\n\n\u003e Also all the errors are sent with priorities and severity.\n\nI\u0027m not following what this means.",
      "parentUuid": "cb40dc60_b0957c6c",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 65,
        "endChar": 19
      },
      "revId": "8e5e09b1c70d8ad5c24569b6f87c2a7423a0ce54",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}