{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21a1bfb9_04f82e2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T00:32:00Z",
      "side": 1,
      "message": "New features seem like the wrong place to start broaching the \"EM config should use\" PDI architectural thing.  For leak detection, lets just add it similar to how every other new feature as been handled (including intrusion detection, which is darn close to identical to this) and get it merged.  If we want to then AFTER or treat this patch as aspirational to go chase the PDI stuff down and sort out all the consistency issues, we can, but we shouldn\u0027t treat concrete interfaces as blocking for leak detection.\n\nThe reality is that today the EM codebase can\u0027t produce concrete types for a given interface, and can\u0027t produce typed enums.  Until it can, we should avoid checking in things like this.",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7bbd653_8e11a32d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-26T02:13:09Z",
      "side": 1,
      "message": "\u003e New features seem like the wrong place to start broaching the \"EM config should use\" PDI architectural thing\n\nI think this is the opposite (and this isn\u0027t the first one that has been proposed in the last few weeks).  This was to allow other daemons to consume EM configs in a type-safe way, not for EM to publish configs.\n\n\u003e The reality is that today the EM codebase can\u0027t produce concrete types for a given interface, and can\u0027t produce typed enums. Until it can, we should avoid checking in things like this.\n\nI fully expected this to be a concern here and hoped the EM maintainers would weigh in.  EM _can_ create typed enums like this, because a dbus enum is just a string, but it requires the strings to be fully qualified strings and EM typically makes \"short names\".",
      "parentUuid": "21a1bfb9_04f82e2d",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35872adf_69a51345",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T02:35:27Z",
      "side": 1,
      "message": "\u003e \u003e New features seem like the wrong place to start broaching the \"EM config should use\" PDI architectural thing\n\u003e \n\u003e I think this is the opposite (and this isn\u0027t the first one that has been proposed in the last few weeks).  This was to allow other daemons to consume EM configs in a type-safe way, not for EM to publish configs.\n\u003e \n\u003e \u003e The reality is that today the EM codebase can\u0027t produce concrete types for a given interface, and can\u0027t produce typed enums. Until it can, we should avoid checking in things like this.\n\u003e \n\u003e I fully expected this to be a concern here and hoped the EM maintainers would weigh in.  EM _can_ create typed enums like this, because a dbus enum is just a string, but it requires the strings to be fully qualified strings and EM typically makes \"short names\".\n\nEnums is one concern.  For that neither of my immediate ideas to fix this seem like a good idea.\n1. Break all existing configs, and require a type be assigned to every string entry representing an enum.  This requires config writers to be dbus experts, which we should avoid if we can.\n2. Add a static entry-\u003etype map of all possible types.  Considering even just getting a concrete accounting of the json configs has been difficult, this seems hard and would make forked-development more difficult, as every new type would require a code change.\n\nAny other options for enums I\u0027m not thinking of?\n\n\nThe other larger concern is integer/string types.  EM will happily publish a string, a float, and a uint64 from the same interface, property name.  It loads everything through a variant to coerce to the type the reactor is looking for.  I\u0027m not really sure how to handle that in a reactor if this file defines things as concrete types.  FWIW, in Jagpals leak detector daemon I see he found the same problem.\n\nYes... this design is insane.  If we have ideas on how to make it better absolutely, I\u0027m in (will probably help), but i haven\u0027t had an idea that didn\u0027t break the world or require a mapping of all possible types.",
      "parentUuid": "e7bbd653_8e11a32d",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d06894a_ccdf9926",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-11-26T17:19:18Z",
      "side": 1,
      "message": "\u003e Any other options for enums I\u0027m not thinking of?\n\nYou can use the schema to specify valid values for the strings.  I thought that is what Jagpal attempted to do in the EM repository.\n\njson-schema also supports `enum` so you can just list the allowed values.\nhttps://github.com/openbmc/sdbusplus/blob/2a12ae12455bfa1cdf92dff21c16757b1f126c8f/tools/sdbusplus/schemas/events.schema.yaml#L72\nhttps://json-schema.org/understanding-json-schema/reference/enum\n\n\u003e Break all existing configs, and require a type be assigned to every string entry representing an enum. \n\nI don\u0027t know why we have to break existing configs if we do this for new configs (and backed by the schema in EM).  Existing configs / schemas can be refactored over time.\n\n\u003e This requires config writers to be dbus experts, which we should avoid if we can.\n\nWe already require dbus interface names sprinkled through the configs.  I\u0027m not sure how much of an \"expert\" we need them to be if we use the json-schema to specify \"this property must be one of these values\".  The errors from json-schema are fairly straight-forward.\n\n\u003e The other larger concern is integer/string types. EM will happily publish a string, a float, and a uint64 from the same interface, property name. It loads everything through a variant to coerce to the type the reactor is looking for. I\u0027m not really sure how to handle that in a reactor if this file defines things as concrete types. FWIW, in Jagpals leak detector daemon I see he found the same problem.\n\nYes, I recognize this problem.  What I\u0027ve been trying to do here is to make the dbus type the expected type from entity-manager, but I know that isn\u0027t a solid requirement and can easily be changed by someone slipping in a \".0\" into their config.  I think those configs can just be fixed as we find them until we get a better solution.\n\nI wrote this already in the README under Configuration to make it clear that what is found here is just for EM compatibility and shouldn\u0027t be taken as a best-practices.  https://github.com/openbmc/phosphor-dbus-interfaces/tree/master/yaml/xyz/openbmc_project/Configuration",
      "parentUuid": "35872adf_69a51345",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a1d3d9_9f77a86a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-04T18:24:47Z",
      "side": 1,
      "message": "The proposed schema definition for GPIOLeakDetector uses the fully qualified enum names from PDI. Please refer to https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75734.\n\nAlso, i am updating the PR for LeakDetector to use the PDI auto-generated code for EM configuration get/updates. Change has been pushed, pending testing.",
      "parentUuid": "2d06894a_ccdf9926",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b33a748_a843b5f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-14T00:21:24Z",
      "side": 1,
      "message": "LeakDetector latest patch uses PDI generated bindings to get EM configuration now.",
      "parentUuid": "d4a1d3d9_9f77a86a",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aabc9e6a_9bc2d909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T00:31:55Z",
      "side": 1,
      "message": "\u003e You can use the schema to specify valid values for the strings.\n\nThis doesn\u0027t solve the problem.   It just forces the EM config files to include the DBus namespace, which given the design goal of \"Config file authors aren\u0027t DBus experts\" somewhat defeats the point as the patchset is written.",
      "parentUuid": "6b33a748_a843b5f6",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dc3842a_45d07d3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T00:35:35Z",
      "side": 1,
      "message": "\u003e New features seem like the wrong place to start broaching the \"EM config should use\" PDI architectural thing.\n\nDidn\u0027t see this answered anywhere.",
      "parentUuid": "aabc9e6a_9bc2d909",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1a48740_a96354ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T00:42:33Z",
      "side": 1,
      "message": "\u003e LeakDetector latest patch uses PDI generated bindings to get EM configuration now.\n\n\n\nTo be clear, this is great progress, now just need to figure out how to get those EM interfaces created properly in EM (not by injecting PDI stuff into config files).",
      "parentUuid": "8dc3842a_45d07d3a",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f05420a_3e4b69cb",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T00:32:00Z",
      "side": 1,
      "message": "EM is not currently capable of producing these style of enums with a namespace.  Not really sure what to do here, but if we\u0027re really going to start modeling the EM configuration namespace here, we shouldn\u0027t start with a new feature, we should start with something that exists.",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "937a7d21_fe9d0447",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-05T08:01:10Z",
      "side": 1,
      "message": "I have used fully qualified enum values (with namespace) in the json schema https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75734.",
      "parentUuid": "1f05420a_3e4b69cb",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd59482d_450c2032",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T00:32:00Z",
      "side": 1,
      "message": "same here.",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9378f5e_7da4f75b",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-05T08:01:10Z",
      "side": 1,
      "message": "I have used fully qualified enum values (with namespace) in the json schema https://gerrit.openbmc.org/c/openbmc/entity-manager/+/75734.",
      "parentUuid": "dd59482d_450c2032",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5977dcd_ea58d544",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-12-14T00:45:09Z",
      "side": 1,
      "message": "Which is incorrect.  Config files are written by humans not familiar with DBus or PDI, they should not include PDI internals in the config file itself.",
      "parentUuid": "f9378f5e_7da4f75b",
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "386472f6_b2d92b45",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-11-26T00:32:00Z",
      "side": 1,
      "message": "This could use some more description.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 50
      },
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc5557c5_2d796c86",
        "filename": "yaml/xyz/openbmc_project/Configuration/GPIOLeakDetector.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-12-05T08:01:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "386472f6_b2d92b45",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 50
      },
      "revId": "0d609b9a5a2cf9a7c9d4180e1a38139e12d080dc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}