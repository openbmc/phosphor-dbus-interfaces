{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06ea808c_a5f22751",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-18T15:48:38Z",
      "side": 1,
      "message": "nit: remove needless space",
      "range": {
        "startLine": 7,
        "startChar": 6,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "e66809314ee7910d6d8ce3fb3e0a5a4faddd7764",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d63a2a25_84fbf19a",
        "filename": "yaml/xyz/openbmc_project/Sensor/Type.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-13T11:58:25Z",
      "side": 1,
      "message": "nit: I think this is the other way around. Objects implementing Sensor.Value may also implement Sensor.Type.",
      "revId": "e66809314ee7910d6d8ce3fb3e0a5a4faddd7764",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26dbfdb6_1f74c724",
        "filename": "yaml/xyz/openbmc_project/Sensor/Type.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 5,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-18T15:48:38Z",
      "side": 1,
      "message": "Yes.  Sensor.Type _requires_ Sensor.Value.  Sensor.Value _may_ implement Sensor.Type.\n\nDon\u0027t use non-standard directives like \"ideally\".  Follow ISO standards for requirements (copied from Redfish spec for your reference):\n\n\u003e The terms \"shall\" (\"required\"), \"shall not\", \"should\" (\"recommended\"), \"should not\" (\"not recommended\"), \"may\", \"need not\" (\"not required\"), \"can\" and \"cannot\" in this document are to be interpreted as described in ISO/IEC Directives, Part 2, Clause 7.",
      "parentUuid": "d63a2a25_84fbf19a",
      "revId": "e66809314ee7910d6d8ce3fb3e0a5a4faddd7764",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8020fa81_ad31d554",
        "filename": "yaml/xyz/openbmc_project/Sensor/Type.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-18T15:48:38Z",
      "side": 1,
      "message": "I don\u0027t understand why we want to implement this on the BMC.  Can you add some use cases?  All daemons today expect \"Zero\" type sensors.  If we start adding other type sensors, daemons consuming sensors now need to be aware and be able to handle them.  This sounds like needless complexity.",
      "revId": "e66809314ee7910d6d8ce3fb3e0a5a4faddd7764",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03bf6175_cbe90254",
        "filename": "yaml/xyz/openbmc_project/Sensor/Type.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-18T15:48:38Z",
      "side": 1,
      "message": "Please keep these in alphabetical order or \"intuitively used\" order.\n\nUnknown, Zero, Delta, Headroom",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "e66809314ee7910d6d8ce3fb3e0a5a4faddd7764",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}