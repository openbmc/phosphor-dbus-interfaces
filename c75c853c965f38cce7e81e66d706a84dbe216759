{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1d839ad5_72207c15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2025-07-17T05:18:58Z",
      "side": 1,
      "message": "Just doubts:\n\nI was under the impression that the Failover interface was intended to be generic and could be used in different contexts as needed. So, wouldn\u0027t it make sense for FailoverInProgress to be part of that generic interface? Or is the intention to keep the failover progress status within the specific implementation, like the Redundancy interface?",
      "revId": "c75c853c965f38cce7e81e66d706a84dbe216759",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74e8a38c_024a83af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2025-07-17T15:04:38Z",
      "side": 1,
      "message": "There\u0027s already FailoverAllowed and FailoverImminent on the redundancy interface, so I was thinking to keep them all together. \n\nAlso, I\u0027m going to need FailoverInProgress on /xyz/openbmc_project/state/bmc1 so that the new passive BMC can check that when it comes back from the reset.  The redundancy interface is already on that path.  I\u0027m not sure yet if I ever want the failover interface on that path.",
      "parentUuid": "1d839ad5_72207c15",
      "revId": "c75c853c965f38cce7e81e66d706a84dbe216759",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0de7cea_a2814694",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2025-07-18T05:44:34Z",
      "side": 1,
      "message": "Hmm, I don\u0027t have a strong preference. In my opinion, everything should ideally fall under the Failover interface.\n\nHowever, I understand that the SiblingService also needs to represent certain states, as you mentioned above. The challenge is that this approach forces us to define the Failover methods in SiblingService, and since Failover has pure virtual functions, we would need to return errors indicating that these methods are unsupported in the SiblingService and should be supported only RBMC service.\n\nI am ok with it by considering current limitation.",
      "parentUuid": "74e8a38c_024a83af",
      "revId": "c75c853c965f38cce7e81e66d706a84dbe216759",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "424a088f_6892a486",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2025-07-18T13:38:03Z",
      "side": 1,
      "message": "If this would be gating the merge then I could move it back.  It just works better from a code persective this way.",
      "parentUuid": "c0de7cea_a2814694",
      "revId": "c75c853c965f38cce7e81e66d706a84dbe216759",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}