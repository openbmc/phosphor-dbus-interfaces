{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8959aa0_e4d2f7ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T01:31:35Z",
      "side": 1,
      "message": "CMOS clear is currently part of ipmid(maintained as global variable )\nhttps://github.com/openbmc/phosphor-host-ipmid/blob/master/chassishandler.cpp#L1848 \nIs the plan to use that variable to set the property ?",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e03a76ba_3207368f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-18T02:47:58Z",
      "side": 1,
      "message": "This variable is not used in the current design; the properties are get and set via OEM IPMI commands.",
      "parentUuid": "e8959aa0_e4d2f7ff",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a1c2c08_904a0357",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-16T07:58:39Z",
      "side": 1,
      "message": "Hi @patrick@stwcx.xyz,\nCould you please help review this Gerrit change?\nThis change adds the necessary interface and property for the OEM meta command get/set boot order.",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efc8ab87_1a1d73d7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-17T18:51:16Z",
      "side": 1,
      "message": "I need to know more about the intended implementation here in order to make sure we get appropriate level of feedback.\n\nSomeone also previously proposed this: https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/78214\n\nIs this one related?",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62e3d7c0_a7db94d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-18T01:58:16Z",
      "side": 1,
      "message": "This implementation is unrelated to  https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/78214.\n\nIt\u0027s intended for the OEM meta IPMI get/set boot order command. \nDuring system boot, the BIOS issues the get/set boot order command to retrieve the boot order stored in the BMC, and then applies it to configure the boot options.\n\nHere, \"CMOS\" is a flag indicating whether to clear CMOS, and \"bootSequence\" represents the boot device order, with values such as \"USB_DEV\", \"NET_IPV6\", or \"SATA_HDD\", etc.",
      "parentUuid": "efc8ab87_1a1d73d7",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b82f4fc4_37322cbf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T04:14:37Z",
      "side": 1,
      "message": "And also, is there any plans from meta to use redfish host interface for boot option, boot order.\nThere is a design MR in review https://gerrit.openbmc.org/c/openbmc/docs/+/79327.\nUsing this bios can GET/POST/PATCH boot order to bmc.",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a3ea587_c358309a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-23T07:55:37Z",
      "side": 1,
      "message": "@patrick@stwcx.xyz @prithvi24pai@gmail.com\nHi, if there are any remaining issues after the review, please let me know if anything else needs to be updated. Thanks!",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1517041c_95734651",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-27T10:16:23Z",
      "side": 1,
      "message": "One more thing to consider should we add all the flags under single interface. Example: yaml/xyz/openbmc_project/Control/Boot/Flags.interface.yaml\nAll the flags coming in future could go to same interface",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2256e101_2e58d5c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-27T10:16:39Z",
      "side": 1,
      "message": "One more thing to consider should we add all the flags under single interface. Example: yaml/xyz/openbmc_project/Control/Boot/Flags.interface.yaml\nAll the flags coming in future could go to same interface",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2865d671_583c3817",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-07-01T13:23:34Z",
      "side": 1,
      "message": "https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/81554 @zoey.yj.chung.wiwynn@gmail.com would this be helpful for you ? If you have any suggestions please let me know I can re-work and get back",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a175bf5_b1f8cace",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-07T01:24:32Z",
      "side": 1,
      "message": "Hi @prithvi24pai@gmail.com.\nThank you for your help! I will use this interface for the implementation.",
      "parentUuid": "2865d671_583c3817",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf7fbbe_70e9c240",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-07T03:11:41Z",
      "side": 1,
      "message": "Hi @prithvi24pai@gmail.com\n\nI tried to make the bootOrder property persistent through phosphor-settings (similar to this change https://gerrit.openbmc.org/c/openbmc/openbmc/+/80856), but the build failed.\n\nIt seems that when I include the xyz.openbmc_project.Control.Boot.BootOrder interface in the override YAML, the phosphor-settings tries to instantiate the corresponding C++ class. However, because the D-Bus interface YAML defines a method (e.g., CreateBootOption) that is not implemented in the C++ code, the generated class is abstract and cannot be instantiated, causing the build to fail.\n\nDo you have any suggestions?",
      "parentUuid": "8a175bf5_b1f8cace",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4202d59b_8267ab88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-07T03:37:34Z",
      "side": 1,
      "message": "I will modify this to use the flags interface instead. Thank you!",
      "parentUuid": "2256e101_2e58d5c2",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a78873aa_b65c7b2d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-07-07T05:01:20Z",
      "side": 1,
      "message": "The backend implementation of this is planned to be done in bios-settings-manager. Do you have any difference of opinion ? Is it okay if its part of bios-settings-manager ? I can share the code in case you are interested.",
      "parentUuid": "3cf7fbbe_70e9c240",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8351ccb_ac74629f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-07T10:04:59Z",
      "side": 1,
      "message": "We are not currently using bios-settings-manager. As we are urgently working to fix the issue, would it be acceptable for us to use our current approach as a short-term solution for now, and further optimize it as part of a long-term solution in the future?",
      "parentUuid": "a78873aa_b65c7b2d",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e31baf0_d4ae5ab4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-07-08T03:15:25Z",
      "side": 1,
      "message": "Do you want me to remove the method from the interface ?",
      "parentUuid": "b8351ccb_ac74629f",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f671e87_dde66464",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-08T04:18:47Z",
      "side": 1,
      "message": "Yes, that\u0027s fine for me. Then I will just add the Flags interface on my side.\n\nHowever, could you help merge your changes first? This change https://gerrit.openbmc.org/c/openbmc/openbmc/+/80856 will require the bootOrder property.",
      "parentUuid": "7e31baf0_d4ae5ab4",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85abcecb_9e7f5e0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-07-08T06:32:56Z",
      "side": 1,
      "message": "Some output from the downstream fork\n\nURI: redfish/v1/Systems/\u003csystem\u003e\n```\n        \"BootOptions\": {\n            \"@odata.id\": \"/redfish/v1/Systems/System_0/BootOptions\"\n        },\n        \"BootOrder\": [\n            \"Boot0014\",\n            \"Boot0001\",\n            \"Boot0002\",\n            \"Boot0003\",\n            \"Boot0004\",\n            \"Boot0005\",\n            \"Boot0006\",\n            \"Boot0007\",\n            \"Boot0008\",\n            \"Boot0009\",\n            \"Boot000E\",\n            \"Boot000F\",\n            \"Boot0010\",\n            \"Boot0011\",\n            \"Boot0013\",\n            \"Boot000A\",\n            \"Boot000B\",\n            \"Boot000C\",\n            \"Boot000D\"\n        ],\n```\n\nBootOrder is what you have referred as BootSequence. When user wants to modify this shall be part of Systems/\u003csystem\u003e/Settings.\nBut, each BootOption in the BootOrder needs to be parse for more info like \n```\n{\n    \"@odata.id\": \"/redfish/v1/Systems/System_0/BootOptions/Boot0001\",\n    \"@odata.type\": \"#BootOption.v1_0_4.BootOption\",\n    \"BootOptionEnabled\": true,\n    \"BootOptionReference\": \"Boot0001\",\n    \"Description\": \"UEFI SAMSUNG MZ1L21T9HCLS-00A07 S666NS0T905745 1\",\n    \"DisplayName\": \"UEFI SAMSUNG MZ1L21T9HCLS-00A07 S666NS0T905745 1\",\n    \"Id\": \"Boot0001\",\n    \"Name\": \"Boot0001\",\n    \"UefiDevicePath\": \"VenHw(1E5A432C-0466-4D31-B009-D4D9239271D3)/MemoryMapped(0xB,0x100014120000,0x100014121FFF)/PciRoot(0x15)/Pci(0x0,0x0)/Pci(0x0,0x0)/NVMe(0x1,00-00-00-00-00-00-00-00)\"\n}\n```\nWithout method to manage the single BootOption I m not sure from your implementation how it helps end user. Could you please share more info ?",
      "parentUuid": "0f671e87_dde66464",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f250d11e_46b5d0a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-08T07:05:40Z",
      "side": 1,
      "message": "Hi @prithvi24pai@gmail.com\nI added the bootOrder property mainly for use with the YV4 OEM-meta IPMI command get/set boot order. The BIOS will interact with boot-related properties through IPMI commands to retrieve or configure boot settings. At present, we do not process boot order changes via Redfish; all handling is done through IPMI commands only.",
      "parentUuid": "85abcecb_9e7f5e0e",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bffd2b1b_0313412e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-07-08T07:27:20Z",
      "side": 1,
      "message": "The oem meta command will get or set boot-related properties (such as CMOS clear, boot mode, and boot type...), not just retrieve the boot order property.",
      "parentUuid": "f250d11e_46b5d0a6",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db363eea_d79b56b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-07-08T12:01:13Z",
      "side": 1,
      "message": "@patrick@stwcx.xyz please share your inputs here. As mentioned in above comments meta doesn\u0027t use bios-settings-manager. So, what could be the best approach here ?",
      "parentUuid": "bffd2b1b_0313412e",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b284401_4827ff57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-07-08T19:30:22Z",
      "side": 1,
      "message": "We should never assume a particular daemon is the only valid implementation of an interface.  I\u0027m not sure what feedback you\u0027re looking for from me other than that.  If @zoey.yj.chung.wiwynn@gmail.com has some proposed changes to make this work for their use-case can we incorporate them?",
      "parentUuid": "db363eea_d79b56b5",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98847c3a_4917deb8",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/CMOS.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-17T18:51:16Z",
      "side": 1,
      "message": "Who is going to implement this interface?  Is this something that is typically sent to the BIOS and we should put this in bios-settings-manager or is this something for phosphor-state-manager?  I don\u0027t really know and there isn\u0027t any design here.  I\u0027d like to get the right people to give feedback on this.",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fbee6ba_8ecd1604",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/CMOS.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T01:26:51Z",
      "side": 1,
      "message": "This flag is usually used in `chassis bootparam get 5`. BIOS can directly send this command to GET/SET this param. phosphor-settings-manager can have this. Is there any other thoughts ?",
      "parentUuid": "98847c3a_4917deb8",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e0d5184_d81976dd",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/CMOS.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T01:31:35Z",
      "side": 1,
      "message": "One more thing to consider should we add all the flags under single interface. Example: `yaml/xyz/openbmc_project/Control/Boot/Flags.interface.yaml`\nAll the flags coming in future could go to same interface",
      "parentUuid": "3fbee6ba_8ecd1604",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5aa945ee_115a7f11",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-06-17T18:51:16Z",
      "side": 1,
      "message": "Arbitrary strings are not likely to be acceptable here.  We have the \"Sources\" below as an enumeration.  How is \"Boot Source\" and \"Boot Sequence\" different?",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a90edeb5_2d83e0a9",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T01:26:51Z",
      "side": 1,
      "message": "Currently boot source is implemented as part of phosphor-settings-manager. The boot sequence is obtained from bios run time which is dynamic in nature. And also user has the option to delete the boot option(single option in the sequence). How does settings-manager delete the option ? Should boot option be a separate interface ?",
      "parentUuid": "5aa945ee_115a7f11",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8eae2413_803bca07",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-18T02:22:15Z",
      "side": 1,
      "message": "The current implementation uses the OEM-meta IPMI command get/set boot order to set the value of the boot sequence. \nThe current approach replaces boot options with the value \"RESERVED\". \nFor example, the sequence changes from {\"USB_DEV\", \"NET_IPV6\", \"SATA_HDD\", \"SATA_CD\", \"RESERVED\"} to {\"USB_DEV\", \"NET_IPV6\", \"RESERVED\", \"RESERVED\", \"RESERVED\"}.\nDo you have any suggestions?",
      "parentUuid": "a90edeb5_2d83e0a9",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c52c4bb_b31f99dd",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-18T04:08:42Z",
      "side": 1,
      "message": "At what point are we clearing the `RESERVED` ? \nIs this data reflected as part of redfish/v1/Systems/\u003csystem-id\u003e ?",
      "parentUuid": "8eae2413_803bca07",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4671e40_f9bd3d3e",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002117
      },
      "writtenOn": "2025-06-18T06:08:35Z",
      "side": 1,
      "message": "As of now, \"RESERVED\" entries are not cleared. If an entry in the boot sequence is set to \"RESERVED\", the corresponding byte in the response data will be returned as 0xFF.\n\nCurrently, this is not reflected under redfish/v1/Systems/\u003csystem-id\u003e. These properties are only used by OEM IPMI commands in YV4.",
      "parentUuid": "7c52c4bb_b31f99dd",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98235780_43cf59c8",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1002307
      },
      "writtenOn": "2025-06-30T12:03:31Z",
      "side": 1,
      "message": "How does pending boot order retrieved ?\nBIOS can send the boot order which is CurrentBootOrder. Users can set the boot order which can be PendingBootOrder ? \nSo I think we could re-use this PDI https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/78214/5/yaml/xyz/openbmc_project/Control/Boot/BootOrder.interface.yaml",
      "parentUuid": "c4671e40_f9bd3d3e",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39156df1_52aae54f",
        "filename": "yaml/xyz/openbmc_project/Control/Boot/Source.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-07-08T18:44:28Z",
      "side": 1,
      "message": "This is still pending feedback.  I\u0027m not allowing arbitrary strings here, especially when we have `Sources` already enumerated.\n\nIf we need to add RESERVED fields, add them?  Strings are problematic because users never know if they were correct.",
      "parentUuid": "98235780_43cf59c8",
      "revId": "870f5322606501fd0f96658ec874c2f9c7219ae5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}