{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a6033f37_03c1b7a4",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-23T02:53:33Z",
      "side": 1,
      "message": "Is this interface intended to be used for a thermal zone, or a PID loop, or both? The name \"Zone\" implies thermal zone, but the items described in this interface imply that it is describing a PID loop instead. I believe it would be useful to both.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d8642cb_388d7833",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-23T12:04:13Z",
      "side": 1,
      "message": "How about we name this interface:\n\nxyz.openbmc_project.Debug.Control.Zone\n\nThis will make it clear this is for debug purposes and we shouldn\u0027t see the information picked up by any other code (ie. it is only for humans).",
      "parentUuid": "a6033f37_03c1b7a4",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f7fb0b7_193850ea",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "There wouldn\u0027t be a reason for other code to not want to pick it up in the future, though. It is useful information that could be good for status displays or whatever. It\u0027s not intended for merely debugging purposes, although for now, that is its main purpose.",
      "parentUuid": "1d8642cb_388d7833",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf79165_3929f7ff",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-06-24T17:53:26Z",
      "side": 1,
      "message": "It seems like a lot of discussion in this review about the values being arbitrary any only useful to humans (unit-less properties, arbitrary string properties). If those are true, we absolutely donâ€™t want other code interpreting these values and hence my Debug suggestion.\n\nIf you want code to be able to interpret these, you need to be more formal with the specification. \n\nMy suggestion to move forward would be to treat it as Debug for now and refine it later (via refactoring) if you can identify a broader use.",
      "parentUuid": "0f7fb0b7_193850ea",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4775c422_520efd10",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T20:22:39Z",
      "side": 1,
      "message": "I still don\u0027t understand what the issue is about units. Nothing else in the PID control pipeline has units. Units are a matter of human interpretation, and associated with individual sensors. This is fine. However, to my knowledge, PID loops and thermal zones do not have units themselves. To add units would be beyond the scope of this proposal.",
      "parentUuid": "ecf79165_3929f7ff",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2076729_020b6063",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-26T01:18:21Z",
      "side": 1,
      "message": "\u003e Nothing else in the PID control pipeline has units. Units are a matter of human interpretation, and associated with individual sensors.\n\nI think this is the point of difference. Doesn\u0027t the PID loop operate over individual sensors? And don\u0027t those sensors expose their unit? Isn\u0027t any derived value in terms of that unit? Doesn\u0027t that give these values their associated unit?\n\nAs it stands I think this interface is attempting to be too abstract. It feels a bit like `std::pair` in C++ - yes, there are lots of pairs of things, but the useful bit isn\u0027t abstracting over the entire concept, it\u0027s naming the relationships between the things that are paired. Writing code accessing `.first` and `.second` doesn\u0027t do anything to clarify that relationship for the reader, especially when often the type information is elided in the source by iterators and `auto`. It feels the same way here. That fan and thermal PID loops happen to have the same shape and can be made to fit in the same interface doesn\u0027t mean it\u0027s easy to comprehend the intent, especially when other information like the object path can be obscured by the code. It feels easy for the result to be confusing, and for that confusion to become bugs.\n\nTaking a different tack: Can these sensor properties instead be associations back to underlying sensors rather than proxying the instance and value? What are the concerns generated by that approach?\n\nA third tack is having separate interfaces for thermal and fan zones. That way we can at least make some assertions about the values having a consistent unit even if the unit cannot be known from the interface itself: We can at least separate out fan from thermal zones in a mapper query.",
      "parentUuid": "4775c422_520efd10",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8b0aca6_4b3f3691",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 2,
      "author": {
        "id": 1000847
      },
      "writtenOn": "2023-06-26T06:05:58Z",
      "side": 1,
      "message": "How about name the interface and properties like:\n\nzone \u003d\u003e\n```\nxyz.openbmc_project.Control.Pid.Zone\n\u003d\u003e Leader(readonly): the main PID config name that is output result to fan pid\n                     loop\n```\n\nIf pidClass \u003d temp or margin,\n```\nxyz.openbmc_project.Control.Pid.Thermal\n\u003d\u003e Leader(readonly): the sensor name that has the highest temp in input list\n   Type(readonly): the \"Input\" and \"Setpoint\" data type, \"DegreeC\" or \"Margin\"\n                   according to \"Class\" in EM json setting(refs).\n   Setpoint(readonly): the \"Leader\" setpoint setting\n   Input(readonly): the \"Leader\" input value\n   Output(readonly): this PID result(as \"Setpoint\" data to fan pid loop)\n```\n\nIf pidClass \u003d power or powersum,\n```\nxyz.openbmc_project.Control.Pid.Power\n\u003d\u003e Leader(readonly): the sensor name that has the highest temp in input list\n   Setpoint(readonly): the \"Leader\" setpoint setting\n   Input(readonly): the \"Leader\" input value\n   Output(readonly): this PID result(as \"Setpoint\" data to fan pid loop)\n```\n\nIf pidClass \u003d fan,\n```\nxyz.openbmc_project.Control.Pid.Fan\n\u003d\u003e Leader(readonly): the sensor name that has the highest RPM in input list\n   Input(readonly): the \"Leader\" input value(RPM)\n   Output(readonly): this fan PID result(as final pwm duty to fan)\n```\npidClass refs: https://github.com/openbmc/phosphor-pid-control/blob/master/dbus/dbusconfiguration.cpp#L722-L723\n\n(If implement like this, maybe we can also move the interface Control.Mode to Control.Pid.Mode)",
      "parentUuid": "c2076729_020b6063",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1775f198_3544b7f7",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "I think if we have different use-cases we should possibly have different interfaces, or a more obvious way to discriminate the uses in the actual interface (rather than being determined by path). I feel like as it stands the different use cases could easily lead to type confusion where consumers simply fail to inspect the path to understand the data types.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b92c5565_9f0351ed",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "Agreed. There already seems to be some confusion between a PID loop interface and a thermal zone interface. Let\u0027s have two. One for each purpose. Then there will be no confusion. It is OK (and encouraged) to have similar fields in both interfaces, as needed.",
      "parentUuid": "1775f198_3544b7f7",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f581420_2e3f9c0c",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "As above. We have completely different units depending on the use case, but the unit is not described anywhere. This seems like a recipe for confusion.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f54ab09b_a77ec40f",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 22,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "As for units, the interpretation will be up to the user. Adding units to the PID control process is beyond the scope of this change.\n\nHowever, one piece of information we could add, would be a list of the input sensors for each PID loop. Then, if properly cross-referenced, the user can use that information to easily walk back, and learn the original units from there.",
      "parentUuid": "1f581420_2e3f9c0c",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c159d0cd_2cd60c74",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 24,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-23T02:53:33Z",
      "side": 1,
      "message": "If we are exposing `Input` and `Output` values, we should also expose the `Setpoint` value as well, while we have the opportunity. This will be helpful.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1073ca_cdd49a62",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-06-23T04:16:50Z",
      "side": 1,
      "message": "As above. We have completely different units depending on the use case, but the unit is not described anywhere. This seems like a recipe for confusion.",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c816bc6_26d3e16f",
        "filename": "yaml/xyz/openbmc_project/Control/Zone.interface.yaml",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-06-24T16:44:27Z",
      "side": 1,
      "message": "Agreed, same as other comment.",
      "parentUuid": "cd1073ca_cdd49a62",
      "revId": "20878ed84ce3f2e1bb3ed7372bce2b9585603052",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}