{
  "comments": [
    {
      "key": {
        "uuid": "87ecab80_e5596043",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-04T02:49:34Z",
      "side": 1,
      "message": "Suggestion, because other than Intel, no other systems has ME component, so better to mark it as (Management Engine)\nNote: still going ahead with +1",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6b24e50_c66e0ad1",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-04T18:41:16Z",
      "side": 1,
      "message": "I wonder if at some point we should consider making {\"Other\" + a free form string} as the desired direction for everything except BMC / Host.  There are a lot of entities that have upgradable firmware which the BMC might be responsible for and it could get quite absurd to have an enum for each of them.",
      "parentUuid": "87ecab80_e5596043",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7497cfdb_25b8c5d1",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-04T19:07:22Z",
      "side": 1,
      "message": "Not sure how we will be able to maintain single convention in that case. \ni.e. One company defining PSU another defining PowerSupply as usage will make it difficult to query from upper application.",
      "parentUuid": "c6b24e50_c66e0ad1",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6b74a34_c83e604a",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-04T23:26:47Z",
      "side": 1,
      "message": "As I think about it more, I wonder why we ever added this enumeration.  All software versions should be associated to an inventory item anyhow.  Isn\u0027t that all you need for querying at an application level?\n\nThere is quite a trend in servers right now of adding CPLDs, FPGAs, and micro-controllers to do \"special\" functionality.  There are already a number of items in most servers that aren\u0027t in this list, not to mention specialized things like GPUs, NCSI-NICs, and custom accelerators, all of which could be updated by the BMC.  Between Intel (ME) and IBM (OCC) we even have items that perform very similar function but with different names.  My worry if we go down this path is that the list of enumerations is going to be quite large to the point it makes utilizing it in a useful way in a GUI pretty useless.\n\nI wonder when PSU was added and what the rationale / current use for it is.  I\u0027ll have to do some investigation.",
      "parentUuid": "7497cfdb_25b8c5d1",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b02f612_377d19b4",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-04T23:31:05Z",
      "side": 1,
      "message": "+Lei\n\nCan you comment as to the history on why PSU was added rather than using \"Other\"?  Is there any example use-case where having this new enumeration enhanced functionality in your implementation or consumers?",
      "parentUuid": "f6b74a34_c83e604a",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebe92d40_72b4f8ef",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-05T03:14:00Z",
      "side": 1,
      "message": "This enum was used by code managers (e.g. BMC/PNOR) to know which kind of software tarball is uploaded, where the tarball contains a MANIFEST that declares the VersionPurpose.\n\nThe existing BMC/PNOR code manager then will check the purpose and know if it shall handle the uploaded image or not.\n\nFor the PSU case, please refer to https://github.com/openbmc/docs/blob/master/designs/psu-firmware-update.md#versionpurpose, which explains why I chose to add a new PSU version purpose instead of using `Other`.\nSimple answer is:\n\n\u003e A new VersionPurpose.PSU is more specific and makes it easier to implement and friendly for the user.\n\nWith the newly added enum, phosphor-psu-code-mgmt could simply query the VersionPurpose for PSU image.\nSee https://github.com/openbmc/phosphor-psu-code-mgmt/blob/090ce11adf4ec77bb28c50bd16e8597ceeb227d9/src/item_updater.cpp#L58-L61 for the usage.",
      "parentUuid": "6b02f612_377d19b4",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4a799d6_f73cd623",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-05T03:51:43Z",
      "side": 1,
      "message": "Thanks Lei for responding with the background.\n\n\u003e This enum was used by code managers (e.g. BMC/PNOR) to know which kind of software tarball is uploaded, where the tarball contains a MANIFEST that declares the VersionPurpose.\n\n\u003e The existing BMC/PNOR code manager then will check the purpose and know if it shall handle the uploaded image or not.\n\nCouldn\u0027t this also have been solved via the association to an Inventory or State.Host object?\n\n\u003e With the newly added enum, phosphor-psu-code-mgmt could simply query the VersionPurpose for PSU image.\n\nThere is in my opinion a serious design flaw with this line of thought.  We may have two different PSUs that are accepted by a single server (two different manufacturers).  The \"VersionPurpose\u003dPSU\" doesn\u0027t actually tell you that the image works for the particular PSU that phosphor-psu-code-mgmt happens to support.  This is even more serious when you consider \"VersionPurpose\u003dHost\" because we have multi-host servers that can support multiple servers / architectures (think of a \"blade center\" like chassis).\n\nI personally think we made a mistake when we introduced this property even before PSU existed and we shouldn\u0027t continue in this direction.  Associations to real objects are the only fully-expressive way to express \"this software blob is applicable to this thing\".\n\nI\u0027m suspect it is possible even the \"Purpose\u003dME\" will fail in the multi-host case because we can have two different hosts managed by the same BMC with different processor generations (ie. \"Recent Lake\" and \"Older Lake\").",
      "parentUuid": "ebe92d40_72b4f8ef",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8597e4f_78de591a",
        "filename": "xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-05T04:21:49Z",
      "side": 1,
      "message": "\u003e Couldn\u0027t this also have been solved via the association to an Inventory or State.Host object?\n\nThe association is created *after* BMC/PNOR code manager handles the uploaded image, and it *depends* on the VersionPurpose to tell which (BMC or Host) the image is for.\n\n\u003e We may have two different PSUs that are accepted by a single server (two different manufacturers).  The \"VersionPurpose\u003dPSU\" doesn\u0027t actually tell you that the image works for the particular PSU that phosphor-psu-code-mgmt happens to support.\n\nThe VersionPurpose\u003dPSU only tells the image is for PSU, and phosphor-psu-code-mgmt will check the PSU *model* and *manufacture* to see which PSUs in the systems matches the uploaded PSU image, where the information is put in `ExtendedVersion`.\nThe phosphor-psu-code-mgmt already handles such case.\n\nYou could see the related information in design doc https://github.com/openbmc/docs/blob/master/designs/psu-firmware-update.md#update-by-api :\n\n\u003e The \"Version\" interface needs to be extended:\n\u003e Add a new VersionPurpose for PSU;\n\u003e Re-use the existing ExtendedVersion as an additional string for vendor-specific purpose, e.g. to indicate the PSU model.\n\nSuch information (PSU model and manufacture) is put in the MANIFEST by the generate-psu-tar tool (see usage in https://github.com/openbmc/phosphor-psu-code-mgmt#psu-update)\n\n\u003e I\u0027m suspect it is possible even the \"Purpose\u003dME\" will fail in the multi-host case because we can have two different hosts managed by the same BMC with different processor generations (ie. \"Recent Lake\" and \"Older Lake\")\n\nThe \"VersionPurpose\" is to tell the category of the uploaded image, e.g. ME.\nTo tell which ME host, you could re-use the `ExtendedVersion` to indicate which \"Recent Lake\" or \"Older Lake\", or you could introduce additional property for such information.",
      "parentUuid": "e4a799d6_f73cd623",
      "range": {
        "startLine": 38,
        "startChar": 45,
        "endLine": 38,
        "endChar": 47
      },
      "revId": "cbf9567b57a690bab13c0be5555ea850f4d913e0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}