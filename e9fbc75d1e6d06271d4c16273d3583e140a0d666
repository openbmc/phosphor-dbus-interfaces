{
  "comments": [
    {
      "key": {
        "uuid": "d2c6ee88_59eb0e2b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-29T20:10:27Z",
      "side": 1,
      "message": "Don\u0027t we already get this same information from a PropertyChanged event though?  Why do we need to define a new one?",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd4da11b_60261147",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-01-29T20:27:20Z",
      "side": 1,
      "message": "it has the sensor value from the Value interface that tripped it.",
      "parentUuid": "d2c6ee88_59eb0e2b",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef5ab45f_c33350f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-29T20:47:59Z",
      "side": 1,
      "message": "This is solving a problem we\u0027ve discussed a couple times on discord and IRC;  Those threads probably do it better justice than this commit message.",
      "parentUuid": "bd4da11b_60261147",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f61702e_9dc405c0",
        "filename": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-29T20:10:27Z",
      "side": 1,
      "message": "These names are problematic for the class generator.  When the expectation is that we will combine classes together into a single instance using sdbusplus::object, we need to have different names for members across all the combined-classes.  That is why the property names here all include their interface type, like \u003cCritical\u003eAlarmLow.\n\nWithout unique names a server will call `instance-\u003ehighAlarmAsserted(value)` and there is ambiguity as to which one you are intending to call.",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01afd7d0_dcc7e92b",
        "filename": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-01-29T20:27:20Z",
      "side": 1,
      "message": "I guess then I don\u0027t see a way forward here, which I\u0027m OK with (other than all the time I\u0027ve spent on it) since propertiesChanged followed by a getProperty will of course work for me.\n\n* Ed didn\u0027t want the ThresholdAsserted signal currently being used by dbus-sensors, which would have allowed 1 match to get all alarm changes on all types of threshold interfaces\n* How it is now has the problem you state.\n* having a unique signal for each property could mean up to 20 matches to watch all the interfaces.",
      "parentUuid": "8f61702e_9dc405c0",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14ea0329_21060b90",
        "filename": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000008
      },
      "writtenOn": "2021-01-29T20:32:11Z",
      "side": 1,
      "message": "I guess the single ThresholdAsserted signal would also have the multi-inheritance problems...",
      "parentUuid": "01afd7d0_dcc7e92b",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d25249e_1f4d72e3",
        "filename": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-01-29T20:47:59Z",
      "side": 1,
      "message": "Groan.... i forgot about that limitation in PDI.  I wonder how hard that would be to fix in the generator code, if an interface conflics, prefix the object with the interface name.\n\nAssuming that\u0027s not possible or easy, my preference here would be to just go back to the prefixed version and have the 20 matches if you really need to get every threshold event.  I imagine most things won\u0027t need 20 matches;  IPMI only cares about 4 types of events.  Redfish is pretty similar, in that it would need 4 matches.\n\nIn terms of dbus, having a lot of very precise matches is probably the more correct answer anyway, as just matching on signal name would mean that if we ever put this signal name in a non-sensors interface, we\u0027d still hit the match unintentionally.",
      "parentUuid": "14ea0329_21060b90",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7439338_1f869fc1",
        "filename": "xyz/openbmc_project/Sensor/Threshold/Critical.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-01-29T20:49:26Z",
      "side": 1,
      "message": "I mentioned this on Discord before but it sounded like these thresholds were an attempt at unnecessary optimization. The right approach from a dbus perspective is to send a single PropertiesChanged signal for both the Boolean and the value. Unfortunately, we don’t have a great mechanism to facilitate that...\n\nI’ll add it to the list of features for sdbusplus.",
      "parentUuid": "14ea0329_21060b90",
      "revId": "e9fbc75d1e6d06271d4c16273d3583e140a0d666",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}