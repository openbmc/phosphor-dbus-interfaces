{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06ef6637_967c8ad5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-14T22:12:31Z",
      "side": 1,
      "message": "Addressed Comments. Please review.",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "849b8bb7_a31ff449",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-10-23T20:59:21Z",
      "side": 1,
      "message": "Thanks for the review. Replied to your comments.",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df830b2e_8562abf3",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-26T22:34:27Z",
      "side": 1,
      "message": "This should be the progress object, right?  The version object very likely won\u0027t be known by the bmc, given the requirement for opaque image binaries, right?",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73a1e6ce_71f29a5d",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-02-26T23:33:07Z",
      "side": 1,
      "message": "By this time the image has already been parsed and version has been extracted. So, the version is already known.",
      "parentUuid": "df830b2e_8562abf3",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f54701_145d5a27",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-28T23:23:16Z",
      "side": 1,
      "message": "I don\u0027t understand.  If it\u0027s an opaque image, how do you know the version information?  By definition, the data is opaque.\n\nFor BMC, yes, we absolutely know the version.  For anything else, I don\u0027t think we will.\n\n\nAlso, having an API like this hits on a major problem we have today: What if I upload two different images with the same version, as happens in development?  They would get the same version, and get a collision on paths.  If we\u0027re going to rewrite interfaces, we should fix that.  See somewhere else about a unique identifier.  Maybe we just put that in the path somewhere?\n\n\n\nin addition, regardless of the above, there needs to be a progress indicator of some kind returned, so that we can track it in the Redfish::Task schema.",
      "parentUuid": "73a1e6ce_71f29a5d",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "708a160d_eea76b44",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-02-29T04:54:41Z",
      "side": 1,
      "message": "\u003e I don\u0027t understand.  If it\u0027s an opaque image, how do you know the version information?  By definition, the data is opaque.\n\u003e \n\u003e For BMC, yes, we absolutely know the version.  For anything else, I don\u0027t think we will.\n\nThis is a return value from the startUpdate API. The daemon which will implement this interface for a specific type of upgradable entity will know how to parse the image and extract version out of it, but the image is opaque from caller(bmcweb) perspective.\n\n\u003e \n\u003e \n\u003e Also, having an API like this hits on a major problem we have today: What if I upload two different images with the same version, as happens in development?  They would get the same version, and get a collision on paths.  If we\u0027re going to rewrite interfaces, we should fix that.  See somewhere else about a unique identifier.  Maybe we just put that in the path somewhere?\n\nI have mentioned in the design spec that we will apply salt to generate the VersionId https://github.com/openbmc/docs/blob/master/designs/code-update.md. Hence it will be unique.\nVersionId \u003d Version from Image + Salt\n\nPlease let me know if you want me to change something in nomenclature in API interface to depict so.\n\n\u003e \n\u003e \n\u003e \n\u003e in addition, regardless of the above, there needs to be a progress indicator of some kind returned, so that we can track it in the Redfish::Task schema.\n\nCan you please refer to the flow diagram in the design document for progress update flow https://github.com/openbmc/docs/blob/master/designs/code-update.md.",
      "parentUuid": "92f54701_145d5a27",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba950cac_82e890a7",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-06T00:10:12Z",
      "side": 1,
      "message": "\u003e The daemon which will implement this interface for a specific type of upgradable entity will know how to parse the image and extract version out of it,\n\nNot necessarily.  Think of the case of a PSU update.  The PSU binary is going to come from a vendor, for which it needs sent to an interface over smbus.  No BMC knows how vendor X implemented their image versioning scheme, nor should it.\n\n\n\u003e Hence it will be unique. VersionId \u003d Version from Image + Salt\n\nACK.\n\n\n\u003e Can you please refer to the flow diagram in the design document for progress update flow\n\n\nYep, and in that doc you document that \"Create Interface\nxyz.openbmc_project.Software.Version\" is going to return {ObjectPath, Success}, \n\nWhich then gets fed into:\ncreate Matcher\n(PropertiesChanged,\nxyz.openbmc_project.Software.ActivationProgress,\nObjectPath)\n\nExcept that you\u0027ve handed back a version object path, not a progress object path.  Unless I\u0027m missing something, your document shows the same error I\u0027ve noted here.\n\nAs a side note, that state diagram shows bmcweb maintaining a lot of state (matchers and loops to monitor progress) that break a lot of the design rules, and do things that cause bugs (I believe I\u0027ve pointed you to the existing firmware update bug).  Business logic for monitoring needs to be done in the firmware update daemon itself, not in bmcweb.",
      "parentUuid": "708a160d_eea76b44",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8001f045_2846edb5",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-06T08:58:55Z",
      "side": 1,
      "message": "\u003e \u003e The daemon which will implement this interface for a specific type of upgradable entity will know how to parse the image and extract version out of it,\n\u003e \n\u003e Not necessarily.  Think of the case of a PSU update.  The PSU binary is going to come from a vendor, for which it needs sent to an interface over smbus.  No BMC knows how vendor X implemented their image versioning scheme, nor should it.\n\nAs discussed over discord, i will change the description to better reflect the intention for generic object path.\n\n\u003e \n\u003e \n\u003e \u003e Hence it will be unique. VersionId \u003d Version from Image + Salt\n\u003e \n\u003e ACK.\n\u003e \n\u003e \n\u003e \u003e Can you please refer to the flow diagram in the design document for progress update flow\n\u003e \n\u003e \n\u003e Yep, and in that doc you document that \"Create Interface\n\u003e xyz.openbmc_project.Software.Version\" is going to return {ObjectPath, Success}, \n\u003e \n\u003e Which then gets fed into:\n\u003e create Matcher\n\u003e (PropertiesChanged,\n\u003e xyz.openbmc_project.Software.ActivationProgress,\n\u003e ObjectPath)\n\u003e \n\u003e Except that you\u0027ve handed back a version object path, not a progress object path.  Unless I\u0027m missing something, your document shows the same error I\u0027ve noted here.\n\nThe same objectPath will host all interfaces (Version, ActivationProgress etc) for the image. As we discussed via discord, i will change the description to reflect a generic object path which can host multiple interfaces.\n\n\u003e \n\u003e As a side note, that state diagram shows bmcweb maintaining a lot of state (matchers and loops to monitor progress) that break a lot of the design rules, and do things that cause bugs (I believe I\u0027ve pointed you to the existing firmware update bug).  Business logic for monitoring needs to be done in the firmware update daemon itself, not in bmcweb.\n\nMatchers are being maintained (in diagram) for ActivationState and ActivationProgress properties. bmcweb can either maintains these matchers (to rely on notifications) or read the interface properties is an implementation choice we can make. For both the flows, Activation and ActivationProgress interfaces will be used which are existing interfaces.",
      "parentUuid": "ba950cac_82e890a7",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a0ba74b_d9ecb20a",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-06T16:04:54Z",
      "side": 1,
      "message": "\u003e \u003e \u003e The daemon which will implement this interface for a specific type of upgradable entity will know how to parse the image and extract version out of it,\n\u003e \u003e \n\u003e \u003e Not necessarily.  Think of the case of a PSU update.  The PSU binary is going to come from a vendor, for which it needs sent to an interface over smbus.  No BMC knows how vendor X implemented their image versioning scheme, nor should it.\n\u003e \n\u003e As discussed over discord, i will change the description to better reflect the intention for generic object path.\n\nSounds good.\n\n\u003e \n\u003e \u003e \n\u003e \u003e \n\u003e \u003e \u003e Hence it will be unique. VersionId \u003d Version from Image + Salt\n\u003e \u003e \n\u003e \u003e ACK.\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e \u003e Can you please refer to the flow diagram in the design document for progress update flow\n\u003e \u003e \n\u003e \u003e \n\u003e \u003e Yep, and in that doc you document that \"Create Interface\n\u003e \u003e xyz.openbmc_project.Software.Version\" is going to return {ObjectPath, Success}, \n\u003e \u003e \n\u003e \u003e Which then gets fed into:\n\u003e \u003e create Matcher\n\u003e \u003e (PropertiesChanged,\n\u003e \u003e xyz.openbmc_project.Software.ActivationProgress,\n\u003e \u003e ObjectPath)\n\u003e \u003e \n\u003e \u003e Except that you\u0027ve handed back a version object path, not a progress object path.  Unless I\u0027m missing something, your document shows the same error I\u0027ve noted here.\n\u003e \n\u003e The same objectPath will host all interfaces (Version, ActivationProgress etc) for the image. As we discussed via discord, i will change the description to reflect a generic object path which can host multiple interfaces.\n\nIn practice, I\u0027m not sure how this will work, but so long as this denotes that progress is required, and version is not, my concerns are solved.\n\n\u003e \n\u003e \u003e \n\u003e \u003e As a side note, that state diagram shows bmcweb maintaining a lot of state (matchers and loops to monitor progress) that break a lot of the design rules, and do things that cause bugs (I believe I\u0027ve pointed you to the existing firmware update bug).  Business logic for monitoring needs to be done in the firmware update daemon itself, not in bmcweb.\n\u003e \n\u003e Matchers are being maintained (in diagram) for ActivationState and ActivationProgress properties.\n\nbmcweb should not be maintaining matchers for the simple update flow.  That\u0027s the state that causes bugs like https://github.com/openbmc/bmcweb/issues/202\n\n\u003e bmcweb can either maintains these matchers (to rely on notifications) or read the interface properties is an implementation choice we can make.\n\nJust to be clear, there are known bugs in the former.  I\u0027m not going to accept anything that\u0027s no safer than previously (otherwise what\u0027s the point in rewriting all the code).  Reading the interface properties on query is what we should go with.\n\n\u003e For both the flows, Activation and ActivationProgress interfaces will be used which are existing interfaces.\n\nSounds good.",
      "parentUuid": "8001f045_2846edb5",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04ffffd9_5636f295",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 23,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-03-06T23:28:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a0ba74b_d9ecb20a",
      "range": {
        "startLine": 23,
        "startChar": 42,
        "endLine": 23,
        "endChar": 49
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3174b00d_59beaf23",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-10-13T20:53:29Z",
      "side": 1,
      "message": "InternalError? \n\nThere are a few more at \nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Version.errors.yaml\n\nand https://github.com/openbmc/phosphor-bmc-code-mgmt/commit/098a6771e26c2c217b359d284fbca4d662e0aa73 had \n\n- name: UnTarFailure\n  description: An error occurred during untar.\n- name: ManifestFileFailure\n  description: An error when reading the Manifest file.\n- name: InternalFailure\n  description: The operation failed internally during processing the image.\n- name: ImageFailure\n  description: An error occured processing the image.\n- name: BusyFailure\n  description: The device is busy during the update.",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15da8569_87153ef7",
        "filename": "yaml/xyz/openbmc_project/Software/Update.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-10-23T20:59:21Z",
      "side": 1,
      "message": "@Gunnar,\nI have already covered the ones from https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Version.errors.yaml\nEd don\u0027t want to have AlreadyExists and there was a discussion around this. Ed\u0027s point was that there could be a valid reason to update an existing version on a device. Link to conversation - https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/65738/comment/b45b51be_3cf9e898/\n\nAbout https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/Software/Image.errors.yaml\nUnTarFailure, ManifestFileFailure makes assumption about the image format to be tarred file or have a ManifestFile. The design doesn\u0027t impose any such restriction. Moreover, this option is already covered by InvalidImage failure at a broader level.\n\nInternalFailure - I might be wrong but i think Patrick was not in support of using InternalFailure as it doesn\u0027t help in any way by not providing any useful info.\n\n\nImageFailure has been covered by Incompatible, InvalidSignature, InvalidImage.\n\nBusyFailure cannot be returned from this API as update is a async operation and will happen in backend. Update Daemon can log a valid error message for it. I am not sure if we use these definitions in logging too?",
      "parentUuid": "3174b00d_59beaf23",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd45b861_e587f3ed",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-10-13T21:08:36Z",
      "side": 1,
      "message": "Doesn\u0027t this functional association today go from /xyz/openbmc_project/software/ to \n/xyz/openbmc_project/software/\u003csoftware id\u003e today?\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/5e7bca41c4460abb6f513ae8e0a67c551d6192a5/yaml/xyz/openbmc_project/Software/README.md?plain\u003d1#L260\n\nbusctl get-property --no-pager xyz.openbmc_project.Software.BMC.Updater /xyz/openbmc_project/software xyz.openbmc_project.Association.Definitions  Associations\na(sss) 5 \"active\" \"software_version\" \"/xyz/openbmc_project/software/71d47a18\" \"updateable\" \"software_version\" \"/xyz/openbmc_project/software/71d47a18\" \"functional\" \"software_version\" \"/xyz/openbmc_project/software/bcfb7338\" \"active\" \"software_version\" \"/xyz/openbmc_project/software/bcfb7338\" \"updateable\" \"software_version\" \"/xyz/openbmc_project/software/bcfb7338\"",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a62ef73a_2f49a665",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-10-23T20:59:21Z",
      "side": 1,
      "message": "Right now, there is just one use case for BMC, so we could have created this association that way. But this design is for Software Update in general for all type of devices. In that case the functional association needs to exist from Software Version to inventory item, so we can figure out what is the current running version for a FW inventory item. \nPlease let me know if you think i misunderstood your question.",
      "parentUuid": "fd45b861_e587f3ed",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5302b8f1_3cffdd29",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-26T22:34:27Z",
      "side": 1,
      "message": "nit, can we name this something better?  Based on my reading here, I can\u0027t differentiate between when I would use functional, and when I would use active, and the description doesn\u0027t help much.",
      "range": {
        "startLine": 47,
        "startChar": 12,
        "endLine": 47,
        "endChar": 22
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14dc8b42_ec5be20a",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-02-26T23:29:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5302b8f1_3cffdd29",
      "range": {
        "startLine": 47,
        "startChar": 12,
        "endLine": 47,
        "endChar": 22
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cb37fc3_5215849e",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1000020
      },
      "writtenOn": "2023-10-13T21:08:36Z",
      "side": 1,
      "message": "Isn\u0027t there already an Association that does this \n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/5e7bca41c4460abb6f513ae8e0a67c551d6192a5/yaml/xyz/openbmc_project/Software/README.md?plain\u003d1#L265\n\nbusctl get-property --no-pager xyz.openbmc_project.Software.BMC.Updater /xyz/openbmc_project/software/bcfb7338 xyz.openbmc_project.Association.Definitions  Associations\na(sss) 1 \"inventory\" \"activation\" \"/xyz/openbmc_project/inventory/system/chassis/motherboard/ebmc_card_bmc\"",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb670f5d_0dd587af",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-10-23T20:59:21Z",
      "side": 1,
      "message": "None, of the associations are documented right now in phosphor-dbus-interfaces. So, what i am doing is documenting them to get a consensus for the new design. Also, nomenclature wise \u0027active\u0027 seemed better, so changed it to active.",
      "parentUuid": "7cb37fc3_5215849e",
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93121818_caaf3277",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-02-26T22:34:27Z",
      "side": 1,
      "message": "Priority order for... what?  You don\u0027t sepecify, but can there be more than one functional version?",
      "range": {
        "startLine": 60,
        "startChar": 29,
        "endLine": 60,
        "endChar": 52
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d745553_e8496824",
        "filename": "yaml/xyz/openbmc_project/Software/Version.interface.yaml",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-02-26T23:29:20Z",
      "side": 1,
      "message": "Changed association names and added more description.",
      "parentUuid": "93121818_caaf3277",
      "range": {
        "startLine": 60,
        "startChar": 29,
        "endLine": 60,
        "endChar": 52
      },
      "revId": "cc74529b051cf45260f0ef6e20355e4afc66606f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}