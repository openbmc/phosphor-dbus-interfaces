{
  "comments": [
    {
      "key": {
        "uuid": "7aecf2c8_aba3e38f",
        "filename": "yaml/xyz/openbmc_project/Control/README.regulators.md",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-04T17:01:36Z",
      "side": 1,
      "message": "There is a problem/solution in dbus with being able to encode unsupported characters into paths.  We have some code in sdbusplus to facilitate this.  When you start a name with a number there can be some collision with this code that encode/decodes the path, so you might want to either:\n\n1. Not start names with a number.\n2. Use the path encoding we have to allow arbitrary strings.  This would allow the path segment (from a code perspective) to be literally \u00273.3 vcs\u0027 but it would be encoded at a dbus level to something like \u0027_33_2e3_vcs\u0027*.\n\nYou can see `sd_bus_path_encode` and in sdbusplus the `string_path_wrapper` class.  (We use a slightly different encoding right now because there are too many collisions currently but we want to transition to sd_bus_path_encode directly).\n\n(*): The point about collisions in our current implementation is what causes the first character to be encoded.  In the future this should become encoded as \u00273_2e3_vcs\u0027 -\u003e \u00273.3 vcs\u0027.",
      "range": {
        "startLine": 52,
        "startChar": 46,
        "endLine": 52,
        "endChar": 53
      },
      "revId": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35577bf3_b80d995c",
        "filename": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-11-01T23:19:19Z",
      "side": 1,
      "message": "This doesn\u0027t seem like it\u0027s enough, is it?  Presumably on most servers you\u0027d need to know this is \"VCC for socket 1\" or maybe \"VCC for socket 1, numa node 1\"\n\nAlso, put on a property like this, it\u0027s really hard to ask the mapper to help you out, and in code you\u0027d have to pull every sensor to find the one you\u0027re looking for.  Maybe if this were put in the path, it might be more useful?\n\n/xyz/openbmc_project/regulators/\u003cfoo vr\u003e\n\nAlso, do we need to make a statement about uniqueness?  As-written, I could have two \"vcc\" regulators.  In the dbus-path model, it\u0027s implied that they\u0027re required to be unique.",
      "range": {
        "startLine": 34,
        "startChar": 51,
        "endLine": 34,
        "endChar": 72
      },
      "revId": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78fcf768_4d8dc5a5",
        "filename": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000331
      },
      "writtenOn": "2021-11-02T05:42:43Z",
      "side": 1,
      "message": "Hi Ed,\n\nIn the README file in this commit, I tried to cover I think what you are asking about.  I might be misunderstanding though.\n\nMy proposal in the README is for regulators to have a D-Bus path of the form\n  /xyz/openbmc_project/regulators/\u003cregulator\u003e\nand for regulator rails to have a D-Bus path of the form\n  /xyz/openbmc_project/regulators/\u003cregulator\u003e/\u003crail\u003e\n\nFor example, if you have multiple CPU regulators, the regulator for CPU 0 might have the path:\n    /xyz/openbmc_project/regulators/cpu0_vrm\n\nAnd if that regulator produces both a Vcc and a Vio rail for the CPU, those rails might have the path:\n    /xyz/openbmc_project/regulators/cpu0_vrm/vcc0\n    /xyz/openbmc_project/regulators/cpu0_vrm/vio0\n\nIn the README I propose having associations between an inventory item and the regulator rails that power it.  So if you wanted to find the VIO rail for CPU0, you would do the following:\n* Find the inventory item for CPU0\n* Find the rails that power it from the \u0027powered_by\u0027 association\n* If there are multiple rails in the association, determine which one is the VIO rail via the RailType property.\n\nIn this example, there might be CPU1, CPU2, and CPU3 in the system as well.  So cpu1_vrm/vcc1 and cpu2_vrm/vcc2 would also have the \u0027vcc\u0027 RailType.  The RailType is not intended to be unique.  It is a category of rails that serve a similar purpose, such as powering the IO logic in a CPU.\n\nIn my use case, the host code knows it wants to set the \u0027vio\u0027 rail for CPU0.  It sends a request down through PLDM.  The code there needs a way to find the vio type rail for CPU0.\n\nIt would be tough to encode the rail type in the D-Bus path unless we give regulators and rails separate namespaces.  On the systems I work on, many regulators produce two rails of different types.  For example, reg1 might produce vcc0 and vio0.  So the regulator node of the path would not fit solely in either rail type.\n\nWe had discussed having rails and regulators in separate namespaces in Discord.  For example:\n  /xyz/openbmc_project/regulators/\u003cregulator\u003e\n  /xyz/openbmc_project/rails/\u003crail\u003e\n\nBut then we would probably want associations between them so you know which regulator a rail is produced by for error reporting purposes.  Patrick preferred the single, hierarchical namespace to avoid the extra association lookup.\n\nLet me know if I\u0027m off in the weeds.  I\u0027m just trying to find a compromise avoids the concerns people have mentioned.",
      "parentUuid": "35577bf3_b80d995c",
      "range": {
        "startLine": 34,
        "startChar": 51,
        "endLine": 34,
        "endChar": 72
      },
      "revId": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "777a7670_9b21452a",
        "filename": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-11-03T22:13:50Z",
      "side": 1,
      "message": "\u003e Hi Ed,\n\u003e \n\u003e In the README file in this commit, I tried to cover I think what you are asking about.  I might be misunderstanding though.\n\nAh, so you did.  Mea culpa, I should\u0027ve read the whole patch.\n\n\u003e \n\u003e My proposal in the README is for regulators to have a D-Bus path of the form\n\u003e   /xyz/openbmc_project/regulators/\u003cregulator\u003e\n\u003e and for regulator rails to have a D-Bus path of the form\n\u003e   /xyz/openbmc_project/regulators/\u003cregulator\u003e/\u003crail\u003e\n\u003e \n\u003e For example, if you have multiple CPU regulators, the regulator for CPU 0 might have the path:\n\u003e     /xyz/openbmc_project/regulators/cpu0_vrm\n\u003e \n\u003e And if that regulator produces both a Vcc and a Vio rail for the CPU, those rails might have the path:\n\u003e     /xyz/openbmc_project/regulators/cpu0_vrm/vcc0\n\u003e     /xyz/openbmc_project/regulators/cpu0_vrm/vio0\n\u003e \n\u003e In the README I propose having associations between an inventory item and the regulator rails that power it.  So if you wanted to find the VIO rail for CPU0, you would do the following:\n\u003e * Find the inventory item for CPU0\n\u003e * Find the rails that power it from the \u0027powered_by\u0027 association\n\u003e * If there are multiple rails in the association, determine which one is the VIO rail via the RailType property.\n\u003e \n\u003e In this example, there might be CPU1, CPU2, and CPU3 in the system as well.  So cpu1_vrm/vcc1 and cpu2_vrm/vcc2 would also have the \u0027vcc\u0027 RailType.  The RailType is not intended to be unique.  It is a category of rails that serve a similar purpose, such as powering the IO logic in a CPU.\n\u003e \n\u003e In my use case, the host code knows it wants to set the \u0027vio\u0027 rail for CPU0.  It sends a request down through PLDM.  The code there needs a way to find the vio type rail for CPU0.\n\u003e \n\u003e It would be tough to encode the rail type in the D-Bus path unless we give regulators and rails separate namespaces.  On the systems I work on, many regulators produce two rails of different types.  For example, reg1 might produce vcc0 and vio0.  So the regulator node of the path would not fit solely in either rail type.\n\u003e \n\u003e We had discussed having rails and regulators in separate namespaces in Discord.  For example:\n\u003e   /xyz/openbmc_project/regulators/\u003cregulator\u003e\n\u003e   /xyz/openbmc_project/rails/\u003crail\u003e\n\u003e \n\u003e But then we would probably want associations between them so you know which regulator a rail is produced by for error reporting purposes.  Patrick preferred the single, hierarchical namespace to avoid the extra association lookup.\n\u003e \n\u003e Let me know if I\u0027m off in the weeds.  I\u0027m just trying to find a compromise avoids the concerns people have mentioned.\n\nI think you\u0027re pretty close after having read the README (which again, I should\u0027ve done earlier, sorry about that.)",
      "parentUuid": "78fcf768_4d8dc5a5",
      "range": {
        "startLine": 34,
        "startChar": 51,
        "endLine": 34,
        "endChar": 72
      },
      "revId": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "821a6adc_185f0796",
        "filename": "yaml/xyz/openbmc_project/Control/VoltageRegulatorControl.interface.yaml",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-11-04T17:01:36Z",
      "side": 1,
      "message": "How do we plan to maintain the connection between the two then?  The fact that they are \"system-specific\" arbitrary strings makes matching up fairly fragile.  An alternative here is to have them be strings, but require the string values to be fully-qualified enumeration names like \u0027xyz.openbmc_project.Control.VoltageRegulatorControl.VCS\u0027 or\n\u0027com.ibm.Control.VoltageRegulatorControl.Power10.Fabric\u0027.  We have done similar for \"Dump Parameters\" here:\n\n\u003e yaml/xyz/openbmc_project/Dump/Create.interface.yaml:            \u0027domain.Dump.Create.CreateParameters.ParamName\u0027.\n\nThere is similarly effort going on to enhance code-update to have similar mechanisms to identify the relationship between a piece of inventory and a firmware image using these FQENs.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 55
      },
      "revId": "737b66830fdd17091d2a51ef0a72e8f6ed138f05",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}