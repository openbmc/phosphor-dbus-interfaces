{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5fe83baf_340acbfc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2022-10-12T09:13:46Z",
      "side": 1,
      "message": "Hi Patrick,\n\nIt\u0027s compiling error with console logs:\n```\nopenbmc/phosphor-dbus-interfaces: WARNING: You should add the boolean check kwarg to the run_command call.\nopenbmc/phosphor-dbus-interfaces:          It currently defaults to false,\nopenbmc/phosphor-dbus-interfaces:          but it will default to true in future releases of meson.\nopenbmc/phosphor-dbus-interfaces:          See also: https://github.com/mesonbuild/meson/issues/9300\n```\nDoes an issue with the meson build? Please help check.",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "673e8e72_03229e66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-12T11:52:15Z",
      "side": 1,
      "message": "That looks like a warning which isn\u0027t stopping the build.  I see something about a clock-skew in the error.  I retriggered for now.",
      "parentUuid": "5fe83baf_340acbfc",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47fba14e_24e09838",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-12T11:53:14Z",
      "side": 1,
      "message": "Don\u0027t we already have the progress code interfaces?",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ca13da4_deb289e7",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-13T01:55:39Z",
      "side": 1,
      "message": "We already support BootProgress which map to Redfish\u0027s ComputerSystem LastState with supporting properties defined in http://redfish.dmtf.org/schemas/DSP2046_2021.1.html#laststate.\nHowever, this can\u0027t support to specify all boot progress from UEFI. So, DSP0268_2021.4 Redfish Schema Supplement specification has Oem and OemLastState (BootProgress v1.13+). To support IPMI Send/Get Boot Progress Code in SBMR 2.0 spec we need to use these properties.\nWe will also need to support Redfish to display OemLastState as example in SBMR spec below:\n{\n  \"BootProgress\": {\n    \"LastState\": \"OEM\",\n    \"OemLastStae\" : \"0x010000000010010000\",\n    \"LastStateTime\": \"2020-03-13T04:14:13+06:00\",  \u003c-- already supported\n  },\n}",
      "parentUuid": "47fba14e_24e09838",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c83c3496_552562c1",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-13T02:21:03Z",
      "side": 1,
      "message": "I don’t think my question was really answered. Why isn’t this interface sufficient from a dbus perspective?\n\nhttps://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/State/Boot/PostCode.interface.yaml#L19",
      "parentUuid": "7ca13da4_deb289e7",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5faa7b2_e4b11bac",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000992
      },
      "writtenOn": "2022-10-13T03:02:39Z",
      "side": 1,
      "message": "Hi Patrick,\n\nIt\u0027s used for the PostCode and I don\u0027t think it will satisfy the BootProgress due to it not a writable method.\n```\nroot@mtjade:~# busctl introspect xyz.openbmc_project.State.Boot.PostCode0 /xyz/openbmc_project/State/Boot/PostCode0\nNAME                                     TYPE      SIGNATURE  RESULT/VALUE  FLAGS\norg.freedesktop.DBus.Introspectable      interface -          -             -\n.Introspect                              method    -          s             -\norg.freedesktop.DBus.ObjectManager       interface -          -             -\n.GetManagedObjects                       method    -          a{oa{sa{sv}}} -\n.InterfacesAdded                         signal    oa{sa{sv}} -             -\n.InterfacesRemoved                       signal    oas        -             -\norg.freedesktop.DBus.Peer                interface -          -             -\n.GetMachineId                            method    -          s             -\n.Ping                                    method    -          -             -\norg.freedesktop.DBus.Properties          interface -          -             -\n.Get                                     method    ss         v             -\n.GetAll                                  method    s          a{sv}         -\n.Set                                     method    ssv        -             -\n.PropertiesChanged                       signal    sa{sv}as   -             -\nxyz.openbmc_project.Collection.DeleteAll interface -          -             -\n.DeleteAll                               method    -          -             -\nxyz.openbmc_project.State.Boot.PostCode  interface -          -             -\n.GetPostCodes                            method    q          a(tay)        -\n.GetPostCodesWithTimeStamp               method    q          a{t(tay)}     -\n.CurrentBootCycleCount                   property  q          100           emits-change writable\n.MaxBootCycleNum                         property  q          100           emits-change writable\n```",
      "parentUuid": "c83c3496_552562c1",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7edce3a_2d1efefd",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-13T03:24:58Z",
      "side": 1,
      "message": "Do you mean to use GetPostCodesWithTimeStamp to update OemLastState? Per SBMR, we need to update OemLastState with 9 bytes Progress Codes. Even when we want to use GetPostCodesWithTimeStamp  for OemLastState, uint16 can just keep 7-bytes of data.",
      "parentUuid": "c5faa7b2_e4b11bac",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "332dff84_7066c86d",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-13T18:33:11Z",
      "side": 1,
      "message": "\u003e It\u0027s used for the PostCode and I don\u0027t think it will satisfy the BootProgress due to it not a writable method.\n\nIt isn\u0027t intended that you could write directly to the Boot.PostCode interface.  Your system should implement a Boot.Raw object (likely by the phosphor-host-postd repository).  Then phosphor-post-code-manager automatically listens to the signals emitted by the Boot.Raw interface and updates the Boot.PostCode tables.\n\nSee https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/yaml/xyz/openbmc_project/State/Boot/Raw.interface.yaml\n\n\u003e Per SBMR, we need to update OemLastState with 9 bytes Progress Codes. Even when we want to use GetPostCodesWithTimeStamp  for OemLastState, uint16 can just keep 7-bytes of data.\n\nI\u0027m not sure where you got uint16 from.  The Boot.Raw and Boot.PostCode have a uint64-based primary post code as well as an array[byte] for subsequent extended post codes.  If your system has a 9 byte post code, you can figure out how you want to split it across the \u0027uint64, array[byte]\u0027 entry.",
      "parentUuid": "c7edce3a_2d1efefd",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ce91b6e_476e3003",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-14T02:30:36Z",
      "side": 1,
      "message": "Writing to Boot.Raw object will create new PostCodes record for each time updating Boot.Raw. For example:\n        busctl set-property xyz.openbmc_project.State.Boot.Raw \\\n                /xyz/openbmc_project/state/boot/raw0 \\\n                xyz.openbmc_project.State.Boot.Raw Value \\(tay\\) \"0x200000000\" 0\n\nWill create new PostCodes record like:\n{\n  \"@odata.id\": \"/redfish/v1/Systems/system/LogServices/PostCodes/Entries/B1-1\",\n  \"@odata.type\": \"#LogEntry.v1_8_0.LogEntry\",\n  \"Created\": \"2022-10-13T07:01:18+00:00\",\n  \"EntryType\": \"Event\",\n  \"Id\": \"B1-1\",\n  \"Message\": \"Boot Count: 1; Time Stamp Offset: 0.0000 seconds; POST Code: 0x200000000\",\n  \"MessageArgs\": [\n    \"1\",\n    \"0.0000\",\n    \"0x200000000\"\n  ],\n  \"MessageId\": \"OpenBMC.0.2.BIOSPOSTCode\",\n  \"Name\": \"POST Code Log Entry\",\n  \"Severity\": \"OK\"\n},\n\nHowever, it is not I intended to have. I want to have BootProgress with OEM value (actually ARM UEFI Progress Code) in Redfish, as defined in the BootProgress schema as below (refer to http://redfish.dmtf.org/schemas/DSP2046_2022.2.html):\nBootProgress (v1.13+) {       --\u003e This object describes the last boot progress state.\n      LastState (v1.13+)      --\u003e The last boot progress state. For the possible property values, see LastState in Property details.\n      LastStateTime (v1.13+)  --\u003e The date and time when the last boot state was updated.\n      Oem (v1.13+) {}         --\u003e See the Oem object definition in the Common properties section.\n      OemLastState (v1.13+)   --\u003e The OEM-specific last state, if the LastState type is OEM.\n}\n\n\nAbout uint16, might be I am wrong but I refer to https://github.com/openbmc/phosphor-dbus-interfaces/blob/844e332c6a85c37e3feda0e092e09cd3bee53366/yaml/xyz/openbmc_project/State/Boot/PostCode.interface.yaml#L24",
      "parentUuid": "332dff84_7066c86d",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d6d71b1_06b43d52",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-14T09:02:20Z",
      "side": 1,
      "message": "\u003e I want to have BootProgress with OEM value (actually ARM UEFI Progress Code) in Redfish, as defined in the BootProgress schema as below \n\nThis still doesn\u0027t tell me why we need a new dbus interface.  It sounds like you don\u0027t like the bmcweb implementation as it currently stands.  That isn\u0027t a dbus problem.\n\n\u003e About uint16, might be I am wrong but I refer to\n\nThat is an input parameter to the function, which indicates which boot you\u0027d like the post code history from, not the post code itself.",
      "parentUuid": "2ce91b6e_476e3003",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f90ccd3d_0137e73e",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-14T09:22:21Z",
      "side": 1,
      "message": "You can find https://github.com/openbmc/bmcweb/blob/525fc07224884d3640e5c4a1b6a551aee024f7bd/redfish-core/lib/systems.hpp#L853 for current bmcweb implementation for BootProgress. It just supports LastState attribute but not OemLastState.\nThe dbusToRfBootProgress() function is to translate dbus\u0027s ProgressStages https://github.com/openbmc/phosphor-dbus-interfaces/blob/844e332c6a85c37e3feda0e092e09cd3bee53366/yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml#L22 to Redfish\u0027s LastState but missing Oem value.\nFor completeness, we need both LastState and OemLastState.",
      "parentUuid": "4d6d71b1_06b43d52",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d418d1b_ede667fd",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-14T09:26:38Z",
      "side": 1,
      "message": "\u003e current bmcweb implementation for BootProgress. It just supports LastState attribute but not OemLastState.\n\nAnd why can\u0027t OemLastState be populated from the existing post code records?",
      "parentUuid": "f90ccd3d_0137e73e",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8cab99c_fc775906",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-14T09:40:31Z",
      "side": 1,
      "message": "Let\u0027s try on setting OemLastState from PostCodes (via Boot.Raw) in bmcweb.\nAnd with this approach, I think we still need Oem value for ProgressStages enumerations to indicate the last stage is OEM.",
      "parentUuid": "2d418d1b_ede667fd",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75490756_fb49e7f9",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2022-12-14T19:23:16Z",
      "side": 1,
      "message": "I have similar questions to Patrick from this thread and we will need to work through those over in https://gerrit.openbmc.org/c/openbmc/bmcweb/+/58923. But at a high level, adding OEM as an option here is fine as the intent here was to match up with the Redfish specification and they do have an OEM option now.",
      "parentUuid": "e8cab99c_fc775906",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ed845ea_346a6f33",
        "filename": "yaml/xyz/openbmc_project/State/Boot/Progress.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2022-10-14T02:36:50Z",
      "side": 1,
      "message": "and this change is to add missing enum value for http://redfish.dmtf.org/schemas/DSP2046_2022.2.html#laststate",
      "revId": "6e847a377d15df7e46f8218788eb53207f5879e6",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}