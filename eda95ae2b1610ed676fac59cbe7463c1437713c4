{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8b224e57_0f24a409",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/CpuCore.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-10T20:57:52Z",
      "side": 1,
      "message": "I don\u0027t think you can have a core in multiple CPUs.",
      "range": {
        "startLine": 11,
        "startChar": 12,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ea3da4_5b856c7c",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/CpuCore.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1001369
      },
      "writtenOn": "2022-08-11T16:16:48Z",
      "side": 1,
      "message": "Fixed",
      "parentUuid": "8b224e57_0f24a409",
      "range": {
        "startLine": 11,
        "startChar": 12,
        "endLine": 11,
        "endChar": 16
      },
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec63ca4e_23811089",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-10T20:57:52Z",
      "side": 1,
      "message": "As I\u0027ve said elsewhere, I\u0027m not accepting one-off associations until we have an inventory design agreed to.  Otherwise we are defacto accepting one particular design.\n\nTo me there is no strong reason for associations on core/cpu/thread relationships.  This just adds noise to dbus when they are clearly a contained-by relationship (which can be handled with hierarchy).",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cdbec7b_487d84d7",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001369
      },
      "writtenOn": "2022-08-11T00:18:12Z",
      "side": 1,
      "message": "Are you referring to this inventory design doc ?\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/54205/3/designs/physical-topology.md",
      "parentUuid": "ec63ca4e_23811089",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edc9cdfe_759322da",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-11T17:43:09Z",
      "side": 1,
      "message": "There are multiple inventory designs in flight.  This is another one.\n\nhttps://gerrit.openbmc.org/c/openbmc/docs/+/41468",
      "parentUuid": "9cdbec7b_487d84d7",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a77912_ba5072ac",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001369
      },
      "writtenOn": "2022-10-18T22:59:12Z",
      "side": 1,
      "message": "The inventory design seems to be agreed upon now. (https://gerrit.openbmc.org/c/openbmc/docs/+/54205/3/designs/physical-topology.md).\n\nCan we merge this change?",
      "parentUuid": "edc9cdfe_759322da",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bced8efc_b6026434",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-19T04:40:12Z",
      "side": 1,
      "message": "The association would need to be updated to conform to https://github.com/openbmc/phosphor-dbus-interfaces/blob/master/requirements.md\n\nI think we\u0027ll end up with \u0027containing\u0027 \u0027contained_by\u0027 in this case.",
      "parentUuid": "76a77912_ba5072ac",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dc27308_317ae988",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001369
      },
      "writtenOn": "2022-10-24T20:26:14Z",
      "side": 1,
      "message": "I see... So instead of cores and cpu we use containing and contained_by as endpoint names. I wonder how will the case be handled when there are more than one relationships under an interface and as per guidelines the valid endpoints turn out to be \"containing\" and \"contained_by\" for all ?\n\nFor e.g. in the current case\n\n[cpu, cores] -\u003e [containing, contained_by]\n[associated_pcie_slots, upstream_processor] -\u003e [containing, contained_by]",
      "parentUuid": "bced8efc_b6026434",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a278597_13d0cc94",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-10-24T20:34:31Z",
      "side": 1,
      "message": "\u003e I wonder how will the case be handled when there are more than one relationships under an interface and as per guidelines the valid endpoints turn out to be \"containing\" and \"contained_by\" for all ?\n\nThis is exactly what we want.  Can you elaborate on your concerns?",
      "parentUuid": "5dc27308_317ae988",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98d0cdf2_03e56e88",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/README.md",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001369
      },
      "writtenOn": "2022-10-24T20:52:56Z",
      "side": 1,
      "message": "So say we use `containing` and `contained_by` as endpoints for both the relationships below\n\n[cpu, cores] -\u003e [containing, contained_by]\n[associated_pcie_slots, upstream_processor] -\u003e [containing, contained_by]\n\nWith this if you do `busctl get-property` as show below, it will return list of cores as well as the pcie_slots  right? If yes, then from bmcweb point of view, how would you know if it is a core or a pcie_slot ?\n\nbusctl get-property xyz.openbmc_project.ObjectMapper\n  /xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/containing\n    xyz.openbmc_project.Association endpoints\n    \n** Returns list of cores and pcie_slots **",
      "parentUuid": "0a278597_13d0cc94",
      "revId": "eda95ae2b1610ed676fac59cbe7463c1437713c4",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}