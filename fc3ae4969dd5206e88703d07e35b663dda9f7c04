{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dd10937d_7629f1c7",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-29T04:09:02Z",
      "side": 1,
      "message": "Should this go in its own interface?  I get that this is what Redfish does, but it would seem like\n\nReady/NotReady\n\nQuiesced/NotQuiesced\n\nUpdating/NotUpdating\n\nAre all independent states that can happen at any time.  For example, a bmc might be running an update while still in the NotReady State.  Obviously in Redfish we have to make a decision on which takes precedence, but I suspect separating out at least the update state into its own property is the right thing to do, rather than add a bunch more implementation details to the description.",
      "range": {
        "startLine": 59,
        "startChar": 19,
        "endLine": 59,
        "endChar": 35
      },
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9765ef7_91bfaef5",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-08-30T06:48:33Z",
      "side": 1,
      "message": "What do you think if we add new `UpdateStatus` property in this interface? This property indicate that BMC is updating something, and the BMC should not be reboot during this time.\n\nUpdateInProgress value is only used to indicate that BMC is updating itself.\n\nDo you have any comment for my suggestion @Patrick @Andrew @Ed?",
      "parentUuid": "dd10937d_7629f1c7",
      "range": {
        "startLine": 59,
        "startChar": 19,
        "endLine": 59,
        "endChar": 35
      },
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57c610cb_7923a0d1",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-08-28T15:58:59Z",
      "side": 1,
      "message": "@Thang How does State Manager gets to know that there is an update in progress? Is state manager relying on existence of ActivationBlocksTransition interface?",
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8aea81de_a47aa3cd",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1001198
      },
      "writtenOn": "2024-08-28T16:15:46Z",
      "side": 1,
      "message": "Currently, the phosphor-bmc-state-manager did not implement UpdateInProgress value. I created a commit to support this one https://gerrit.openbmc.org/c/openbmc/phosphor-state-manager/+/73456. The idea of this commit is the same with your comment, the phosphor-bmc-state-manager shall monitor `InterfaceAdded` signal. When `ActivationBlocksTransition` interface is added, it changes the CurrentBMCState to UpdateInProgress, when `ActivationBlocksTransition` is removed, it recover the BMC state.",
      "parentUuid": "57c610cb_7923a0d1",
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe7b4380_1e5c5d72",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2024-08-28T17:11:41Z",
      "side": 1,
      "message": "\"when ActivationBlocksTransition is removed, it recover the BMC state.\".\nThis should be more like when no ActivationBlocksTransition interface exist.",
      "parentUuid": "8aea81de_a47aa3cd",
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fc93146_00cb774d",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-08-29T04:09:02Z",
      "side": 1,
      "message": "\u003e The BMC should prevent BMC reboot action during updating phase to protect system.\n\nThis is a weird thing to enforce in the interface.  There\u0027s lots of implementations that don\u0027t need to enforce reboot prevention, and allow reboots (which abort the update process).\n\nI suspect at this interface level, this description should be removed.  The update daemon MIGHT operate that way, but this interface shouldn\u0027t\u0027 really reflect that.",
      "range": {
        "startLine": 64,
        "startChar": 27,
        "endLine": 65,
        "endChar": 49
      },
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9281d79_982e6b7b",
        "filename": "yaml/xyz/openbmc_project/State/BMC.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1000940
      },
      "writtenOn": "2024-08-30T03:47:37Z",
      "side": 1,
      "message": "I think that when a firmware is being flashed but not completed, terminating the action might take the firmware broken. So, if we allow the BMC reboots during firmware flashing, we might have the firmware broken",
      "parentUuid": "9fc93146_00cb774d",
      "range": {
        "startLine": 64,
        "startChar": 27,
        "endLine": 65,
        "endChar": 49
      },
      "revId": "fc3ae4969dd5206e88703d07e35b663dda9f7c04",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}