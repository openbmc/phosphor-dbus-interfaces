{
  "comments": [
    {
      "key": {
        "uuid": "e14e59c6_ddb3bc3f",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-24T15:58:58Z",
      "side": 1,
      "message": "Do we have any proposals on what this string would look like?  Does Redfish impose any requirements?",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c8e32a_60b2651f",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-05-24T16:09:22Z",
      "side": 1,
      "message": "I think Redfish imposes a requirement in terms of defining this:\n        \"ProcessorType\": {\n            \"enum\": [\n                \"CPU\",\n                \"GPU\",\n                \"FPGA\",\n                \"DSP\",\n                \"Accelerator\",\n                \"Core\",\n                \"Thread\",\n                \"OEM\"\n            ],\n\nThis is actually not specific to an accelerator. I propose we define the enum in Item.Processor, and have the \u0027Type\u0027 defined in Processor and here - that way we don\u0027t force implementations to implement both Item.CPU and Item.Accelerator. As far as the datatype goes, we could make it an enum having the values above to start with. Does this make sense?",
      "parentUuid": "e14e59c6_ddb3bc3f",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b016e2d2_74b7aa36",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-24T16:22:40Z",
      "side": 1,
      "message": "I don\u0027t understand why we would add this property then if that is the value.  This is already Item.Accelerator.  Redfish can fill in ProcessorType from that, can\u0027t it?  ie. the Redfish provider can make its own determination of this property value based on the type of object from dbus it is consuming.",
      "parentUuid": "32c8e32a_60b2651f",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17f5c49b_10785183",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-05-24T16:25:49Z",
      "side": 1,
      "message": "Do you mean we also define Item.GPU, Item.FPGA, etc? On Nvidia\u0027s platforms, we require GPU and FPGA to be differentiated when inventory is reported. Redfish supports that already. So we could either define other \"empty interfaces\" or add this property.",
      "parentUuid": "b016e2d2_74b7aa36",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c92e5cad_a9a74fa9",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-24T16:44:31Z",
      "side": 1,
      "message": "Or define Type as an enumeration of the useful ones to you here rather than an arbitrary string.\n\nI suspect it is useful to have Item/GPU anyhow though.  I don\u0027t have a good idea of what kind of inventory information might be on an FPGA vs an in-silicon accelerator to make a judgement on if we would want a separate Item.FPGA or an enumeration here to differentiate is sufficient for the time being.",
      "parentUuid": "17f5c49b_10785183",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce06c7b1_facb6b20",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-05-24T16:53:19Z",
      "side": 1,
      "message": "Almost all GPU related properties that we care about are already defined in Item.Cpu, Item.Decorator.Asset, etc. So I\u0027m leaning towards defining Type as an enum here.",
      "parentUuid": "c92e5cad_a9a74fa9",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f8c47b_92aa58f3",
        "filename": "xyz/openbmc_project/Inventory/Item/Accelerator.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-05-24T17:05:55Z",
      "side": 1,
      "message": "Even if Item.Cpu has a number of properties you would like to use for GPU, I\u0027d rather duplicate the interface than trying to conflate them.  It is likely to put us into a bind in the future by trying to make that one interface support different things.",
      "parentUuid": "ce06c7b1_facb6b20",
      "revId": "112087540166f293b193626611e3768004f777b3",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}