{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8d30a460_bec4451f",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-22T14:47:54Z",
      "side": 1,
      "message": "Can you add more details here? Who are the user(s) of this? Isn\u0027t there a systemd D-Bus API for the same purpose?",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ced8f52_48e1d245",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-26T13:20:52Z",
      "side": 1,
      "message": "\u003eWho are the user(s) of this?\n\nAny application which has the use case of dynamic update on its configuration can consume the latest/updated configuration data without restarting the application by make use of this interface.\n\n\u003eIsn\u0027t there a systemd D-Bus API for the same purpose?\n\nSystemd provides the application configuration reload option by enabling `ExecReload\u003d` in service file. The `ExecReload\u003d` can be configured as enqueuing a signal or by set `ExecReload\u003d` to a command(DBus command) that triggers a configuration reload of the daemon. And the command based approach is advised by systemd itself as it synchronous. \n\nDetails information on `ExecReload\u003d`: https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#ExecReload\u003d\n\nThe proposed DBus API can be invoked as mentioned above or the client application can invoke directly if the implementing application is not interested in modifying the application\u0027s service file.",
      "parentUuid": "8d30a460_bec4451f",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e2abec6_49fc4d88",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2025-08-26T20:25:48Z",
      "side": 1,
      "message": "\u003e Any application which has the use case of dynamic update on its configuration can consume the latest/updated configuration data without restarting the application by make use of this interface.\n\nThis doesn\u0027t tell me who the _clients_ of the interface are.  Who are you expecting to call this?\n\n\u003e Systemd provides the application configuration reload option by enabling ExecReload\u003d in service file.\n\nThere are some daemons which already support this via signals.  Why is this approach not good?\n\nsystemd also now includes support for `Type\u003dnotify-reload` which will use `sd_notify` to signal the daemon.  Is that something that could be leveraged?",
      "parentUuid": "2ced8f52_48e1d245",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93f0bb9a_cb473b3d",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-29T07:08:32Z",
      "side": 1,
      "message": "\u003eWho are you expecting to call this?\n\nExpected callers:\nAs per the recent IBM proposal on redundant BMC, this interface can be used to update the sibling BMCs data in sync with the current running BMC(active BMC).\n\nFor example, when the active BMC updates data/config and is synced to its sibling BMC, the application responsible for syncing the data could notify the application owner to reload with the updated data by make use of the proposed interface.\n\nWhile considering the design, I thought of making the interface generic so that it can also be used when applications need to reload their configuration dynamically. Today, users typically update configuration files and then restart the service to apply the changes. A reload mechanism would avoid costly restarts — for instance, updating message_registry.json currently requires restarting phosphor-logging, which is expensive when many PELs exist. Reloading instead would apply the updates much more efficiently.\n\nAt the moment, my examples mainly point to cases where the user updates configuration, in addition to the redundant BMC use case where the system updates the config dynamically.\n\nRelated discussion on systemd reload happened [here also](https://gerrit.openbmc.org/c/openbmc/docs/+/70233/9..18/designs/redundant-bmc.md#b607).\n\n\u003e Why is this approach not good?\n\nYes, signal-based approach could also work. Initially, when referring to the systemd documentation on `ExecReload\u003d`, I overlooked the notify-reload option. My concern with signals was that reloading via `ExecReload\u003d` is asynchronous, making it difficult to track completion or enforce ordering.\n\n\u003e Is that something that could be leveraged?\n\n--\u003e Yes, `Type\u003dnotify-reload` could be leveraged to improve reload handling, since it allows daemons to send signals back to systemd during reload start and upon completion. Currently most of the daemons configures `Type\u003ddbus` and can\u0027t configure both modes in `Type\u003d` together. Switching from `dbus` to `notify-reload` would change how systemd tracks readiness, since it would no longer wait for bus name acquisition automatically. One option would be for the application to send sd_notify(\"READY\u003d1\") after the D-Bus name has been acquired. Could you please share your views on this in light of openbmc guildelines?\n\n--\u003e As mentioned above, suppose if other application wants to reload, the application could invoke the systemd\u0027s Reload D-Bus API. However, the proposed interface can still useful, as it allows reloading a specific configuration (via proposed method called `Reload`) by passing the configuration path as an argument. Since systemd’s reload handling does not support passing arguments, such targeted reloads would need to be invoked through the application’s own API rather than via systemd.\n\nI could add these details in commit message also as next patch along with addressing other review comments.",
      "parentUuid": "2e2abec6_49fc4d88",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ee7c942_9833d6e6",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2025-09-04T07:38:57Z",
      "side": 1,
      "message": "I wonder if we leave Type\u003ddbus and just remove the object from d-bus when we get the Reload would work? Then the service wont report itself as \"Started\" until it has reloaded the data files AND put itself back on d-bus. Or just moving to notify-reload and putting an extra line of code (to notify systemd) after adding the object to dbus would be ok too.\n\nThe ability to tell an application to only reload specific pieces of its data has some merit, but do we really have any valid use cases for that? For simplicity, I think it\u0027s going to be much cleaner (and testable) if we just have applications reload all of their data in which case a \"ExecReload\u003d/bin/kill -HUP $MAINPID\" should be fine.",
      "parentUuid": "93f0bb9a_cb473b3d",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1ee3201_eefb8833",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-09-08T10:49:51Z",
      "side": 1,
      "message": "My understanding is that `Type\u003ddbus` ensures that the service name specified via BusName in the unit file matches the requested D-Bus name, allowing systemd to confirm that the service has successfully started.\nIn our current OpenBMC project, we claim the name only after restoring persisted D-Bus data during start up, so interface-added/removed signals are not emitted at that stage.\n\nHowever, during a reload, subscriber applications may already be running. In such cases, we need to emit the appropriate update signals (e.g., interface added/removed or properties changed) to reflect the reloaded data for the subscribers. I believe the interface implementation already provides support for this.\n\nIf we adopt `Type\u003dnotify-reload` with the necessary `sd_notify` calls and ExecReload with SIGHUP to handle both the D-Bus service startup and the reload scenario, we could avoid proposed `ReloadAll` API. \n\nHowever, we would still need a mechanism to reload only a specific file (or a list of files). For instance, updating an error log property could otherwise trigger the reloading of thousands of PELs (IBM currently has ~3000, and this number is expected to grow), which would be an expensive operation.\n\nIs it ok to update the proposed interface with a Reload(paths) method?",
      "parentUuid": "4ee7c942_9833d6e6",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e550811_485ec275",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2025-09-08T12:12:47Z",
      "side": 1,
      "message": "If we are fine with updating the application to use Type\u003dnotify-reload, then we could remove the need for ReloadAll. However, we should also consider modifying the application so that it sends sd_notify only after the D-Bus service name has been successfully claimed (as it currently does during startup) and again after all configuration and persisted data have been reloaded.\n\nHaving the ability to reload a specific file (or a set of files) would still be beneficial.",
      "parentUuid": "b1ee3201_eefb8833",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b406360e_f82b9caf",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-22T14:47:54Z",
      "side": 1,
      "message": "What needs to happen prior to calling this/Reload API?",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d4d948d_8995be4f",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 6,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-26T13:20:52Z",
      "side": 1,
      "message": "As mentioned above, whenever the application\u0027s config/data is modified then the proposed API could be invoked so that the application could load with the latest config/data.",
      "parentUuid": "b406360e_f82b9caf",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b02e0136_76a33285",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-22T14:47:54Z",
      "side": 1,
      "message": "How does the caller know which application is hosting this API?",
      "range": {
        "startLine": 9,
        "startChar": 10,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0486a80_2a6e20bf",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-26T13:20:52Z",
      "side": 1,
      "message": "The caller application will be aware of the owner of the updated data/config. Thereby caller will be able to get the service name via GetObject of the object mapper using the respective application manager interfaces(something similar) along with the proposed Reload Interface name.",
      "parentUuid": "b02e0136_76a33285",
      "range": {
        "startLine": 9,
        "startChar": 10,
        "endLine": 9,
        "endChar": 21
      },
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fbbf36_cff36fe6",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-22T14:47:54Z",
      "side": 1,
      "message": "How is progress/completion tracked?",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56197cfc_46d81f1c",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-26T13:20:52Z",
      "side": 1,
      "message": "Since this will be a DBus call, the progress/completion can be tracked by waiting for the API to be completed. \n- In case of reload failure, we could define error codes that can be returned from this API. I will define in my next patch set.\n- In case of long running reload, it can be extended to track the progress by utilizing the common [Progress interface](https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/83048/comment/18fbbf36_cff36fe6/).",
      "parentUuid": "18fbbf36_cff36fe6",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63670a87_ac777ca7",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2025-08-22T14:47:54Z",
      "side": 1,
      "message": "What error handling needs to happen on these paths? Anything to be thrown as a D-Bus exception?",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "355df41b_bd49ea12",
        "filename": "yaml/xyz/openbmc_project/Control/Reload.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001993
      },
      "writtenOn": "2025-08-26T13:20:52Z",
      "side": 1,
      "message": "Yes. agree. The errors when invalid paths are given as argument, can be handled by throwing the exception `xyz.openbmc_project.Common.Error.InvalidArgument`.\n\nThanks for pointing out.",
      "parentUuid": "63670a87_ac777ca7",
      "revId": "3cee2f89196d9cbb564b804e60f6f9ffda6d53bc",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}