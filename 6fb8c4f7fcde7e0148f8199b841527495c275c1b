{
  "comments": [
    {
      "key": {
        "uuid": "517d5aa0_8614545c",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-04T05:57:56Z",
      "side": 1,
      "message": "The interface was using `RequestedActivation` to do the \"activate\u0027 operation.\nSo I was expecting the `RedundancyPriority` and `ClearConfig` to be the properties of this interface, instead of the method parameters.\n\nBy adding this method, the interface will have two ways to do the \"activation\", which we should avoid.",
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eda38aa_f1efa23e",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-04T06:13:56Z",
      "side": 1,
      "message": "Yes Lei YU.\nBut this keeps on increasing the complexity and the order of the execution. Hence the correct plan would be to deprecate the RequestedActivation, and go ahead with Activate method (which can accept optional RedundancyPriority \u0026 ClearConfig attribute). \n\nThe problem with old approach is (before RequestedActivation, other properties must be set, and in that case, we need to differentiate the state of the object as the property value during that time, will not be applicable or will convey different meaning, till RequestedActivtion is applied. With method approach, this can also be avoided.",
      "parentUuid": "517d5aa0_8614545c",
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3762b94_62b067ba",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-04T06:29:27Z",
      "side": 1,
      "message": "So eventually this change will break existing code (involves bmcweb/webui).\nI think we should be very careful about such changes.\n\n\u003e The problem with old approach is (before RequestedActivation, other properties must be set, and in that case, we need to differentiate the state of the object as the property value during that time, will not be applicable or will convey different meaning, till RequestedActivtion is applied. With method approach, this can also be avoided.\n\nI am not following.\nDo you mean the `RedundancyPriority` and `ClearConfig` are not really the properties of an activation object?\nI am not sure for what `RedundancyPriority` is used here, but for `ClearConfig`, it could be explained as a property of activation, to indicate that if this is to be activated, the config shall be cleared.",
      "parentUuid": "4eda38aa_f1efa23e",
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37b4a6c6_765980d6",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-04T06:32:50Z",
      "side": 1,
      "message": "An off-topic discussion:\nWhen I was first using the phosphor-dbus-interfaces, I remembered that someone suggested that it\u0027s encouraged to use properties instead of methods. I do not remember who made this suggestion. But if you see existing interfaces, we do use properties a lot to express actions, e.g. RequestedActivation, RequestedBMCTransition, etc.\n\n@Patrick @Brad @Adriana do you know the history?",
      "parentUuid": "a3762b94_62b067ba",
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5e4b215_dfe9a05b",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 4,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-04T08:39:29Z",
      "side": 1,
      "message": "yes, that\u0027s correct expectation Lei, as long as the value act like a attribute and used to change, property makes sense. (Because keeping it as property allows us to get the PropertiesChanged signal and easier to maintain the state value). \n\nBut in this case, with (more values to be set), using property will not be a good one, and better to switch to method based one. (esp, the order of property change will be a troublesome to maintain).\n\n@Patrick, earlier we discussed the same in IRC (just thought of refreshing your memory :) ).",
      "parentUuid": "37b4a6c6_765980d6",
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efe521e2_6f2724b9",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-02-04T02:51:55Z",
      "side": 1,
      "message": "how is this possible ? are we reserving any value for this ? \n\nNote: In your earlier patchset it was property name with value, so there was a way not to expose the same. As current patch expose this as parameter, this can\u0027t be a optional value / not -specified",
      "range": {
        "startLine": 12,
        "startChar": 36,
        "endLine": 13,
        "endChar": 27
      },
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "267cf0f5_3fcdd353",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2020-02-04T06:15:30Z",
      "side": 1,
      "message": "I presumed, if there are no params are passed the activate happens on the default firmware target i.e with redundancy priority \u00270\u0027. I will change it back to Dict to be consistent and compatible to older approach as well.",
      "parentUuid": "efe521e2_6f2724b9",
      "range": {
        "startLine": 12,
        "startChar": 36,
        "endLine": 13,
        "endChar": 27
      },
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9538cc95_b9abf84a",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-04T06:29:27Z",
      "side": 1,
      "message": "Is it a value of the target priority to replace?\nE.g. if the system has 3 versions, one with priority 0 which is the running software;\nthe others with priority 1 and 2, which are the backup software.\n\nAnd when this RedundancyPriority is set to 1, it is going to replace the one with priority 1, and when it\u0027s set to 0, it is going to replace the running software?\n\n(I am not sure if the running software could be \"erased and updated\")",
      "range": {
        "startLine": 11,
        "startChar": 14,
        "endLine": 13,
        "endChar": 27
      },
      "revId": "6fb8c4f7fcde7e0148f8199b841527495c275c1b",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}