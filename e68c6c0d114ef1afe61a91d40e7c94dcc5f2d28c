{
  "comments": [
    {
      "key": {
        "uuid": "c7abe72d_59627792",
        "filename": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-07T18:36:11Z",
      "side": 1,
      "message": "Is there some documentation updates needed on how these are intended to be used?  Some unanswered questions I have:\n\n1. How does the dbus path interact with this?  Why can\u0027t the dbus path of the object be used to create unique entities?\n\n2. What is the expected format of these strings?  Can any comparison be done between two objects with different versions?\n\n3. What is an \"owning entity\"?\n\n4. What is a \"message registry\"?  Nothing else in this object uses this term, so I don\u0027t even know what it is a reference to.\n\nI\u0027d like to see either a readme or a commit in docs to clarify these, in addition to any description updates that might be appropriate.",
      "revId": "e68c6c0d114ef1afe61a91d40e7c94dcc5f2d28c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9d22b3_8607d092",
        "filename": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-04-12T09:51:30Z",
      "side": 1,
      "message": "\u003e 1. How does the dbus path interact with this?  Why can\u0027t the dbus path of the object be used to create unique entities?\n\nThe dbus path is hardcoded here /xyz/openbmc_project/BiosConfig/Manager (https://gerrit.openbmc-project.xyz/c/openbmc/bios-settings-mgr/+/35563/)\n\nThe BIOS table would be different for different companies, in that case when redfish creates its own registry from this BIOS table. Here the confusion is what if two companies take the openbmc stack and build the BIOS conf manager -\u003e how to generate a unique name for the BIOS registry.\n\nHence there should be way in the dbus object which should tell that who owns this registry - like IBM Intel Facebook, to differentiate each of them.\n\n\n\u003e 2. What is the expected format of these strings?  Can any comparison be done between two objects with different versions\n\nThe format would look something like x.x.x\n\n\n\u003e 3. What is an \"owning entity\"?\n\nDefines who is the owner of the BIOS table - eg., company name.\n\n\n\u003e 4. What is a \"message registry\"?  Nothing else in this object uses this term, so I don\u0027t even know what it is a reference to.\n\nMeta data of the BIOS table is the BIOS message registry.\n\n\n\"Redfish Message Objects can be represented in different ways. In bmcweb, we have chosen to use Message Registries with Message Objects that are referenced using a MessageId and MessageArgs fields.\"\n(Ref: https://github.com/openbmc/docs/blob/master/architecture/redfish-logging-in-bmcweb.md#:~:text\u003dthe%20Redfish%20Specification.-,Message%20Registries,redfish%2Fv1%2FRegistries%22.)\n\nIn bmcweb, the bios\u0027s message registry is under \"redfish-core/include/registries/bios_registry.hpp\"\nBut as per the comments, it is said that two systems shouldnt publish the message registries with same name. Hence we came up with the owning entity and version as the parameters to differentiate each of them\nSo, with these parameters, specific message registries can be created.",
      "parentUuid": "c7abe72d_59627792",
      "revId": "e68c6c0d114ef1afe61a91d40e7c94dcc5f2d28c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5111846a_66657643",
        "filename": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2021-04-19T18:31:58Z",
      "side": 1,
      "message": "\u003e The BIOS table would be different for different companies, in that case when redfish creates its own registry from this BIOS table. Here the confusion is what if two companies take the openbmc stack and build the BIOS conf manager -\u003e how to generate a unique name for the BIOS registry.\n\nI don\u0027t understand what this solves or how it could be accomplished.  You could have a system with two different BIOS vendors (consider a Blade-Center type system for example).  How does the BMC know which \"owning entity\" to use here?\n\nIf we need some kind of unique identifier, that is because there are multiple of them in a single system?  Why can\u0027t the dbus path be used to differentiate?\n\n\u003e The format would look something like x.x.x\n\nI\u0027ve gained no more insight from this response.  Please update the commit with your proposal.\n\nAll of the rest of your responses follow in this vein as well.  The purpose of my questions are that you do not have enough information in the commit for us to merge it.  These are questions that any other casual reader should have as well and they cannot be answered by simply pointing backwards to a Gerrit review.",
      "parentUuid": "8b9d22b3_8607d092",
      "revId": "e68c6c0d114ef1afe61a91d40e7c94dcc5f2d28c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e097037b_be53c8ac",
        "filename": "xyz/openbmc_project/BIOSConfig/Manager.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000401
      },
      "writtenOn": "2021-04-21T09:20:32Z",
      "side": 1,
      "message": "Hi Patrick.\n\nCurrently, the redfish BIOS registry URI for a single system would be:\n\"/redfish/v1/Registries/BiosAttributeRegistry\"\n\n\n\u003e  You could have a system with two different BIOS vendors (consider a Blade-Center type system for example).  How does the BMC know which \"owning entity\" to use here?\n\nConsidering this case (where there are multiple BIOS Vendors), we would be having equal number of Bios Attribute Registries.\n\nThe requirement is \"we should not be reporting two different BIOS message registries with the same name\".\n\nFor example, say we have two systems (facebook and IBM) having openbmc stack, with the current implementation, we would be displaying two registries with the same name \"BiosAttributeRegistry\"\n\nSo, in terms of Redfish responses, bios registries should have different names for each system.\n\nIn this case, as an initial thought, I thought of defining the \"owning entity\" (BIOS vendor) in the dbus object to differentiate each of the systems implementing BIOS message registries. Hence, we would be having a unique bios registry name in the redfish response, for example: \"/redfish/v1/Registries/\u003cowning entity\u003e_BiosAttributeRegistry\"\n\n\n\u003e  Now as you suggested that why not use the unique Dbus object.\n\nI am hoping, you mean to say that for IBM system, there would be a unique dbus object name v/s for facebook, the D-bus object name would be unique.\nPlease correct me if i am getting it wrong here. Thanks.",
      "parentUuid": "5111846a_66657643",
      "revId": "e68c6c0d114ef1afe61a91d40e7c94dcc5f2d28c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}