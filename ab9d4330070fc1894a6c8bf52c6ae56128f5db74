{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f469df26_fdb90383",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-27T12:40:12Z",
      "side": 1,
      "message": "How is this different from the dump type?  Isn\u0027t the \"fault log type\" simply an artifact of the hardware from which we are collecting the dump?",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9157ae92_94fd261d",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-27T15:05:59Z",
      "side": 1,
      "message": "This is sub type of Dump under FaultLog type dump.\nLooking further we can re-use DumpType parameter , by extending dump/faultlog/CreateInterface.yaml. I will update this commit with this.",
      "parentUuid": "f469df26_fdb90383",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a63d10_a0301611",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-27T15:13:44Z",
      "side": 1,
      "message": "I\u0027m slightly lost as to how this is used. In what cases would a user want to pick a crashdump vs CPER?  Isn\u0027t this dictated by the machine design?",
      "parentUuid": "9157ae92_94fd261d",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4524cac5_89090e39",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-27T16:43:05Z",
      "side": 1,
      "message": "In this commit am just following the existing types. See https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/53018/7..13/yaml/xyz/openbmc_project/Dump/Entry/FaultLog.interface.yaml#b33 for more details related to this.\nAMD packages Host Fault/Non-Fatal error Dumps in CPER format.  and planning to use Faultlog-\u003e CPER type. \n\nDump/Entry/FaultLog -\u003eAdditionalTypeName  is used to suppport Crashdump in custom format. (OEM).",
      "parentUuid": "d3a63d10_a0301611",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5dded23_7b595bd5",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-27T16:50:31Z",
      "side": 1,
      "message": "I don\u0027t think I gained more insight from your response.\n\nWhy do we need this to be selected at a dbus-interface level?  Who is going to make the decision (a human or what piece of code)?  Why isn\u0027t this automatic based on the type of failure and/or the hardware design?\n\nIs there any case where a single BMC needs to support both CPER and \"crashdump\"?  Why?  If so, where does the decision as to which collection type is done happen?",
      "parentUuid": "4524cac5_89090e39",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e84f4e8_b77fcbf8",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-28T07:20:25Z",
      "side": 1,
      "message": "Adding @Claire Initial author of this interface. to provide background on Patrick\u0027 question.\n\nPatrick,  AMD design approach is mentioned here https://gerrit.openbmc.org/c/openbmc/docs/+/68440/12/designs/oem/amd/amd-bmc-ras.md#103. High level in the AMD design BMC RAS application packages data in CPER format.  My understanding( not an expert ) Clarie\u0027s initial design proposal to support CPER format Host failing data ( Type CPER) or RAW or OEM Crashdump format with the help of additional types.",
      "parentUuid": "c5dded23_7b595bd5",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5213681f_13d848d9",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-28T12:14:55Z",
      "side": 1,
      "message": "\u003e High level in the AMD design BMC RAS application packages data in CPER format.\n\nThis is what is leading me to believe this is a machine/architecture decision and doesn\u0027t need to be a parameter to the dump request.",
      "parentUuid": "9e84f4e8_b77fcbf8",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f45b3e15_7a2d328e",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-28T12:38:30Z",
      "side": 1,
      "message": "How Phosphor-debug-collector createdump api implmention gets the type information here ?  (https://gerrit.openbmc.org/c/openbmc/phosphor-dbus-interfaces/+/53018/7..13/yaml/xyz/openbmc_project/Dump/Entry/FaultLog.interface.yaml#5). This information is required  to create dump Entry required properties.",
      "parentUuid": "5213681f_13d848d9",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213058da_abb4fbe9",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-28T13:10:46Z",
      "side": 1,
      "message": "How does it know to use the AMD code and not the ARM code when they both generate CPER?  How would whatever is calling phosphor-debug-collector know?  I don\u0027t know what the intended design is. There is a bit of decision-responsibility that on the surface doesn\u0027t make sense to me to spread across two processes via the dump-request interface.\n\nIn most cases isn\u0027t \"processor failed and we need to collect debug data\" just a GPIO?  It seems pointless to write machine-specific code that decides the parameters to called PDC with for just a GPIO signal.  PDC can probably deduce this from Inventory information, right?",
      "parentUuid": "f45b3e15_7a2d328e",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a4cb2f7_40b8043b",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-02-28T14:29:04Z",
      "side": 1,
      "message": "https://github.com/openbmc/docs/blob/master/designs/hw-fault-monitor.md#proposed-design document provides refernce to the PDC flow. \"The new fault log would contain dump files that are collected in a variety of ways in a variety of formats. A new fault log dump entry class (deriving from the \"Entry\" class in dump_entry.hpp) would be defined with an additional \"dump type\" member variable to identify the type of data that a fault log dump entry\u0027s corresponding dump file contains.\" .\n with existing d-bus interfaces is missing support of data format info . am not familiar with various data format collects in each architecture. Entry interface already have support for types. With this commit am trying to enable the create intrefcace to get the same info from the application responsible for generating the faultlog file.",
      "parentUuid": "213058da_abb4fbe9",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "164ba2ad_21b5c5bf",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1001143
      },
      "writtenOn": "2024-03-01T02:53:12Z",
      "side": 1,
      "message": "Here is where I left off, https://gerrit.openbmc.org/c/openbmc/phosphor-debug-collector/+/62581 -- apologies, I got pulled onto other projects and didn\u0027t finish the upstreaming yet :(, also I\u0027m OOO for the next 2 weeks. In the code you\u0027ll see there are dbus match rules that determine the dump type (e.g. registerCperLogMatch(), registerCrashdumpMatch()).",
      "parentUuid": "4a4cb2f7_40b8043b",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee9c933d_847b2136",
        "filename": "yaml/xyz/openbmc_project/Dump/Create.interface.yaml",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2024-03-01T12:13:13Z",
      "side": 1,
      "message": "High level design direction looks good, PDC already have elog watch infrastructure similar to your proposed wip code. Posted comments in PDC review.  CPER type dump object creation is pretty close to existing elog watch based infrastructure code. It will be good to provide input on the design direction you planned for crashdump type dumps. \nWhy the design direction is changed in crashdump type dump?",
      "parentUuid": "164ba2ad_21b5c5bf",
      "revId": "ab9d4330070fc1894a6c8bf52c6ae56128f5db74",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}