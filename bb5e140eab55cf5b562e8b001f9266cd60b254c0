{
  "comments": [
    {
      "key": {
        "uuid": "6dc46a5b_dff57bd2",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-11T18:56:32Z",
      "side": 1,
      "message": "I must have missed the follow on discussion ~Feb 4th to change this to a dict.  Dicts are bad because they cannot be statically confirmed (ie. at compile time).  Do we really want to start passing parameters as dictionaries in interfaces?  Are there other examples of doing that and has it worked well?\n\nIt seems like we\u0027re trying to pass them as \u0027dict\u0027 because they are optional?  The typical way to create optional items is to create a new interface that is optionally added to the same object.  We could add a new interface with a property \"DesiredRedundancyPriority\" that must be set before the Activation property.  Implementations can then either not implement this interface or implement it with the desired default (0?).",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5d6f633_a282c8fd",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000312
      },
      "writtenOn": "2020-02-12T09:54:04Z",
      "side": 1,
      "message": "This is new approach we are trying. Yes, dicts are chosen since the parameters are optional. With this method, the no.of parameters and its types can be varied as per each OEM\u0027s requirements. For e.g: now we want to send both priority value and clearconfig bool to the method, later in future we might need to pass any other parameters that\u0027s needed for activation.\nWe don\u0027t want to limit or confine the Activation process to one\u0027s design specific.",
      "parentUuid": "6dc46a5b_dff57bd2",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bee855c_f193bf1b",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-02-18T18:49:24Z",
      "side": 1,
      "message": "My concern with this approach is much broader than this specific feature.  If we start to allow dynamic fields like this, there is no way to document and statically confirm what are valid.  \n\nOne of the reasons we moved away from a dynamic language like Python was because we kept running into maintenance issues where one part of the code would change and you couldn\u0027t tell until you exercised that code path.  With dynamic properties like this we have no way to know if a particular client/server combination of this dbus interface will work together without runtime tests, and we don\u0027t have a good runtime testing framework that is supported by all machines.",
      "parentUuid": "d5d6f633_a282c8fd",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c0c753_355e3d67",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 8,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-19T01:41:23Z",
      "side": 1,
      "message": "@Patrick What do you suggest for such case?\nI had comments before to use separated properties, which resolves the above concern (and re-use the RequestedActivation). But at that time there were disagreements.",
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b03407_05cf8a5b",
        "filename": "xyz/openbmc_project/Software/Activation.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1000044
      },
      "writtenOn": "2020-02-19T01:41:23Z",
      "side": 1,
      "message": "Trailing space.",
      "range": {
        "startLine": 12,
        "startChar": 66,
        "endLine": 12,
        "endChar": 67
      },
      "revId": "bb5e140eab55cf5b562e8b001f9266cd60b254c0",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}