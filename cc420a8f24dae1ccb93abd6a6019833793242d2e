{
  "comments": [
    {
      "key": {
        "uuid": "56c0f65a_da072f2e",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-05-10T11:58:30Z",
      "side": 1,
      "message": "I think some of the detail in the commit message should be described here as well - what typically implements this, and what typically uses this? Also you should mention that the implementer may also implement the UUID D-Bus interface since that is an MCTP specified way to aid identification.\n\nSome of the text here (and the property description below) might be from DSP0236 and it should be fine to just point to that. More relevant here is the why and how. You need to specify details like:\n- when are objects supposed to be created by the implementer (post MCTP discovery?)?\n- does a bridge endpoint need to be specified?\n- one object per discovered endpoint?\n- why are EID and SupportedMessageTypes needed to be implemented?\n- UUID?\n- what should happen if an endpoint goes down?\n- lifetime of the objects\n- is there a well known root path that implementers must know of?\n- what about connected bus type (where applicable)?",
      "revId": "cc420a8f24dae1ccb93abd6a6019833793242d2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7051373_9e3963a8",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000056
      },
      "writtenOn": "2021-05-10T12:08:20Z",
      "side": 1,
      "message": "I think you need connected bus type because for a case where an implementation assigns the same EID to two bus paths to an endpoint, the bus type will enable upper layers to pick one (based on speed/redundancy). The \"bus type\" that I\u0027m talking about is \"MCTP physical medium identifiers\" from DSP0239.",
      "parentUuid": "56c0f65a_da072f2e",
      "revId": "cc420a8f24dae1ccb93abd6a6019833793242d2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58080e28_0f141d90",
        "filename": "xyz/openbmc_project/MCTP/Endpoint.interface.yaml",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1000005
      },
      "writtenOn": "2021-05-10T12:42:06Z",
      "side": 1,
      "message": "The destination endpoint described by this interface can be behind a MCTP bridge. The goal is to have upper layer protocol like PLDM abstracted from the MCTP network and topology information.\n\nIf the case is that the BMC has multiple local physical interfaces[1], and the suggestion is that PLDM should be able to specify the interface the MCTP message goes out. My view is that it should be another interface that exposes the possible transport types to upper layer protocols.\n\n[1]https://github.com/openbmc/docs/blob/master/designs/mctp/mctp-kernel.md#structure-interfaces--networks",
      "parentUuid": "a7051373_9e3963a8",
      "revId": "cc420a8f24dae1ccb93abd6a6019833793242d2e",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}