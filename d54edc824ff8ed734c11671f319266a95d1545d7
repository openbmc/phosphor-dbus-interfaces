{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1cbe9dbe_17ef5ee4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-05-11T20:48:05Z",
      "side": 1,
      "message": "cap",
      "range": {
        "startLine": 9,
        "startChar": 48,
        "endLine": 9,
        "endChar": 58
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc1c1b0_81c603eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-11T19:42:50Z",
      "side": 1,
      "message": "What does this mean?  If the value can\u0027t be read, the get call should return a dbus error, not -1.",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed3aa70e_cb0741f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-11T20:11:40Z",
      "side": 1,
      "message": "Having a hardware error show up in a GetProperty call is really ugly.  Most dbus object servers don\u0027t have a way to differentiate if one property has a failure.  So you either get all properties or none.  Having the GetProperty callback fail makes it, typically, so that the whole GetProperties call fails.  That\u0027ll push a lot more work onto clients like bmcweb.",
      "parentUuid": "2fc1c1b0_81c603eb",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "645625e7_3a93ae8f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-11T20:21:50Z",
      "side": 1,
      "message": "\u003e Having a hardware error show up in a GetProperty call is really ugly.\n\nWait.... Are we hooking hardware property reads directly to dbus?  So a getProperty does a hardware blocking read of that device?  That\u0027s a generalized anti-pattern, because you don\u0027t get PropertiesChanged events, and you get this \"one failure propagates to clients\" behavior if the bus is ever unreliable.\n\n\u003e  Most dbus object servers don\u0027t have a way to differentiate if one property has a failure.  So you either get all properties or none.\n\nSure, Redfish is similar.  There\u0027s not a good way to return partial data, nor do clients want to see partial data.  I\u0027m not sure this changes that.\n\n\u003e  Having the GetProperty callback fail makes it, typically, so that the whole GetProperties call fails.  That\u0027ll push a lot more work onto clients like bmcweb.\n\nWhy\u0027s that?  Bmcweb just turns that into an error and gives it back to the http client, the same as it would if the bus name didn\u0027t exist, or if there was a general dbus failure.  I agree, I don\u0027t really want to push work into the clients, but proposing yet another way that things can fail pushes more work into clients to then translate ways in which things can fail.  We already have to handle dbus errors regardless;  Handing dbus errors, AND magic values just puts more code in bmcweb, not less.",
      "parentUuid": "ed3aa70e_cb0741f0",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45424e21_e4adac9d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-11T21:22:47Z",
      "side": 1,
      "message": "\u003e Are we hooking hardware property reads directly to dbus? \n\nNo... I don\u0027t think so.\n\n\u003e I don\u0027t really want to push work into the clients, but proposing yet another way that things can fail pushes more work into clients to then translate ways in which things can fail.\n\nWe should probably stop talking about this in terms of a failure.  Maybe there is an error of some sort inside the implementation, but effectively this is \"I don\u0027t have an answer to this question\" (from an implementation perspective).  We use magic values all over dbus to express that, when the property isn\u0027t an enumeration.  This is why, for example, sensor and thresholds are NaN.",
      "parentUuid": "645625e7_3a93ae8f",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f88a881_e73daeec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2024-03-11T21:33:05Z",
      "side": 1,
      "message": "Right, if this is to support the information going unavailable, lets get that noted in the commit message, like I originally asked.  \"the reason of not getting this value is unknown.\" isn\u0027t very descriptive.  Maybe we should mention that this might be unavailable because the power is off, or the link is down?  Those are the two cases I can think of where we\u0027d want to use this.\n\nI would expect failures to still take the failure path, otherwise outside clients don\u0027t know the difference between \"This has failed\" and \"This info is unavailable in the current state\".",
      "parentUuid": "45424e21_e4adac9d",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 11,
        "endChar": 11
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d34c39ae_ce2bffd9",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-05-11T20:48:05Z",
      "side": 1,
      "message": "I\u0027d prefer not to change the type on this property and I don\u0027t particularly care for using -1 as an error state.  Maybe \u0027minint\u0027.  If we don\u0027t want to change the type we could default to \u0027maxint\u0027 too, which would be obviously unreasonable for a number of PCIe lanes.\n\nCan you describe the problem you are envisioning?  Wouldn\u0027t \u0027MaxLanes\u0027 have the same issue?",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "792b990d_a896077b",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000522
      },
      "writtenOn": "2022-05-19T12:38:39Z",
      "side": 1,
      "message": "I am trying to differentiate the situation where LanesInUse value is not known due to a known failure and an unknown failure.\n\nIMO MaxLanes should not have the same issue as that value is hardcoded.",
      "parentUuid": "d34c39ae_ce2bffd9",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89db3b92_687eb630",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-05-19T13:10:34Z",
      "side": 1,
      "message": "\u003e I am trying to differentiate the situation where LanesInUse value is not known due to a known failure and an unknown failure.\n\nCan you please elaborate?  I don\u0027t know what you mean by this or how it can be useful to expose this conceptually out into other interfaces.",
      "parentUuid": "792b990d_a896077b",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f0de80_e4da17cb",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000522
      },
      "writtenOn": "2022-05-19T13:25:19Z",
      "side": 1,
      "message": "LanesInUse value 0 would mean the link is down/failed.\nUnknown is a separate situation where the reason is unknown.",
      "parentUuid": "89db3b92_687eb630",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd49ce1_dfc8578c",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-08-05T21:16:02Z",
      "side": 1,
      "message": "Please use \u0027minint\u0027, as I specified earlier, for \"Unknown\".",
      "parentUuid": "d7f0de80_e4da17cb",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de097cc_99ad1b98",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-11T14:29:06Z",
      "side": 1,
      "message": "@patrick - can we use `maxint` as the default value for the `LanesInUse` defined as `size` type property ? \n\nbecause `minint` would be 0, and link can have 0 lanes too (if the link is down or if its failed) , and we want a way to indicate 0 vs Unknown(we could use maxint to indicate Unknown case).",
      "parentUuid": "2fd49ce1_dfc8578c",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15d471e3_c9236054",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-11T14:33:52Z",
      "side": 1,
      "message": "I guess.  The bad thing about using `maxint` is that you might end up having extra code rather than just \"LanesInUse \u003e\u003d minimum_necessary\".",
      "parentUuid": "7de097cc_99ad1b98",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "610fa2b6_438d031d",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000206
      },
      "writtenOn": "2024-03-11T16:15:05Z",
      "side": 1,
      "message": "agree on that.\n\nIt almost feels like a case where we would need `optional` support on dbus to model this correctly.\n\nand on bmcweb (https://github.com/openbmc/bmcweb/blob/master/redfish-core/lib/pcie.hpp#L484)\n\n```\n    // The default value of LanesInUse is 0, and the field will be\n    // left as off if it is a default value.\n    if (lanesInUse !\u003d nullptr \u0026\u0026 *lanesInUse !\u003d 0)\n    {\n        asyncResp-\u003eres.jsonValue[\"PCIeInterface\"][\"LanesInUse\"] \u003d *lanesInUse;\n    }\n```\n\nwhere we don\u0027t show the redfish resource at all if the value is 0 (bug probably), It feels like having the default set to `maxint` would be least bad option to fix this. So that bmcweb could \n\n```\n    if (lanesInUse !\u003d nullptr \u0026\u0026 *lanesInUse !\u003d \u003cMAXINT\u003e)\n    {\n        asyncResp-\u003eres.jsonValue[\"PCIeInterface\"][\"LanesInUse\"] \u003d *lanesInUse;\n    }\n```\nand display value 0(indicating that there are 0 lanes) \u0026 also an absence of this property in redfish could be treated by redfish clients(like webGUI) as `Unknown`\n\ndo you have any other ideas ?",
      "parentUuid": "15d471e3_c9236054",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c3f18c2_225e747d",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-03-11T18:13:33Z",
      "side": 1,
      "message": "\u003e It almost feels like a case where we would need optional support on dbus to model this correctly.\n\nI don\u0027t have any ideas how to do that at a dbus level though, unfortunately.\n\n\u003e do you have any other ideas ?\n\n`maxint` is fine, it just isn\u0027t ideal.",
      "parentUuid": "610fa2b6_438d031d",
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8755b321_4d278045",
        "filename": "yaml/xyz/openbmc_project/Inventory/Item/PCIeDevice.interface.yaml",
        "patchSetId": 1
      },
      "lineNbr": 302,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2022-05-11T20:48:05Z",
      "side": 1,
      "message": "spelling",
      "range": {
        "startLine": 302,
        "startChar": 10,
        "endLine": 302,
        "endChar": 17
      },
      "revId": "d54edc824ff8ed734c11671f319266a95d1545d7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}