{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "02fd5618_b6e6c5f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Addressed and replied to your comments. Thanks",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b4978cc_d6de249f",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "nit: I\u0027m not positive if we want \u0027const\u0027 or \u0027readonly\u0027 for this.  \u0027const\u0027 means you can\u0027t change the value, even internally, and no signals will be emitted.  I can conceive of implementations that might want to adjust metric thresholds based on other activity.\n\nThis is probably fine to leave as-is for now or change to readonly now.  We can easily change this flag in the future.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf9225a9_4649a87b",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b4978cc_d6de249f",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93eeca6_77827704",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "Why is this an array?  We can\u0027t be over the Upper and under the Lower at the same time, right?\n\nSuppose we already had Critical-Upper asserted and we, in one polling interval, switch to Warning-Lower.  I would expect 2 signals: one to deassert the Critical-Upper and one to assert the Warning-Lower.",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fde93d18_8bf79467",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "This indicates the upper bound and lower bound (range) for the threshold level. Also, there is no Critical-Upper, there is just Critical, Upper bound and lower bound just defines the range for each threshold level.\n\nOther way to get this info would be to query the threshold interface using the ThresholdType from signal parameters. Let me know if you think thats better rather than sending it as part of signal?",
      "parentUuid": "b93eeca6_77827704",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6b08246_f971323c",
        "filename": "yaml/xyz/openbmc_project/Common/Threshold.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T22:29:33Z",
      "side": 1,
      "message": "I don’t really understand the utility of that. It means I have to pick apart this array and do math based on Value from the signal in order to know what’s going on. I suspect typical usage is going to be:\n\n“I see that Critical Upper is now asserted” and do some reaction to that. Having the value in the signal is extra gravy.  \n\nAsking the consumer to do math from the signal values to know what is going on is going to end up with some boilerplate code copied around in order to reverse this information back out of the signal.",
      "parentUuid": "fde93d18_8bf79467",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d82769_791e6475",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "nit: I\u0027m not sure if this is interesting information.  It could change in the future.",
      "range": {
        "startLine": 2,
        "startChar": 63,
        "endLine": 3,
        "endChar": 56
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa6b5ae3_612484c6",
        "filename": "yaml/xyz/openbmc_project/Metrics/Reset.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Done, removed specific examples.",
      "parentUuid": "b3d82769_791e6475",
      "range": {
        "startLine": 2,
        "startChar": 63,
        "endLine": 3,
        "endChar": 56
      },
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7804ff4_639915f0",
        "filename": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-09-19T21:33:01Z",
      "side": 1,
      "message": "Are you going to follow up with the new constants support in a separate commit?",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9569a0e4_fb507562",
        "filename": "yaml/xyz/openbmc_project/Metrics/Value.interface.yaml",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1001758
      },
      "writtenOn": "2023-09-19T22:19:14Z",
      "side": 1,
      "message": "Yes, we will make that addition to interface separately. Will float a PR for that.",
      "parentUuid": "b7804ff4_639915f0",
      "revId": "3a148c6fce5f441bbffa81b391cd2faadbb50b21",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}